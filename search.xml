<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android 实现自签名 HTTPS 教程</title>
    <url>/contents/Android%E5%AE%9E%E7%8E%B0%E8%87%AA%E7%AD%BE%E5%90%8DHTTPS%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>本文使用 <a href="https://github.com/square/okhttp">okhttp</a> 的封装类 <a href="https://github.com/hongyangAndroid/okhttputils">okhttp-utils</a> 实现 https 通讯<br>
okhttp-utils 对应 okhttp 版本 3.3.1.<br>
<span id="more"></span></p>
<h1 id="安装">安装</h1>
<ul>
<li>Android Studio<br>
<code>compile 'com.zhy:okhttputils:2.6.2'</code></li>
<li>Eclipse<br>
下载最新 jar:<a href="okhttputils-2_6_2.jar?raw=true">okhttputils-2_6_2.jar</a>。<br>
注：需要同时导入 okhttp 和 okio 的 jar，下载见：<a href="https://github.com/square/okhttp">https://github.com/square/okhttp</a>。</li>
</ul>
<h1 id="配置okhttpclient和ssl证书">配置 OkhttpClient 和 SSL 证书</h1>
<p>在 onCreate 函数中<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">InputStream certification = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    certification = getAssets().open(<span class="string">"xxxxx.cer"</span>);</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">HttpsUtils.SSLParams sslParams = HttpsUtils.getSslSocketFactory(<span class="keyword">new</span> InputStream[]{certification}, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">    .hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    .sslSocketFactory(sslParams.sSLSocketFactory, sslParams.trustManager)</span><br><span class="line">    .build();</span><br><span class="line">OkHttpUtils.initClient(okHttpClient);</span><br></pre></td></tr></tbody></table></figure><br>
其中xxxxx.cer为所连接服务器的证书，可从浏览器导出。<br>
也可以通过OpenSSL工具自签名生成，生成方法详见文章<a href="https://lxmymjr.github.io/2017/09/19/Python-Web%E6%A1%86%E6%9E%B6-CherryPy/#全局配置-global">Python Web 框架 - CherryPy</a><p></p>
<h1 id="通过https发送json消息">通过 HTTPS 发送 Json 消息</h1>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String url = <span class="string">"https://xxxxx"</span>;</span><br><span class="line">String json = <span class="string">"{\"key1\":\"value1\", \"key1\":\"value1\"}"</span>;</span><br><span class="line">OkHttpUtils</span><br><span class="line">    .postString()</span><br><span class="line">    .url(url)</span><br><span class="line">    .content(json)</span><br><span class="line">    .mediaType(MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>))</span><br><span class="line">    .build()</span><br><span class="line">    .execute(<span class="keyword">new</span> MyStringCallback());</span><br></pre></td></tr></tbody></table></figure>
<h1 id="通过https发送同步post请求">通过 HTTPS 发送同步 POST 请求</h1>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        String url = <span class="string">"https://xxxxx"</span>;</span><br><span class="line">        Response response;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            response = OkHttpUtils</span><br><span class="line">                    .post()</span><br><span class="line">                    .url(url)</span><br><span class="line">                    .addParams(<span class="string">"abc"</span>, <span class="string">"xxx"</span>)</span><br><span class="line">                    .addParams(<span class="string">"def"</span>, <span class="string">"yyy"</span>)</span><br><span class="line">                    .build()</span><br><span class="line">                    .execute();</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) {</span><br><span class="line">                Log.d(<span class="string">"OkHTTP"</span>,<span class="string">"OkHTTP is request success"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                Log.e(<span class="string">"OkHTTP"</span>, <span class="string">"OkHTTP is request error"</span>);</span><br><span class="line">            }</span><br><span class="line">            String data=response.body().string();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}.start();</span><br></pre></td></tr></tbody></table></figure>
<p>同步的 HTTPS 请求不能再主线程中进行，所以要新建一个线程处理同步请求。</p>
<h1 id="通过https发送异步post请求">通过 HTTPS 发送异步 POST 请求</h1>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String url = <span class="string">"https://xxxxx"</span>;</span><br><span class="line">OkHttpUtils</span><br><span class="line">    .post()</span><br><span class="line">    .url(url)</span><br><span class="line">    .addParams(<span class="string">"abc"</span>, <span class="string">"xxx"</span>)</span><br><span class="line">    .addParams(<span class="string">"def"</span>, <span class="string">"yyy"</span>)</span><br><span class="line">    .build()</span><br><span class="line">    .execute(<span class="keyword">new</span> MyStringCallback());</span><br></pre></td></tr></tbody></table></figure>
<h1 id="post表单形式上传文件">Post 表单形式上传文件</h1>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">OkHttpUtils.post()</span><br><span class="line">    .addFile(<span class="string">"file"</span>, <span class="string">"filename"</span>, file)</span><br><span class="line">    .url(url)</span><br><span class="line">    .params(params)</span><br><span class="line">    .headers(headers)</span><br><span class="line">    .build()</span><br><span class="line">    .execute(<span class="keyword">new</span> MyStringCallback());</span><br></pre></td></tr></tbody></table></figure>
<p>支持上传多个文件，addFile 的第一个参数为文件的 key，即类别表单中 <code>&lt;input type="file" name="file"/&gt;</code> 的 name 属性。<br>
params (params) 和 headers (headers) 可以省略。其中 params (params) 为参数格式，类似 addParams ()。<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"abc"</span>, <span class="string">"xxx"</span>);</span><br><span class="line">params.put(<span class="string">"def"</span>, <span class="string">"yyy"</span>);</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="处理返回消息">处理返回消息</h1>
<p>新建类 MyStringCallback：<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringCallback</span> <span class="keyword">extends</span> <span class="title">StringCallback</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Call call, Exception e, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response, <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        Log.i(<span class="string">"HTTP"</span>, <span class="string">"onResponse："</span> + response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Backpropagation</title>
    <url>/contents/Backpropagation.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cb2a545b753350aac33dbb9904f284d94e8aa7a893e29a509d37526eb3802e6e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Enter the password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 存储教程</title>
    <url>/contents/Firebase%E5%AD%98%E5%82%A8%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>Firebase 云端存储 (Cloud Storage) 是 Google 官方提供的一项功能强大、操作简单且经济实惠的对象存储服务，可轻松支持类似 Google 这种规模级别的应用。无论网络质量如何，适用于 Cloud Storage 的 Firebase SDK 都能为 Firebase 应用提供 Google 安全品质的文件上传和下载服务。可以使用 SDK 来存储图片、音频、视频或其他由用户生成的内容。在服务器上，可以使用 Google Cloud Storage 来访问相同的文件。<br>
<span id="more"></span></p>
<h1 id="准备工作">准备工作</h1>
<ol type="1">
<li>注册成为 Firebase 开发者<br>
在 <a href="https://console.firebase.google.com">Firebase Console</a> 注册账号并登陆。</li>
<li>添加项目<br>
点击 “添加项目”，填写项目名称和国家 / 地区。添加完成后进入项目。</li>
<li>添加应用<br>
在此只演示安卓系统，点击 “Overview 概览” 页面的 “将 Firebase 添加到您的 Android 应用” 按钮。填写 Android 应用包名（不可更改），别名（选填），调试签名证书 SHA1（可选）。</li>
<li>下载配置文件<br>
点击 “注册应用”，下载配置文件 “google-services.json”。（此配置文件也可以在 Overview 的右边设置中的 “项目设置” 中查看、下载。）<br>
在 Android Studio 中切换到项目视图，查看项目根目录（即 app 目录），并将配置文件放入到此根目录下。</li>
</ol>
<h1 id="服务器端">服务器端</h1>
<p>本文使用 Python 作为服务器脚本语言。<br>
Google Cloud Storage 源码：<a href="https://github.com/googleapis/google-cloud-python">Google Cloud Storage</a>，<a href="https://googleapis.dev/python/storage/latest/index.html">API Document</a></p>
<h2 id="环境配置">环境配置</h2>
<p>pip 方式：<code>pip install firebase_admin</code></p>
<h2 id="服务端主函数">服务端主函数</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> firebase_admin</span><br><span class="line"><span class="keyword">from</span> firebase_admin <span class="keyword">import</span> credentials</span><br><span class="line"><span class="keyword">from</span> firebase_admin <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line">cred = credentials.Certificate(<span class="string">'path/to/serviceAccountKey.json'</span>)</span><br><span class="line">firebase_admin.initialize_app(cred, {</span><br><span class="line">    <span class="string">'storageBucket'</span>: <span class="string">'&lt;BUCKET_NAME&gt;.appspot.com'</span></span><br><span class="line">})</span><br><span class="line">bucket = storage.bucket()</span><br><span class="line"></span><br><span class="line">blob = bucket.blob(<span class="string">'path/to/file'</span>)</span><br><span class="line">file_string = blob.download_as_string() <span class="comment">#以字符串的形式打印存储的文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'path/to/file'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    blob.download_to_file(file) <span class="comment">#以byte的形式下载文件到本地</span></span><br><span class="line">    </span><br><span class="line">blobs_list = <span class="built_in">list</span>(bucket.list_blobs(prefix=<span class="string">'xxx'</span>)) <span class="comment">#以blob形式返回以’xxx‘为前缀的文件列表</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="android上的cloud-storage">Android 上的 Cloud Storage</h2>
<p>前提条件：</p>
<ol type="1">
<li>安装 Firebase SDK。</li>
<li>在 Firebase 控制台中将应用添加到 Firebase 项目。</li>
</ol>
<h2 id="设置公共访问权限">设置公共访问权限</h2>
<p>Cloud Storage for Firebase 提供了一种声明式规则语言，可用于定义数据的组织结构方式、将数据编入索引的方式，以及何时可以读取和写入数据。默认情况下，对 Storage 的读写权限是有限制的，只有通过身份验证的用户才能读写数据。要在不设置身份验证的情况下开始使用 Storage，可以将规则配置为允许公共访问。</p>
<ol type="1">
<li>进入 firebase 控制台</li>
<li>进入 firebase 项目</li>
<li>左侧栏中点击 “Develop-Storage”</li>
<li> 选项卡中选择 “规则”</li>
<li> 右侧改写规则为公开规则：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">service firebase.storage {</span><br><span class="line">  match /b/{bucket}/o {</span><br><span class="line">    match /{allPaths=**} {</span><br><span class="line">      allow read, write;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>这会使得 Storage 向所有人开放，包括不使用应用的用户，因此在设置身份验证时，请务必重新限制对 Storage 的访问权限。</p>
<h1 id="android客户端">Android 客户端</h1>
<p>官方集成文档：<a href="https://firebase.google.com/docs/storage/android/start">Android 上的 Cloud Storage 使用入门</a></p>
<h2 id="添加所需的依赖">添加所需的依赖</h2>
<ol type="1">
<li>向根项目级 build.gradle 文件添加规则，以纳入 Google 服务插件：<br>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">buildscript {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dependencies {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        classpath 'com.google.gms:google-services:<span class="number">4.3</span><span class="number">.3</span>' #修改为最新版本</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>在模块 Gradle 文件（通常是 app/build.gradle）中，在文件的底部添加 apply plugin 代码行，以启用 Gradle 插件：<br>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">apply plugin: 'com.android.application'</span><br><span class="line">apply plugin: 'com.google.gms.google-services'</span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line">dependencies {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  implementation 'com.google.firebase:firebase-storage:<span class="number">19.1</span><span class="number">.1</span>' #修改为最新版本</span><br><span class="line">  implementation <span class="string">"com.google.firebase:firebase-storage-ktx:19.1.1"</span> #如果是kotlin语言则加上-ktx，修改为最新版本</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="设置-cloud-storage">设置 Cloud Storage</h2>
<p>访问存储分区的第一步是在 onCreate 函数中创建一个 FirebaseStorage 实例：<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">FirebaseStorage storage = FirebaseStorage.getInstance();</span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> storage = Firebase.storage</span><br></pre></td></tr></tbody></table></figure>
<h2 id="创建引用">创建引用</h2>
<p>要上传、下载或删除文件，或要获取或更新文件的元数据，请创建引用。引用可以看作是指向云端文件的指针。由于引用属于轻型项目，因此可以根据需要创建多个引用。 这些引用可以重复用于多个操作。</p>
<p>引用是使用 FirebaseStorage 单例实例并调用其 getReference () 方法创建的。<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">StorageReference storageRef = storage.getReference();</span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> storageRef = storage.reference</span><br></pre></td></tr></tbody></table></figure>
<p>可以在现有引用上使用 getChild () 方法，创建一个对树中较低位置的引用。比如文件存储在‘aaa’文件夹下‘bbb’文件中，则：<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">StorageReference fileRef = storageRef.child(<span class="string">"aaa/bbb"</span>);</span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> riversRef = storageRef.child(<span class="string">"aaa/bbb"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="上传">上传</h2>
<p>要将文件上传到 Cloud Storage，首先要创建对文件的完整路径（包括文件名）的引用。<br>
创建适当的引用后，可以调用 putBytes ()、putFile () 或 putStream () 方法将文件上传到 Cloud Storage。</p>
<h3 id="通过内存中的数据上传">通过内存中的数据上传</h3>
<p>putBytes () 方法是将文件上传到 Cloud Storage 的最简单方法。putBytes () 需要一个 byte [] 并返回 UploadTask，可以用它来管理和监控上传状态。<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] data;</span><br><span class="line"></span><br><span class="line">UploadTask uploadTask = mountainsRef.putBytes(data);</span><br><span class="line">uploadTask.addOnFailureListener(<span class="keyword">new</span> OnFailureListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NonNull</span> Exception exception)</span> </span>{</span><br><span class="line">        <span class="comment">// Handle unsuccessful uploads</span></span><br><span class="line">    }</span><br><span class="line">}).addOnSuccessListener(<span class="keyword">new</span> OnSuccessListener&lt;UploadTask.TaskSnapshot&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(UploadTask.TaskSnapshot taskSnapshot)</span> </span>{</span><br><span class="line">        <span class="comment">// taskSnapshot.getMetadata() contains file metadata such as size, content-type, etc.</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Get the data from an ImageView as bytes</span></span><br><span class="line">imageView.isDrawingCacheEnabled = <span class="literal">true</span></span><br><span class="line">imageView.buildDrawingCache()</span><br><span class="line"><span class="keyword">val</span> bitmap = (imageView.drawable <span class="keyword">as</span> BitmapDrawable).bitmap</span><br><span class="line"><span class="keyword">val</span> baos = ByteArrayOutputStream()</span><br><span class="line">bitmap.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, baos)</span><br><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = baos.toByteArray()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadTask = mountainsRef.putBytes(<span class="keyword">data</span>)</span><br><span class="line">uploadTask.addOnFailureListener {</span><br><span class="line">    <span class="comment">// Handle unsuccessful uploads</span></span><br><span class="line">}.addOnSuccessListener {</span><br><span class="line">    <span class="comment">// taskSnapshot.metadata contains file metadata such as size, content-type, etc.</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>由于 putBytes () 接受了 byte []，因此它需要应用立即将文件的全部内容保存在内存中。请考虑使用 putStream () 或 putFile () 以使用较少的内存。</p>
<h3 id="通过数据流上传">通过数据流上传</h3>
<p>putStream () 方法是将文件上传到 Cloud Storage 最通用的方法。putStream () 接受了 InputStream 并返回 UploadTask，可以使用它来管理和监控上传状态。<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">InputStream stream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"path/to/file"</span>));</span><br><span class="line"></span><br><span class="line">uploadTask = mountainsRef.putStream(stream);</span><br><span class="line">uploadTask.addOnFailureListener(<span class="keyword">new</span> OnFailureListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NonNull</span> Exception exception)</span> </span>{</span><br><span class="line">        <span class="comment">// Handle unsuccessful uploads</span></span><br><span class="line">    }</span><br><span class="line">}).addOnSuccessListener(<span class="keyword">new</span> OnSuccessListener&lt;UploadTask.TaskSnapshot&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(UploadTask.TaskSnapshot taskSnapshot)</span> </span>{</span><br><span class="line">        <span class="comment">// taskSnapshot.getMetadata() contains file metadata such as size, content-type, etc.</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> stream = FileInputStream(File(<span class="string">"path/to/file"</span>))</span><br><span class="line"></span><br><span class="line">uploadTask = mountainsRef.putStream(stream)</span><br><span class="line">uploadTask.addOnFailureListener {</span><br><span class="line">    <span class="comment">// Handle unsuccessful uploads</span></span><br><span class="line">}.addOnSuccessListener {</span><br><span class="line">    <span class="comment">// taskSnapshot.metadata contains file metadata such as size, content-type, etc.</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="从本地文件上传">从本地文件上传</h3>
<p>可以使用 putFile () 方法上传设备上的本地文件，例如相机中的照片和视频。putFile () 需要一个 File 并返回 UploadTask，可以使用它来管理和监控上传状态。<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Uri file = Uri.fromFile(<span class="keyword">new</span> File(<span class="string">"path/to/file"</span>));</span><br><span class="line">StorageReference fileRef = storageRef.child(<span class="string">"folder/"</span>+file.getLastPathSegment());</span><br><span class="line">uploadTask = fileRef.putFile(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register observers to listen for when the download is done or if it fails</span></span><br><span class="line">uploadTask.addOnFailureListener(<span class="keyword">new</span> OnFailureListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NonNull</span> Exception exception)</span> </span>{</span><br><span class="line">        <span class="comment">// Handle unsuccessful uploads</span></span><br><span class="line">    }</span><br><span class="line">}).addOnSuccessListener(<span class="keyword">new</span> OnSuccessListener&lt;UploadTask.TaskSnapshot&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(UploadTask.TaskSnapshot taskSnapshot)</span> </span>{</span><br><span class="line">        <span class="comment">// taskSnapshot.getMetadata() contains file metadata such as size, content-type, etc.</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> file = Uri.fromFile(File(<span class="string">"path/to/file"</span>))</span><br><span class="line"><span class="keyword">val</span> riversRef = storageRef.child(<span class="string">"folder/<span class="subst">${file.lastPathSegment}</span>"</span>)</span><br><span class="line">uploadTask = riversRef.putFile(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register observers to listen for when the download is done or if it fails</span></span><br><span class="line">uploadTask.addOnFailureListener {</span><br><span class="line">    <span class="comment">// Handle unsuccessful uploads</span></span><br><span class="line">}.addOnSuccessListener {</span><br><span class="line">    <span class="comment">// taskSnapshot.metadata contains file metadata such as size, content-type, etc.</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase 推送教程</title>
    <url>/contents/Firebase%E6%8E%A8%E9%80%81%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>Firebase 云信息传递 (FCM) 是 Google 官方提供的一种跨平台消息传递解决方案，可供免费、可靠地传递消息。<br>
<span id="more"></span></p>
<h1 id="准备工作">准备工作</h1>
<ol type="1">
<li>注册成为 Firebase 开发者<br>
在 <a href="https://console.firebase.google.com">Firebase Console</a> 注册账号并登陆。</li>
<li>添加项目<br>
点击 “添加项目”，填写项目名称和国家 / 地区。添加完成后进入项目。</li>
<li>添加应用<br>
在此只演示安卓系统，点击 “Overview 概览” 页面的 “将 Firebase 添加到您的 Android 应用” 按钮。填写 Android 应用包名（不可更改），别名（选填），调试签名证书 SHA1（可选）。</li>
<li>下载配置文件<br>
点击 “注册应用”，下载配置文件 “google-services.json”。（此配置文件也可以在 Overview 的右边设置中的 “项目设置” 中查看、下载。）<br>
在 Android Studio 中切换到项目视图，查看项目根目录（即 app 目录），并将配置文件放入到此根目录下。<br>
修改 Gradle：项目级 build.gradle（<code>&lt;project&gt;/build.gradle</code>）：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">buildscript {</span><br><span class="line">  dependencies {</span><br><span class="line">    // Add this line</span><br><span class="line">    classpath 'com.google.gms:google-services:3.1.0'</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
应用级 build.gradle（<code>&lt;project&gt;/&lt;app-module&gt;/build.gradle</code>）：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line">// Add to the bottom of the file （一定要放最后）</span><br><span class="line">apply plugin: 'com.google.gms.google-services'</span><br></pre></td></tr></tbody></table></figure><br>
按 IDE 中显示的栏中的 “立即同步”（Sync now）。</li>
</ol>
<h1 id="服务器端">服务器端</h1>
<p>本文使用 Python 作为服务器脚本语言。<br>
PyFCM 源码：<a href="https://github.com/olucurious/pyfcm">PyFCM</a></p>
<h2 id="环境配置">环境配置</h2>
<p>pip 方式：<code>pip install pyfcm</code></p>
<h2 id="服务端主函数">服务端主函数</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyfcm <span class="keyword">import</span> FCMNotification</span><br><span class="line"></span><br><span class="line">push_service = FCMNotification(api_key=<span class="string">"&lt;api-key&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者设置一个代理</span></span><br><span class="line"><span class="comment"># proxy_dict = {</span></span><br><span class="line">          <span class="string">"http"</span>  : <span class="string">"http://127.0.0.1"</span>,</span><br><span class="line">          <span class="string">"https"</span> : <span class="string">"http://127.0.0.1"</span>,</span><br><span class="line">        }</span><br><span class="line"><span class="comment"># push_service = FCMNotification(api_key="&lt;api-key&gt;", proxy_dict=proxy_dict)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># api-key可以从https://console.firebase.google.com/project/&lt;project-name&gt;/settings/cloudmessaging获得，即firebase console→对应项目→设置→云消息传递→服务器密钥。</span></span><br><span class="line"></span><br><span class="line">message_title = <span class="string">"xxxxx"</span> <span class="comment">#通知的标题</span></span><br><span class="line">message_body = <span class="string">"xxxxx"</span> <span class="comment">#通知的内容</span></span><br><span class="line">data_message = {</span><br><span class="line">    <span class="string">"a"</span> : <span class="string">"b"</span>,</span><br><span class="line">    <span class="string">"c"</span> : <span class="string">"d"</span>,</span><br><span class="line">    <span class="string">"e"</span> : <span class="string">"f"</span></span><br><span class="line">} <span class="comment"># 数据消息，为键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发送给单台设备。</span></span><br><span class="line">registration_id = <span class="string">"&lt;device registration_id&gt;"</span> <span class="comment">#Android应用的token</span></span><br><span class="line"><span class="comment"># 发送通知</span></span><br><span class="line">result = push_service.notify_single_device(registration_id=registration_id, message_title=message_title, message_body=message_body)</span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">result = push_service.single_device_data_message(registration_id=registration_id, data_message=data_message)</span><br><span class="line"><span class="comment"># 发送带有数据的通知</span></span><br><span class="line">result = push_service.notify_single_device(registration_id=registration_id, message_body=message_body, data_message=data_message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发送给多台设备消息通知。</span></span><br><span class="line">registration_ids = [<span class="string">"&lt;device registration_id 1&gt;"</span>, <span class="string">"&lt;device registration_id 2&gt;"</span>, ...]</span><br><span class="line"><span class="comment"># 发送通知</span></span><br><span class="line">result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_title=message_title, message_body=message_body)</span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">result = push_service.multiple_devices_data_message(registration_ids=registration_ids, data_message=data_message)</span><br><span class="line"><span class="comment"># 发送带有数据的通知</span></span><br><span class="line">result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message_body, data_message=data_message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他配置</span></span><br><span class="line"><span class="comment"># 发送一个高优先级的数据</span></span><br><span class="line">extra_kwargs = {</span><br><span class="line">    <span class="string">'priority'</span>: <span class="string">'high'</span></span><br><span class="line">}</span><br><span class="line">result = push_service.notify_single_device(registration_id=registration_id, data_message=data_message, extra_kwargs=extra_kwargs)</span><br><span class="line"><span class="comment"># 发送一个低优先级的数据</span></span><br><span class="line"><span class="comment"># low_priority默认为False</span></span><br><span class="line">result = push_service.notify_multiple_devices(registration_ids=registration_ids, message_body=message, low_priority=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得有效的registration_ids（可以用于清洗数据库中有效的registration_ids）</span></span><br><span class="line">registration_ids = [<span class="string">'reg id 1'</span>, <span class="string">'reg id 2'</span>, <span class="string">'reg id 3'</span>, <span class="string">'reg id 4'</span>, ...]</span><br><span class="line">valid_registration_ids = push_service.clean_registration_ids(registration_ids)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送消息至主题</span></span><br><span class="line">result = push_service.notify_topic_subscribers(topic_name=<span class="string">"xxx"</span>, message_body=message)</span><br><span class="line"><span class="comment"># 有条件的发送消息至主题，如果用户订阅了TopicA和TopicB或者TopicA和TopicC则能收到消息。</span></span><br><span class="line">topic_condition = <span class="string">"'TopicA' in topics &amp;&amp; ('TopicB' in topics || 'TopicC' in topics)"</span></span><br><span class="line">result = push_service.notify_topic_subscribers(message_body=message, condition=topic_condition)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他可选配置</span></span><br><span class="line">collapse_key (<span class="built_in">str</span>): 设置折叠消息</span><br><span class="line">delay_while_idle (<span class="built_in">bool</span>): 如果设置为真则表示消息将不会送达直到设备被激活。</span><br><span class="line">time_to_live (<span class="built_in">int</span>): 消息将会被保留多少秒，最多保留<span class="number">4</span>周，默认值也是<span class="number">4</span>周。</span><br><span class="line">restricted_package_name (<span class="built_in">str</span>): 应用包名必须匹配才收的到消息。</span><br><span class="line">dry_run (<span class="built_in">bool</span>): 如果设置为真则表示没有消息将会被送达，但是请求还是会被测试。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回数据</span></span><br><span class="line">response_dict = {</span><br><span class="line">    <span class="string">'multicast_ids'</span>: <span class="built_in">list</span>(), <span class="comment">#多播消息的唯一ID</span></span><br><span class="line">    <span class="string">'success'</span>: <span class="number">0</span>, <span class="comment">#没有报错的消息数目</span></span><br><span class="line">    <span class="string">'failure'</span>: <span class="number">0</span>, <span class="comment">#没有处理的消息数目</span></span><br><span class="line">    <span class="string">'canonical_ids'</span>: <span class="number">0</span>, <span class="comment">#包括标准registration token的结果数目</span></span><br><span class="line">    <span class="string">'results'</span>: <span class="built_in">list</span>(), <span class="comment">#表示消息状态的字典</span></span><br><span class="line">    <span class="string">'topic_message_id'</span>: <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">str</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="android上的主题消息传递">Android 上的主题消息传递</h2>
<p>在发布 / 订阅模式下，利用 FCM 主题消息传递功能，可以将消息发送至已经选择加入特定主题的多台设备。根据需要撰写主题消息，FCM 将处理消息路由并将消息可靠地传送至正确的设备。<br>
关于主题，请注意以下事项：</p>
<ol type="1">
<li>主题消息传递不限制每个应用拥有的主题和订阅数。</li>
<li>目前，主题消息的有效负载不得超过 2KB。</li>
<li>主题消息传递最适合传递新闻、天气或其他可通过公开途径获得的信息等内容。</li>
<li>主题消息针对吞吐量（而非延迟）进行了优化。要将消息快速安全地传送到单台设备或小规模设备组，应将消息定位至注册令牌，而非主题。</li>
<li>如果需要向一位用户的多台设备发送消息，可考虑针对这些使用情形进行设备组消息传递。</li>
</ol>
<h2 id="设置消息的优先级">设置消息的优先级</h2>
<ul>
<li>普通优先级：这是数据消息的默认优先级。普通优先级消息不会让休眠设备打开网络连接，为了省电，它们可能会被延迟传递。如果是对时间不太敏感的消息，例如新电子邮件通知或其他要同步的数据，建议选择普通传递优先级。</li>
<li>高优先级：这是通知消息的默认优先级。FCM 会立即尝试传递高优先级消息，允许 FCM 服务在可能的情况下唤醒休眠设备并打开与应用服务器的网络连接。例如，带有即时通讯、聊天或语音通话提醒功能的应用通常需要打开网络连接并确保 FCM 及时将消息传递给设备。如果消息属于时间关键型且需要用户立刻交互，请设置高优先级，但需要注意的是，将消息设置为高优先级会比普通优先级耗费更多电池电量。<br>
有效值为 normal 和 high。</li>
</ul>
<h2 id="不可折叠消息和可折叠消息">不可折叠消息和可折叠消息</h2>
<p>不可折叠消息表示每一条消息都将被传递至设备。不可折叠消息可传递一些有用内容至手机应用，从而联系服务器以获取数据，这与 “ping” 相反。默认情况下，消息不可折叠，但通知消息（始终是可折叠消息）除外。<br>
聊天消息或关键消息都是典型的不可折叠消息。例如，在 IM 应用中，可能想要传递每一条消息，因为它们的内容各不相同。<br>
在不折叠的情况下，最多可存储 100 条消息。达到此限值后，所有存储的消息都将被舍弃。设备在重新联网后将收到一条特殊消息，提示已达到此上限。之后，应用可以正常处理该状况，一般情况下会请求与应用服务器完全同步。<br>
可折叠消息在还未被传递至设备的情况下可能会被新消息替代。<br>
两种常见的可折叠消息是 “发送以同步” 消息和通知消息。“发送以同步” 消息是一个 “ping”，它会告诉移动应用从服务器同步数据。为用户更新最新比分的体育应用就属于这种消息。只有最新的消息是相关的。<br>
要将消息标记为可折叠，请在消息有效负载中添加 collapse_key 参数。FCM 允许应用服务器在任意指定时间内为每台设备使用最多 4 个不同的折叠键。也就是说，FCM 连接服务器可以为每台设备同时存储 4 条不同的可折叠 “发送以同步” 消息，每一条都含有不同的折叠键。如果超出此限值，FCM 将仅保留 4 个折叠键，具体保留哪几个不一定。</p>
<h1 id="android客户端">Android 客户端</h1>
<p>官方集成文档：<a href="https://firebase.google.com/docs/cloud-messaging/android/client">在 Android 上设置 Firebase 云消息传递客户端应用</a></p>
<h2 id="将firebase添加到android项目">将 Firebase 添加到 Android 项目</h2>
<p>前提条件：</p>
<ol type="1">
<li>运行 Android 4.0 (Ice Cream Sandwich) 或更高版本以及 Google Play 服务 11.0.4 或更高版本的设备。</li>
<li>Google 代码库中的 Google Play Services SDK，可通过 Android SDK Manager 获得。</li>
<li>最新版本的 Android Studio，1.5 版或更高版本。</li>
</ol>
<p>如果使用最新版本的 Android Studio（2.2 版或更高版本），建议使用 Firebase 智能助理来将的应用关联至 Firebase。Firebase 智能助理可以关联现有的项目，或者为创建一个新项目，并自动安装任何必要的 Gradle 依赖项。</p>
<ol type="1">
<li>依次点击 Tools&gt;Firebase 以打开 Assistant 窗口。</li>
<li>点击以展开所列功能之一（例如 Cloud Messaging），然后点击所提供的教程链接。</li>
<li>点击 Connect to Firebase 按钮以关联至 Firebase，并向应用添加必要的代码。</li>
</ol>
<h2 id="添加所需的依赖">添加所需的依赖</h2>
<ol type="1">
<li>向根项目级 build.gradle 文件添加规则，以纳入 Google 服务插件：<br>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">buildscript {</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dependencies {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        classpath 'com.google.gms:google-services:<span class="number">3.1</span><span class="number">.0</span>'</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>在模块 Gradle 文件（通常是 app/build.gradle）中，在文件的底部添加 apply plugin 代码行，以启用 Gradle 插件：<br>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">apply plugin: 'com.android.application'</span><br><span class="line">android {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line">dependencies {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  compile 'com.google.firebase:firebase-messaging:<span class="number">11.4</span><span class="number">.2</span>' #修改为最新版本</span><br><span class="line">  compile 'com.google.android.gms:play-services-base:<span class="number">11.4</span><span class="number">.2</span>' #修改为最新版本</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 一定要放在最底部</span></span><br><span class="line">apply plugin: 'com.google.gms.google-services'</span><br></pre></td></tr></tbody></table></figure></li>
<li>如果 FCM 对于 Android 应用的功能至关重要，请务必在应用的 build.gradle 中设置 minSdkVersion 8 或更高版本。这可确保 Android 应用无法安装在不能让其正常运行的环境中。</li>
</ol>
<h2 id="修改应用清单androidmanifest.xml">修改应用清单 AndroidManifest.xml</h2>
<ol type="1">
<li>一项继承 FirebaseMessagingService 的服务。如果希望在后台进行除接收应用通知之外的消息处理，则必须添加此服务。要接收前台应用中的通知、接收数据有效负载以及发送上行消息等，必须继承此服务。<br>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyFirebaseMessagingService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.google.firebase.MESSAGING_EVENT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>一项继承 FirebaseInstanceIdService 的服务，用于处理注册令牌的创建、轮替和更新。如果要发送至特定设备或者创建设备组，则必须添加此服务。<br>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".MyFirebaseInstanceIDService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.google.firebase.INSTANCE_ID_EVENT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>（可选）在应用组件中，用于设置通知的默认图标、颜色和通知渠道（Android O 的新功能）的元数据元素。如果传入的消息未明确设置图标、颜色或通知渠道，则 Android 会使用这些值。<br>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.google.firebase.messaging.default_notification_icon"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:resource</span>=<span class="string">"@drawable/ic_stat_ic_notification"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.google.firebase.messaging.default_notification_color"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:resource</span>=<span class="string">"@color/colorAccent"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="获取设备注册令牌">获取设备注册令牌</h2>
<p>初次启动应用时，FCM SDK 会为客户端应用实例生成一个注册令牌。如果希望定位至单台设备或创建设备组，则需要通过继承 FirebaseInstanceIdService 来访问此令牌。<br>
令牌会在初始启动后生成，建议检索最新更新的注册令牌。<br>
注册令牌可能会在发生下列情况时更改：<br>
- 应用删除实例 ID<br>
- 应用在新设备上恢复<br>
- 用户卸载 / 重新安装应用<br>
- 用户清除应用数据</p>
<ol type="1">
<li>检索当前注册令牌<br>
如果需要检索当前令牌，调用 FirebaseInstanceId.getInstance ().getToken ()。如果令牌尚未生成，此方法将返回 null。</li>
<li>监控令牌的生成<br>
每次生成新的令牌时，都会触发 onTokenRefresh 回调，因此，在上下文中调用 getToken 可以确保访问的是当前可用的注册令牌。确保已将服务添加到清单文件中，然后在 onTokenRefresh 的上下文中调用 getToken，并记录相应值，如下所示：<br>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTokenRefresh</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 获得注册令牌</span></span><br><span class="line">    String refreshedToken = FirebaseInstanceId.getInstance().getToken();</span><br><span class="line">    Log.d(TAG, <span class="string">"Refreshed token: "</span> + refreshedToken);</span><br><span class="line">    <span class="comment">// 后续操作，如发送令牌到服务器</span></span><br><span class="line">    sendRegistrationToServer(refreshedToken);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
获取该令牌后，可以将其发送到应用服务器并进行存储。</li>
</ol>
<h2 id="检查-google-play-服务">检查 Google Play 服务</h2>
<p>依靠 Play 服务 SDK 运行的应用在访问 Google Play 服务功能之前，应始终检查设备是否拥有兼容的 Google Play 服务 APK。建议在以下两个位置进行检查：主 Activity 的 onCreate () 方法中，及其 onResume () 方法中。在 onCreate () 中检查可确保该应用在检查成功之前无法使用。在 onResume () 中检查可确保当用户通过一些其他方式返回正在运行的应用（比如通过返回按钮）时，检查仍将继续进行。<br>
如果设备没有兼容的 Google Play 服务版本，应用可以调用 <code>GoogleApiAvailability.makeGooglePlayServicesAvailable(this)</code>，以便让用户从 Play 商店下载 Google Play 服务，需要 <code>import com.google.android.gms.common.GoogleApiAvailability;</code></p>
<h2 id="为客户端应用订阅主题">为客户端应用订阅主题</h2>
<p>客户端应用可以订阅任何现有主题，也可创建新主题。当客户端应用订阅新的主题名称（Firebase 项目中尚不存在的名称）时，系统会在 FCM 中创建使用这个名称的新主题，随后任何客户端都可订阅该主题。<br>
若要订阅某个主题，客户端应用需使用 FCM 主题名称调用 Firebase 云消息传递 subscribeToTopic ()：<code>FirebaseMessaging.getInstance().subscribeToTopic("news");</code><br>
若要退订，客户端应用需使用主题名称调用 Firebase 云消息传递 unsubscribeFromTopic ()。</p>
<h2 id="处理消息">处理消息</h2>
<p>要接收消息，使用继承 FirebaseMessagingService 的服务。重写 onMessageReceived 和 onDeletedMessages 回调。<br>
在收到消息后的 10 秒内处理该消息。超过 10 秒后，Android 无法保证能够执行，并可能随时终止进程。如果应用需要更多时间来处理消息，使用 Firebase Job Dispatcher。<br>
onMessageReceived 是为大多数消息类型提供的，但有以下例外情况：当应用在后台时送达的通知消息。在这种情况下，通知将传送至设备的系统任务栏。默认情况下，用户点按通知即可打开应用启动器。同时具备通知和数据有效负载的消息，无论应用在前台还是后台。在这种情况下，通知将传送至设备的系统任务栏，数据有效负载则传送至启动器 Activity 的 intent 的 extras 参数中。</p>
<table>
<thead>
<tr class="header">
<th>应用状态</th>
<th>通知</th>
<th>数据</th>
<th>两者</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>前台</td>
<td> onMessageReceived</td>
<td>onMessageReceived</td>
<td>onMessageReceived</td>
</tr>
<tr class="even">
<td> 后台</td>
<td>系统任务栏</td>
<td> onMessageReceived</td>
<td> 通知：系统任务栏<br>数据：intent 的 extras 参数。</td>
</tr>
</tbody>
</table>
<p>注意：当需要发送通知（和数据）但是又希望不需要用户打开通知消息的情况下进行其他操作，则可以只发送数据，但是在 onMessageReceived 函数中手动生成 notification。</p>
<h3 id="重写onmessagereceived">重写 onMessageReceived</h3>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageReceived</span><span class="params">(RemoteMessage remoteMessage)</span> </span>{</span><br><span class="line">    Log.d(TAG, <span class="string">"From: "</span> + remoteMessage.getFrom());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否收到数据</span></span><br><span class="line">    <span class="keyword">if</span> (remoteMessage.getData().size() &gt; <span class="number">0</span>) {</span><br><span class="line">        Log.d(TAG, <span class="string">"Message data payload: "</span> + remoteMessage.getData());</span><br><span class="line">        <span class="keyword">if</span> (<span class="comment">/*如果数据处理超过10秒*/</span> <span class="keyword">true</span>) {</span><br><span class="line">            scheduleJob();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 如果数据处理在10秒以内</span></span><br><span class="line">            handleNow();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查数据是否携带通知</span></span><br><span class="line">    <span class="keyword">if</span> (remoteMessage.getNotification() != <span class="keyword">null</span>) {</span><br><span class="line">        Log.d(TAG, <span class="string">"Message Notification Body: "</span> + remoteMessage.getNotification().getBody());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>如果服务器只发送数据，但是需要应用主动生成通知则：<br>
</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirebaseMessagingService</span> <span class="keyword">extends</span> <span class="title">FirebaseMessagingService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyFirebaseMsgService"</span>;</span><br><span class="line">    Map&lt;String, String&gt; messageBody;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageReceived</span><span class="params">(RemoteMessage remoteMessage)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (remoteMessage.getData().size() &gt; <span class="number">0</span>) {</span><br><span class="line">            Log.d(TAG, <span class="string">"Message data payload: "</span> + remoteMessage.getData());</span><br><span class="line">            messageBody = remoteMessage.getData();</span><br><span class="line">            sendNotification(messageBody.get(<span class="string">"xxx"</span>)); # 这里messageBody类似json格式，messageBody.get(<span class="string">"xxx"</span>)获得key为xxx的值。</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">(String messageBody)</span> </span>{</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, &lt;Activity&gt;.class); # 这里指定用户点击通知后所需打开的activity</span><br><span class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">        PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, PendingIntent.FLAG_ONE_SHOT);</span><br><span class="line">        Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);</span><br><span class="line">        NotificationCompat.Builder notificationBuilder =</span><br><span class="line">                <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, <span class="string">"default"</span>)</span><br><span class="line">                        .setSmallIcon(R.drawable.ic_stat_ic_notification)</span><br><span class="line">                        .setContentTitle(<span class="string">"Typing-Proof"</span>)</span><br><span class="line">                        .setContentText(messageBody)</span><br><span class="line">                        .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">                        .setSound(defaultSoundUri)</span><br><span class="line">                        .setContentIntent(pendingIntent);</span><br><span class="line">        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (notificationManager != <span class="keyword">null</span>) {</span><br><span class="line">            notificationManager.notify(<span class="number">0</span>, notificationBuilder.build());</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="重写ondeletedmessages">重写 onDeletedMessages</h3>
<p>如果应用在连接了 FCM 的特定设备上的待处理消息过多（超过 100 条），或者设备已有一个月以上的时间没有连接 FCM，FCM 可能不会传送消息。<br>
在这些情况下，可能会收到对 FirebaseMessagingService.onDeletedMessages () 的回调。<br>
当应用实例收到此回调时，应该执行与应用服务器的完全同步。<br>
如果在过去 4 周内未向该设备上的应用发送消息，FCM 将不会调用 onDeletedMessages ()。</p>
<h3 id="处理后台应用中的通知消息">处理后台应用中的通知消息</h3>
<p>当应用位于后台时，Android 会将通知消息转发至系统任务栏。默认情况下，用户点按通知时将打开应用启动器。<br>
这包括同时含有通知和数据有效负载的消息（以及从通知控制台发送的所有消息）。<br>
在这些情况下，通知将传送至设备的系统任务栏，数据有效负载则传送至启动器 Activity 的 intent 的 extras 参数中。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Tutorials</title>
    <url>/contents/Git-Tutorials.html</url>
    <content><![CDATA[<p>Git 指南，参考 <a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a><br>
<span id="more"></span></p>
<h1 id="安装">安装</h1>
<p><a href="https://book.git-scm.com/download/mac">MAC 版</a><br>
<a href="https://book.git-scm.com/download/win">Windows 版</a><br>
<a href="https://book.git-scm.com/download/linux">Linux 版</a></p>
<h1 id="指令">指令</h1>
<ul>
<li><strong>创建新仓库</strong>：本地创建新文件夹，打开，然后执行 <code>git init</code> 以创建新的 git 仓库。</li>
<li><strong>克隆仓库</strong>：执行 <code>git clone /path/to/repository</code> 以创建一个本地仓库的克隆版本；如果是远端服务器上的仓库，执行 <code>git clone username@host:/path/to/repository</code>。</li>
<li><strong>工作流</strong>：你的本地仓库由 git 维护的三棵 “树” 组成。第一个是你的<font color="red"><strong>工作目录</strong></font>，它持有实际文件；第二个是<font color="red"><strong>暂存区（Index）</strong></font>，它像个缓存区域，临时保存你的改动；最后是<font color="red"><strong> HEAD</strong></font>，它指向你最后一次提交的结果。</li>
<li><strong>查看不同</strong>：你可以修改你的文档或者代码，并且可以通过 <code>git diff</code> 查看具体修改内容和 <code>git diff --stat</code> 查看修改的总体信息。</li>
<li><strong>添加和提交</strong>：你可以提出更改（把它们添加到暂存区），执行 <code>git add &lt;filename&gt;</code> 或 <code>git add *</code>，这是 git 本工作流程的第一步；执行 <code>git commit -m "代码提交信息"</code> 以实际提交改动，现在你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</li>
<li><strong>推送改动</strong>：改动被提交到本地仓库的 HEAD 后，执行 <code>git push origin master</code> 以将这些改动提交到远端仓库（可以把 master 换成你想要推送的任何分支）。如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，执行 <code>git remote add origin &lt;server&gt;</code> 以添加服务器。执行 <code>git remote -v</code> 查看远程服务器。</li>
<li><strong>分支</strong>：分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是 “默认的” 分支。在其他分支上进行开发，完成后再将它们合并到主分支上。执行 <code>git checkout -b feature_x</code> 以创建一个叫做 “feature_x” 的分支，并切换过去；执行 <code>git checkout master</code> 以切换回主分支；执行 <code>git checkout master</code> 以删除新建的分支；除非你将分支推送到远端仓库 <code>git push origin &lt;branch&gt;</code>，不然该分支就是不为他人所见的；执行 <code>git branch</code> 查看本地分支。</li>
<li><strong>更新与合并</strong>：执行 <code>git pull</code> 以更新你的本地仓库至最新改动（在你的工作目录中获取并合并远端的改动）。执行 <code>git merge &lt;branch&gt;</code> 以合并其他分支到你的当前分支（例如 master）。git 会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突。 这时候就需要你手动修改这些文件来合并这些冲突。改完之后，你需要执行 <code>git add &lt;filename&gt;</code> 以将它们标记为合并成功。在合并改动之前，可以执行 <code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code> 以预览差异。</li>
<li><strong>标签</strong>：推荐为软件发布创建标签，你可以执行 <code>git tag 1.0.0 1b2e1d63ff</code> 以创建一个叫做 1.0.0 的标签，其中 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以执行 <code>git log</code> 以获取提交 ID，你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</li>
<li><strong>历史记录</strong>：执行 <code>git log</code> 以了解本地仓库的历史记录。</li>
<li><strong>替换本地改动</strong>：假如你操作失误，执行 <code>git checkout -- &lt;filename&gt;</code> 替换掉本地改动，此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：执行 <code>git fetch origin</code> 和 <code>git reset --hard origin/master</code>。</li>
</ul>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 实用工具</title>
    <url>/contents/Linux-%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7.html</url>
    <content><![CDATA[<p>Linux 的终端上有很多实用小工具，能提高工作效率，比如 tmux。</p>
<p>在此介绍他们的用法、配置和快捷键。</p>
<span id="more"></span>
<h1 id="tmux">TMUX</h1>
<p>参考资料：<a href="https://zhuanlan.zhihu.com/p/102546608">一文助你打通 tmux</a>，<a href="http://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程</a></p>
<p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称 "窗口"），窗口可以被不断切割，切割成一个个小块，这一个个小块我们叫做窗格（pane）。在里面输入命令。用户与计算机的这种临时的交互，称为一次 "会话"（session） 。</p>
<p>会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p>
<p>Tmux 就是会话与窗口的 "解绑" 工具，将它们彻底分离：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话 "绑定" 其他窗口。</p>
<ol type="1">
<li><p>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</p></li>
<li><p>它可以让新窗口 "接入" 已经存在的会话。</p></li>
<li><p>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</p></li>
<li><p>它还支持窗口任意的垂直和水平拆分。</p></li>
</ol>
<h2 id="tmux-的安装">tmux 的安装</h2>
<p>Linux 系统中通常使用 yum 来安装 tmux : <code>yum install tmux</code></p>
<p>Mac OS 系统中通常使用 brew 来安装 tmux :<code>brew install tmux</code></p>
<h2 id="tmux-的前缀键">tmux 的前缀键</h2>
<p>tmux 中的很多操作都是通过快捷键来实现的，通过快捷键我们可以更加高效的完成任务。如果想使用 tmux 中的快捷键，我们必须使用 tmux 的前缀按键 ctrl + b , 在 tmux 中所有的快捷键都需要通过前缀按键去唤起的。</p>
<h2 id="tmux-的会话常用操作">tmux 的会话常用操作</h2>
<table>
<colgroup>
<col style="width: 13%">
<col style="width: 69%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th>操作</th>
<th>命令</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>新建会话</td>
<td><code>tmux</code> / <code>tmux new -s &lt;session-name&gt;</code></td>
<td>无</td>
</tr>
<tr class="even">
<td>离开会话</td>
<td><code>tmux detach</code></td>
<td><code>(ctrl + b) d</code></td>
</tr>
<tr class="odd">
<td>查看会话列表</td>
<td><code>tmux ls</code></td>
<td><code>(ctrl + b) s</code></td>
</tr>
<tr class="even">
<td>进入会话</td>
<td><code>ta</code>/<code>tmux attach -t &lt;session-name&gt;</code></td>
<td>无</td>
</tr>
<tr class="odd">
<td>关闭会话</td>
<td><code>tmux kill-session -t &lt;session-name&gt;</code></td>
<td><code>ctrl + d</code></td>
</tr>
<tr class="even">
<td>切换会话</td>
<td><code>tmux switch -t &lt;session-name&gt;</code></td>
<td>无</td>
</tr>
<tr class="odd">
<td>重命名会话</td>
<td><code>tmux rename-session -t &lt;old-session-name&gt; &lt;new-session-name&gt;</code></td>
<td><code>(ctrl +b) $</code></td>
</tr>
</tbody>
</table>
<h2 id="tmux-的窗格常用操作">tmux 的窗格常用操作</h2>
<table>
<thead>
<tr class="header">
<th>操作</th>
<th>命令</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>水平分割窗格</td>
<td><code>tmux split-window -h</code>（左右）</td>
<td><code>(ctrl + b) %</code>（左右）</td>
</tr>
<tr class="even">
<td>垂直分割窗格</td>
<td><code>tmux split-window</code> （上下）</td>
<td><code>(ctrl + b) “</code>（上下）</td>
</tr>
<tr class="odd">
<td>光标移动到上方窗格</td>
<td><code>tmux select-pane -U</code></td>
<td><code>(ctrl +b) ↑</code></td>
</tr>
<tr class="even">
<td>光标移动到下方窗格</td>
<td><code>tmux select-pane -D</code></td>
<td><code>(ctrl +b) ↓</code></td>
</tr>
<tr class="odd">
<td>光标移动到左边窗格</td>
<td><code>tmux select-pane -L</code></td>
<td><code>(ctrl +b) ←</code></td>
</tr>
<tr class="even">
<td>光标移动到右边窗格</td>
<td><code>tmux select-pane -R</code></td>
<td><code>(ctrl +b) →</code></td>
</tr>
<tr class="odd">
<td>光标切换到上一个窗格</td>
<td>无</td>
<td><code>(ctrl +b) ;</code></td>
</tr>
<tr class="even">
<td>光标切换到下一个窗格</td>
<td>无</td>
<td><code>(ctrl +b) o</code></td>
</tr>
<tr class="odd">
<td>当前窗格向上移动</td>
<td><code>tmux swap-pane -U</code></td>
<td>无</td>
</tr>
<tr class="even">
<td>当前窗格向下移动</td>
<td><code>tmux swap-pane -D</code></td>
<td>无</td>
</tr>
<tr class="odd">
<td>关闭当前的窗格</td>
<td>无</td>
<td><code>(ctrl +b) x</code></td>
</tr>
<tr class="even">
<td>最大化窗格</td>
<td>无</td>
<td><code>(ctrl +b) z</code> 触发两次还原当前的窗格大小</td>
</tr>
<tr class="odd">
<td>显示时间</td>
<td>无</td>
<td><code>(ctrl +b) t</code> 点击 Enter 将会复原</td>
</tr>
</tbody>
</table>
<h2 id="tmux-的窗口常用操作">tmux 的窗口常用操作</h2>
<table>
<colgroup>
<col style="width: 9%">
<col style="width: 35%">
<col style="width: 55%">
</colgroup>
<thead>
<tr class="header">
<th>操作</th>
<th>命令</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>创建窗口</td>
<td><code>tmux new-window -n &lt;window-name&gt;</code></td>
<td><code>(ctrl + b) c</code></td>
</tr>
<tr class="even">
<td>切换窗口</td>
<td><code>tmux select-window -t &lt;window-name&gt;</code></td>
<td><code>(ctrl +b) w</code> 显示窗口列表可以通过 j,k 上下进行选择窗口，然后回车进入指定的窗口。<br><code>(ctrl +b) n</code> 快速切换到下一个窗口。<br><code>(ctrl +b) p</code> 快速切换到上一个窗口。</td>
</tr>
<tr class="odd">
<td>重命名窗口</td>
<td><code>tmux rename-window &lt;new-window-name&gt;</code></td>
<td><code>(ctrl +b) ,</code></td>
</tr>
<tr class="even">
<td>关闭窗口</td>
<td><code>tmux kill-window -t &lt;window-name&gt;</code></td>
<td><code>(ctrl +b) &amp;</code></td>
</tr>
</tbody>
</table>
<h2 id="tmux-的配置">tmux 的配置</h2>
<p>.tmux.conf 默认放在 ～（home 目录） 目录下面，以下是本人配置：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">set -g mode-keys vi</span><br><span class="line">set -g default-shell /bin/zsh</span><br><span class="line"></span><br><span class="line">set -g @plugin 'tmux-plugins/tpm'</span><br><span class="line">set -g @plugin 'tmux-plugins/tmux-sensible'</span><br><span class="line">set -g @plugin 'tmux-plugins/tmux-yank'</span><br><span class="line">set -g @plugin 'fcsonline/tmux-thumbs'</span><br><span class="line">set -g @plugin 'schasse/tmux-jump'</span><br><span class="line">set -g @plugin 'dracula/tmux'</span><br><span class="line"></span><br><span class="line">if '[ -f ~/dotfiles/tmux/bindings.tmux ]' 'source ~/dotfiles/tmux/bindings.tmux'</span><br><span class="line"></span><br><span class="line"># 主题配置</span><br><span class="line">set -g @dracula-show-battery false</span><br><span class="line">set -g @dracula-show-network false</span><br><span class="line">set -g @dracula-show-weather false</span><br><span class="line">set -g @dracula-show-timezone false</span><br><span class="line">set -g @dracula-military-time true</span><br><span class="line">set -g @dracula-border-contrast true</span><br><span class="line">set -g @dracula-cpu-usage true</span><br><span class="line">set -g @dracula-ram-usage tr</span><br><span class="line"></span><br><span class="line">run '~/.tmux/plugins/tpm/tpm'</span><br></pre></td></tr></tbody></table></figure>
<ol type="1">
<li>tmux-plugins/tpm 是 <a href="https://github.com/tmux-plugins/tpm">Tmux Plugin Manager</a>，即 Tmux 的插件管理工具。</li>
<li>tmux-plugins/<a href="https://github.com/tmux-plugins/tmux-sensible">tmux-sensible</a>，一组人人都能接受的选项。</li>
<li>tmux-plugins/<a href="https://github.com/tmux-plugins/tmux-yank">tmux-yank</a>，允许拷贝至系统剪切板。</li>
<li>schasse/<a href="https://github.com/schasse/tmux-jump">tmux-jump</a>，按 <code>tmux-prefix</code>+<code>j</code> 键进入 jump 模式，输入需要跳转到的位置的字符，屏幕会高亮显示符合条件的位置并分配一个 key，输入 key 后光标就会跳转至选中位置。</li>
<li><a href="https://draculatheme.com/tmux">dracula 主题</a>。</li>
</ol>
<p>在 Tmux 中，安装插件的一些快捷命令如下:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">prefix shift-i      # install</span><br><span class="line">prefix shift-u      # update</span><br><span class="line">prefix alt-u        # uninstall plugins not on the plugin list</span><br></pre></td></tr></tbody></table></figure>
<p>bindings.tmux 文件：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># -- general -------------------------------------------------------------------</span><br><span class="line">set -g default-terminal "screen-256color" # colors!</span><br><span class="line">setw -g xterm-keys on</span><br><span class="line">set -s escape-time 10                     # faster command sequences</span><br><span class="line">set -sg repeat-time 300                   # increase repeat timeout</span><br><span class="line">set -s focus-events on</span><br><span class="line">set -g prefix2 C-a                        # GNU-Screen compatible prefix</span><br><span class="line">bind C-a send-prefix -2</span><br><span class="line">set -q -g status-utf8 on                  # expect UTF-8 (tmux &lt; 2.2)</span><br><span class="line">setw -q -g utf8 on</span><br><span class="line">set -g history-limit 5000                 # boost history</span><br><span class="line"></span><br><span class="line"># edit configuration</span><br><span class="line"># bind e new-window -n "~/.tmux.conf.local" "sh -c '\${EDITOR:-vim} ~/.tmux.conf.local &amp;&amp; tmux source ~/.tmux.conf &amp;&amp; tmux display \"~/.tmux.conf sourced\"'"</span><br><span class="line">bind E command-prompt -p "Command:" \</span><br><span class="line">       "run \"tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' \</span><br><span class="line">              | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""</span><br><span class="line"></span><br><span class="line"># reload configuration</span><br><span class="line">bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'</span><br><span class="line"></span><br><span class="line"># send the prefix to client inside window</span><br><span class="line">bind-key -n C-q send-prefix</span><br><span class="line"></span><br><span class="line"># -- display -------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">set -g base-index 1           # start windows numbering at 1</span><br><span class="line">setw -g pane-base-index 1     # make pane numbering consistent with windows</span><br><span class="line"></span><br><span class="line">setw -g automatic-rename on   # rename window to reflect current program</span><br><span class="line">set -g renumber-windows on    # renumber windows when a window is closed</span><br><span class="line"></span><br><span class="line">set -g set-titles on          # set terminal title</span><br><span class="line"></span><br><span class="line"># fix the window name</span><br><span class="line">set-option -g allow-rename off</span><br><span class="line"></span><br><span class="line">set -g display-panes-time 800 # slightly longer pane indicators display time</span><br><span class="line">set -g display-time 1000      # slightly longer status messages display time</span><br><span class="line">set -g status-interval 10     # redraw status line every 10 seconds</span><br><span class="line"></span><br><span class="line"># clear both screen and history</span><br><span class="line">bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history</span><br><span class="line"></span><br><span class="line"># activity</span><br><span class="line">set -g monitor-activity on</span><br><span class="line">set -g visual-activity off</span><br><span class="line"></span><br><span class="line"># -- navigation ----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># create session</span><br><span class="line">bind C-c new-session</span><br><span class="line"></span><br><span class="line"># find session</span><br><span class="line">bind C-f command-prompt -p find-session 'switch-client -t %%'</span><br><span class="line"></span><br><span class="line"># split current window horizontally</span><br><span class="line">bind - split-window -v -c "#{pane_current_path}"</span><br><span class="line"># split current window vertically</span><br><span class="line">bind _ split-window -h -c "#{pane_current_path}"</span><br><span class="line">bind | split-window -h -c "#{pane_current_path}"</span><br><span class="line"></span><br><span class="line">bind c new-window -c "#{pane_current_path}"</span><br><span class="line"></span><br><span class="line"># pane navigation</span><br><span class="line">bind -r h select-pane -L  # move left</span><br><span class="line">bind -r j select-pane -D  # move down</span><br><span class="line">bind -r k select-pane -U  # move up</span><br><span class="line">bind -r l select-pane -R  # move right</span><br><span class="line">bind -r &gt; swap-pane -D       # swap current pane with the next one</span><br><span class="line">bind -r &lt; swap-pane -U       # swap current pane with the previous one</span><br><span class="line"></span><br><span class="line"># pane resizing</span><br><span class="line">bind -r H resize-pane -L 2</span><br><span class="line">bind -r J resize-pane -D 2</span><br><span class="line">bind -r K resize-pane -U 2</span><br><span class="line">bind -r L resize-pane -R 2</span><br><span class="line"></span><br><span class="line"># window navigation</span><br><span class="line">unbind n</span><br><span class="line">unbind p</span><br><span class="line">bind -r C-h previous-window # select previous window</span><br><span class="line">bind -r C-l next-window     # select next window</span><br><span class="line">bind Tab last-window        # move to last active window</span><br><span class="line"></span><br><span class="line"># kill pane</span><br><span class="line">bind -r W kill-pane</span><br><span class="line">bind C-w kill-pane</span><br><span class="line"></span><br><span class="line"># -- copy mode -----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">bind Enter copy-mode # enter copy mode</span><br><span class="line"></span><br><span class="line">run -b 'tmux bind -t vi-copy v begin-selection 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -t vi-copy y copy-selection 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -t vi-copy Escape cancel 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -t vi-copy H start-of-line 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -t vi-copy L end-of-line 2&gt; /dev/null || true'</span><br><span class="line">run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2&gt; /dev/null || true'</span><br><span class="line"></span><br><span class="line"># copy to macOS clipboard</span><br><span class="line">if -b 'command -v pbcopy &gt; /dev/null 2&gt;&amp;1' 'bind y run -b "tmux save-buffer - | pbcopy"'</span><br><span class="line">if -b 'command -v reattach-to-user-namespace &gt; /dev/null 2&gt;&amp;1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'</span><br><span class="line"># copy to X11 clipboard</span><br><span class="line">if -b 'command -v xsel &gt; /dev/null 2&gt;&amp;1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'</span><br><span class="line">if -b '! command -v xsel &gt; /dev/null 2&gt;&amp;1 &amp;&amp; command -v xclip &gt; /dev/null 2&gt;&amp;1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard &gt;/dev/null 2&gt;&amp;1"'</span><br><span class="line"># copy to Windows clipboard</span><br><span class="line">if -b 'command -v clip.exe &gt; /dev/null 2&gt;&amp;1' 'bind y run -b "tmux save-buffer - | clip.exe"'</span><br><span class="line">if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - &gt; /dev/clipboard"'</span><br><span class="line"></span><br><span class="line"># -- buffers -------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">bind b list-buffers  # list paste buffers</span><br><span class="line">bind p paste-buffer  # paste from the top paste buffer</span><br><span class="line">bind P choose-buffer # choose which buffer to paste from</span><br><span class="line"></span><br><span class="line"># -- mouse mode ----------------------------------------------------------------</span><br><span class="line">set -g mouse on</span><br><span class="line"></span><br><span class="line"># Toggle mouse on</span><br><span class="line">bind-key M \</span><br><span class="line">  set-option -g mouse on \;\</span><br><span class="line">  display-message 'Mouse: ON'</span><br><span class="line"></span><br><span class="line"># Toggle mouse off</span><br><span class="line">bind-key m \</span><br><span class="line">  set-option -g mouse off \;\</span><br><span class="line">  display-message 'Mouse: OFF'</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning：1. Regression</title>
    <url>/contents/ML-1-Regression.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3e5c4a0e9281c28a161bfe9e1b2e5f40cea04ffba99f511d956e370409925855">0995c6aa457762375935b1a6315531ef338c34f46eb6de53b0f748d9bb9ef8dd0a232936228668da1f7497eacb12b5b5093e71a439cedc7209702c12bf711b7e4ff8d33db961e725ecd7f968280234f55a027e67053dad3696426289ef240422c2dcc158755e84039ab36c784e2f836a4d847f02a3f1418adedd0b4b69d8c953051bd844a4a5a30c80412b74a3731a10f4780af9bcd11e01c9bdc0e8cdcab4ad21c014c60ac18aa48307df5b0678c890ef0f6c95a2298c96af782b16d7be71370fd613204d2a130f502042b0058b90c616d19e335dba5f3d212f2358dee72de82907041d8d8d9f9bd88a2d915096a360c025bef01b895a807ecd074fd80192da0af118fbf48592e67b212c91aba6641292048174045b82e2ebeca86c2c3829cfef2988d2a9d49b7fe1adeed076dca4fdf07537edaf4bf10a522f025af61e80697aa170f8317fdfd6b0afc643bf2689d15aefe82a7ffceeee8d6488f3eb73d38a98a404d73bfe1419ab8d97b3e1092d5216967cce56d4415eb8b4c758a5b22c21d3598b60774f9d7524d36885d0387625bec74a4cadde9bb47397f09340b4c06370860a761c4a0600184910807eb63ff7ee1cd5e37e5c3248f09eddcc3d93effbba55402ad305a6f7051afb26a5a44382f44a5b479b6bdfca753a06266cd136cae0ce1b9854170b8a13824941d2fc3c435af36fa2c23084b29b87dc2aa6bce44ae8bf186934275738acb0fd401eea9ce2f0d2c7052b4ab55f202a8d4512846998a2d5e08d81e0b549f2aed8aa88451ffabfa8f7bc7e9cbc0eeedeadfa40a78ca2e53bbbac8702f5a62a3cdff50c5265ec64f623d30b2c0555369f657d9703b8c305f024d2c35e574ee8eaee0bc42d1583e1741ec10511ac2e044bba3ab87591b4fd0e144550de5f72ca4688a7109490e6a6e8e15b76ac4d5b725400b35e457cfd39064c26b5c1ed0f1a7086058cca4c29a4c9af4ab90941913d20e97bcf3cd4e3b424dfd26810d04267a2a35f1fd168dbb6ffd4c21494436570727fec24e15bda</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Enter the password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Learning Notes</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>PySpark 的 DataFrame 与 Pandas 的 DataFrame 的比较</title>
    <url>/contents/PySpark%E7%9A%84DataFrame%E4%B8%8EPandas%E7%9A%84DataFrame%E7%9A%84%E6%AF%94%E8%BE%83.html</url>
    <content><![CDATA[<p>PySpark 和 Pandas 中都有 DataFrame 这个数据结构，但是他们的使用方法大有不同。<br>
Reference：<a href="https://zhuanlan.zhihu.com/p/34901585">pyspark 系列 --pandas 与 pyspark 对比</a> ;<a href="http://moverzp.com/2018/03/17/Pandas%E5%92%8CPySpark%E4%B8%AD%E7%9A%84DataFrame%E6%AF%94%E8%BE%83/">Pandas 和 PySpark 中的 DataFrame 比较</a> ;<a href="https://spark.apache.org/docs/latest/api/python/pyspark.sql.html">PySpark API</a>;<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html">Pandas API</a><br>
<span id="more"></span></p>
<h1 id="工作方式">工作方式</h1>
<ul>
<li><p>PySpark<br>
分布式并行计算框架，内建并行机制 parallelism，所有的数据和操作自动并行分布在各个集群结点上。以处理 in-memory 数据的方式处理 distributed 数据。支持 Hadoop，能处理大量数据<br>
<code>import pyspark.sql.functions as F</code> 导入内置函数库</p></li>
<li><p> Pandas<br>
单机 single machine tool，没有并行机制 parallelism，不支持 Hadoop，处理大量数据有瓶颈</p></li>
</ul>
<h1 id="延迟机制">延迟机制</h1>
<ul>
<li><p>PySpark<br>
lazy-evaluated</p></li>
<li><p>Pandas<br>
not lazy-evaluated</p></li>
</ul>
<p>注：在程式语言理论中，<strong>惰性求值</strong>（英语：Lazy Evaluation），又译为<strong>惰性计算</strong>、<strong>懒惰求值</strong>，也称为<strong>传需求调用</strong>（call-by-need），是一个计算机编程中的一个概念，目的是要最小化计算机要做的工作。它有两个相关而又有区别的含意，可以表示为 “延迟求值” 和 “最小化求值”。在使用延迟求值的时候，表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值</p>
<h1 id="内存缓存">内存缓存</h1>
<ul>
<li><p>PySpark<br>
persist () 或 cache () 将转换的 RDDs 保存在内存</p></li>
<li><p> Pandas<br>
单机缓存</p></li>
</ul>
<h1 id="dataframe可变性">DataFrame 可变性</h1>
<ul>
<li><p>PySpark<br>
Spark 中 RDDs 是不可变的，因此 DataFrame 也是不可变的</p></li>
<li><p> Pandas<br>
Pandas 中 DataFrame 是可变的</p></li>
</ul>
<h1 id="创建">创建</h1>
<ul>
<li>PySpark<br>
直接创建： <code>spark_df = sc.parallelize([(1, 2), (3, 4)]).toDF(['xx',  'yy']</code><br>
从 pandas_df 转换：<code>spark_df = SQLContext.createDataFrame(pandas_df)</code><br>
另外，createDataFrame 支持从 list 转换 spark_df，其中 list 元素可以为 tuple，dict，rdd<br>
读取 CSV 文件：<code>spark_df = spark.read.csv(csv_path, header=True)</code> 如果 CSV 文件有 header，则将其读取为列名<br>
读取 parquet 文件：<code>spark_df = spark.read.parquet(parquet_path)</code><br>
读取 json 文件：<code>spark_df = spark.read.json(json_path)</code><br>
读取 txt 文件：<code>spark_df = sc.textFile(txt_path).toDF()</code><br>
注：这些 path 均为 HDFS 路径</li>
<li> Pandas<br>
直接创建： <code>pandas_df = pd.DataFrame({'xx': {0: 1, 1: 3}, 'yy':  {0: 2, 1: 4}})</code><br>
从 spark_df 转换：<code>pandas_df = spark_df.toPandas()</code>，或读取其他数据<br>
读取 CSV 文件：<code>pd.read_csv(csv_path)</code><br>
读取 parquet 文件：<code>pd.read_parquet(parquet_path)</code>，其中如果 parquet_path 如果是 HDFS 路径则需要加前缀 'hdfs://'，比如：<code>'hdfs:///projects/path/to/parquet/'</code></li>
</ul>
<h1 id="写入">写入</h1>
<ul>
<li><p>PySpark<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.repartition(partition_num).write.mode(<span class="string">'overwrite'</span>/<span class="string">'append'</span>).partitionBy(col_name).parquet(parquet_path)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Pandas<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.to_csv(csv_path, index=<span class="literal">True</span>/<span class="literal">False</span>) <span class="comment"># 是否保留index</span></span><br><span class="line">df.to_pickle(csv_pickle)</span><br><span class="line">df.to_parquet(parquet_path)</span><br><span class="line">df.to_csv(csv_path, index=<span class="literal">True</span>/<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<h1 id="index索引">index 索引</h1>
<ul>
<li><p>PySpark<br>
没有 index 索引，若需要则要额外创建该列<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.withColumn(<span class="string">'index'</span>, F.row_number().over(Window.orderBy(F.monotonically_increasing_id())))</span><br><span class="line">df.rdd.zipWithIndex().toDF().select(F.col(<span class="string">'_1'</span>).getItem(<span class="string">'col_name_1'</span>).alias(<span class="string">'col_name_1'</span>), F.col(<span class="string">'_2'</span>).getItem(<span class="string">'col_name_2'</span>).alias(<span class="string">'col_name_2'</span>), ..., F.col(<span class="string">'_n'</span>).getItem(<span class="string">'col_name_n'</span>).alias(<span class="string">'col_name_n'</span>), F.col(<span class="string">'_(n+1)'</span>).alias(<span class="string">'row_index'</span>)) <span class="comment"># 此方法更快</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Pandas<br>
自动创建<br>
注：当将 pandas_df 转换为 spark_df 时如需保留索引，则可用<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">spark_df = SQLContext.createDataFrame(pandas_df.reset_index())</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<h1 id="行结构">行结构</h1>
<ul>
<li><p>PySpark<br>
Row 结构，属于 Spark DataFrame 结构</p></li>
<li><p> Pandas<br>
Series 结构，属于 Pandas DataFrame 结构</p></li>
</ul>
<h1 id="列结构">列结构</h1>
<ul>
<li><p>PySpark<br>
Column 结构，属于 Spark DataFrame 结构，如：<code>DataFrame[name: string]</code></p></li>
<li><p>Pandas<br>
Series 结构，属于 Pandas DataFrame 结构</p></li>
</ul>
<h1 id="列名称">列名称</h1>
<ul>
<li>PySpark<br>
允许重名，修改列名采用 alias 方法<br>
修改列名：<code>df.withColumnRenamed('old_name', 'new_name')</code><br>
<code>df.select(F.col('old_name').alias('new_name'), ...)</code><br>
<code>df.selectExpr('old_name as new_name', ...)</code></li>
<li>Pandas<br>
不允许重名<br>
修改列名：<code>df.rename(columns={'old_name': 'new_name'})</code></li>
</ul>
<h1 id="列修改">列修改</h1>
<ul>
<li>PySpark<br>
原来有 <code>df['xx']</code> 列，<code>df.withColumn('xx', 1)</code><br>
如需判断逻辑：<code>df.withColumn('xx', F.when(condition expression, true expression).otherwise(false expression))</code><br>
如需链接：<code>df.withColumn('xx', F.concat(F.col('yy'), F.lit('-'), F.col('zz')))</code> 其中 yy 和 zz 列须为 string 类型，如不是则需要提前类型转换。<br>
从文件路径取值：<code>df.withColumn('xx', F.input_file_name().substr(start_index, stop_index))</code></li>
<li>Pandas<br>
原来有 <code>df['xx']</code> 列，<code>df['xx'] = 1</code><br>
如需判断逻辑：<code>df.loc[condition expression, 'xx'] = true expression</code><br>
<code>df.loc[~condition expression, 'xx'] = false expression</code><br>
<code>df['xx'] = np.where(condition expression, true expression, false expression)</code><br>
<code>df['xx'] = df.apply(lambda x: true expression if condition expression else false expression, axis=1)</code><br>
如需链接：<code>df['xx'] = df.yy + '-' + df.zz</code> 其中 yy 和 zz 列须为 string 类型，如不是则需要提前类型转换。</li>
</ul>
<h1 id="显示">显示</h1>
<ul>
<li>PySpark<br>
df 不输出具体内容，输出具体内容用 show 方法。<code>df.show(5, truncate=100)</code> 默认显示 20 行，每行显示长度通过 truncate 参数设置<br>
以树的形式打印概要：<code>df.printSchema()</code><br>
<code>df.columns</code> 输出列的名字</li>
<li> Pandas<br>
df 输出具体内容<br>
<code>df.columns</code> 输出列的名字<br>
<code>pd.set_option('display.max_columns', None) # 显示所有列</code><br>
<code>pd.set_option('max_colwidth', 100) # 每行显示长度设置</code><br>
<code>pd.set_option('display.max_rows', None) # 显示所有行</code></li>
</ul>
<h1 id="排序">排序</h1>
<ul>
<li><p>PySpark<br>
<code>df.sort(df.xx.asc(),df.yy.desc())</code><br>
<code>df.sort(F.asc('xx'),F.desc('yy'))</code><br>
<code>df.sort(F.col("xx").asc(), F.col("yy").desc())</code><br>
<code>df.orderBy(F.col("xx").asc(), F.col("yy").desc())</code><br>
在列中按值依次进行排序，指定先升序后降序</p></li>
<li><p> Pandas<br>
<code>df.sort_index()</code> 按轴进行升序排序<br>
<code>df.sort_values(['xx', 'yy'], ascending=[True, False])</code> 在列中按值依次进行排序，指定先升序后降序<br>
<code>df.sort_values(['xx', 'yy'], axis=0)</code>，<code>df.sort_values([1, 2], axis=1)</code> 在列、行中按值进行升序排序</p></li>
</ul>
<h1 id="选择或切片">选择或切片</h1>
<ul>
<li><p>PySpark<br>
<code>df.select('xx', 'yy')</code> 选择一列或多列<br>
<code>df.first()</code> 以行的形式返回第一行。（注：行的形式为 <code>[Row(col_name1=value1, col_name2=value2, ...)]</code>）<br>
<code>df.head(n)</code>，<code>df.take(n)</code> 以行的形式返回前 n 行；<code>df.tail(n)</code> 以行的形式返回最后 n 行<br>
用 <code>df.collect()</code> 以行的形式返回所有行</p></li>
<li><p> Pandas<br>
<code>df.xx</code>，<code>df['xx']</code> 选择列名为 xx 的列，df [k] 选择行名为 k 的行<br>
<code>df.iat[:, k]</code>，<code>df.iloc[:, k]</code> 选择第 k 列，<code>df.iat[k]</code>，<code>df.iloc[k]</code> 选择第 k 行</p></li>
</ul>
<h1 id="过滤">过滤</h1>
<ul>
<li><p>PySpark<br>
<code>df.filter(df['xx'] &gt; k)</code> 或者 <code>df.where(df['xx'] &gt; k)</code></p>
<p>取值存在于：<code>df.filter(F.col('xx').isin(filter_list))</code></p>
<p>空值处理：</p>
<ul>
<li>值为 null：<code>df.filter(F.col('xx').isNull())</code> 和 <code>df.filter(F.col('xx').isNotNull())</code></li>
<li>值为空字符串：<code>df.filter(F.col('xx') == '')</code></li>
<li>值为 np.nan：<code>df.filter(F.col('xx') == np.nan)</code></li>
</ul></li>
<li><p>Pandas<br>
<code>df[df['xx']&gt;k]</code> 或者 <code>s[s&gt;k]</code></p>
<p>取值存在于：<code>df[df.xx.isin(filter_list)]</code></p>
<p>空值处理：包括 null，np.NaN，pd.NaT，None，不包括空字符串 <code>df[df.xx.isnull()]</code> 或 <code>df[df.xx.isna()]</code> 和 <code>df.filter(F.col('xx').notnull())</code> 或 <code>df[df.xx.notnull()]</code> 或 <code>df[df.xx.notna()]</code></p></li>
<li><p>Examples:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt; pdf = pd.DataFrame(<span class="built_in">dict</span>(numpy=[np.NaN], pandas=[pd.NaT], empty=[<span class="string">''</span>], none=[<span class="literal">None</span>]))</span><br><span class="line">&gt;&gt; pdf</span><br><span class="line">   numpy pandas empty  none</span><br><span class="line"><span class="number">0</span>    NaN    NaT        <span class="literal">None</span></span><br><span class="line">&gt;&gt; pdf.isnull()</span><br><span class="line">   numpy  pandas  empty  none</span><br><span class="line"><span class="number">0</span>   <span class="literal">True</span>    <span class="literal">True</span>  <span class="literal">False</span>  <span class="literal">True</span></span><br><span class="line">&gt;&gt; <span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> *</span><br><span class="line">&gt;&gt; sdf = spark.createDataFrame(pdf, StructType([StructField(<span class="string">'numpy'</span>, DoubleType(), <span class="literal">True</span>),StructField(<span class="string">'pandas'</span>, StringType(), <span class="literal">True</span>),StructField(<span class="string">'empty'</span>, StringType(), <span class="literal">True</span>),StructField(<span class="string">'pandas'</span>, StringType(), <span class="literal">True</span>)])) <span class="comment"># 必须指定schema，否则报错”ValueError: Some of types cannot be determined after inferring“</span></span><br><span class="line">&gt;&gt; sdf.show()</span><br><span class="line">+-----+------+-----+------+</span><br><span class="line">|numpy|pandas|empty|pandas|</span><br><span class="line">+-----+------+-----+------+</span><br><span class="line">|  NaN|  null|     |  null|</span><br><span class="line">+-----+------+-----+------+</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="分组聚合">分组聚合</h1>
<ul>
<li><p>PySpark<br>
<code>df.groupBy(cols_to_group)</code> 或者 <code>df.groupBy(cols_to_group).avg('xx').show()</code> 应用单个函数<br>
<code>df.groupBy(cols_to_group).agg(F.avg('xx'), F.min('xx'), F.max('xx')).show()</code> 应用多个函数</p></li>
<li><p> Pandas<br>
<code>df.groupby(cols_to_group)</code><br>
<code>df.groupby(cols_to_group).avg('xx')</code></p>
<p>group filter by function: <code>df.groupby(cols_to_group).filter(function)</code></p></li>
</ul>
<h1 id="统计">统计</h1>
<ul>
<li><p>PySpark<br>
<code>df.count()</code> 输出总行数<br>
<code>df.describe()</code> 描述某些列的 count, mean, stddev, min, max</p></li>
<li><p>Pandas<br>
<code>df.count()</code> 输出每一列的非空行数<br>
<code>df.shape</code> 输出行数 x 列数<br>
<code>df.describe()</code> 描述某些列的 count, mean, std, min, 25%, 50%, 75%, max</p></li>
</ul>
<h1 id="合并">合并</h1>
<ul>
<li><p>PySpark<br>
扩充列<br>
<code>df.join()</code> 同名列不自动添加后缀，只有键值完全匹配才保留一份副本<br>
'inner', 'outer', 'full', 'fullouter', 'full_outer', 'leftouter', 'left', 'left_outer', 'rightouter', 'right', 'right_outer', 'leftsemi', 'left_semi', 'leftanti', 'left_anti', 'cross'.<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt; df_left = spark.createDataFrame(pd.DataFrame({<span class="string">'Keys'</span>: [<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'key3'</span>, <span class="string">'key4'</span>, <span class="string">'key5'</span>], <span class="string">'Values_Left'</span>: [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>, <span class="string">'value4'</span>, <span class="string">'value5'</span>]}, index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line">&gt;&gt; df_left.show()</span><br><span class="line">+----+-----------+</span><br><span class="line">|Keys|Values_Left|</span><br><span class="line">+----+-----------+</span><br><span class="line">|key1|     value1|</span><br><span class="line">|key2|     value2|</span><br><span class="line">|key3|     value3|</span><br><span class="line">|key4|     value4|</span><br><span class="line">|key5|     value5|</span><br><span class="line">+----+-----------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_right = spark.createDataFrame(pd.DataFrame({<span class="string">'Keys'</span>: [<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'key2'</span>, <span class="string">'key3'</span>, <span class="string">'key6'</span>], <span class="string">'Values_Right'</span>: [<span class="string">'value6'</span>, <span class="string">'value7'</span>, <span class="string">'value8'</span>, <span class="string">'value9'</span>, <span class="string">'value10'</span>]}, index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line">&gt;&gt; df_right.show()</span><br><span class="line">+----+------------+</span><br><span class="line">|Keys|Values_Right|</span><br><span class="line">+----+------------+</span><br><span class="line">|key1|      value6|</span><br><span class="line">|key2|      value7|</span><br><span class="line">|key2|      value8|</span><br><span class="line">|key3|      value9|</span><br><span class="line">|key6|     value10|</span><br><span class="line">+----+------------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_left.join(df_right, [<span class="string">'Keys'</span>], <span class="string">'left'</span>).sort(<span class="string">'Keys'</span>).show() <span class="comment"># left=leftouter=left_outer</span></span><br><span class="line">+----+-----------+------------+</span><br><span class="line">|Keys|Values_Left|Values_Right|</span><br><span class="line">+----+-----------+------------+</span><br><span class="line">|key1|     value1|      value6|</span><br><span class="line">|key2|     value2|      value7|</span><br><span class="line">|key2|     value2|      value8|</span><br><span class="line">|key3|     value3|      value9|</span><br><span class="line">|key4|     value4|        null|</span><br><span class="line">|key5|     value5|        null|</span><br><span class="line">+----+-----------+------------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_right.join(df_left, [<span class="string">'Keys'</span>], <span class="string">'right'</span>).sort(<span class="string">'Keys'</span>).show() <span class="comment"># right=rightouter=right_outer</span></span><br><span class="line">+----+------------+-----------+</span><br><span class="line">|Keys|Values_Right|Values_Left|</span><br><span class="line">+----+------------+-----------+</span><br><span class="line">|key1|      value6|     value1|</span><br><span class="line">|key2|      value7|     value2|</span><br><span class="line">|key2|      value8|     value2|</span><br><span class="line">|key3|      value9|     value3|</span><br><span class="line">|key4|        null|     value4|</span><br><span class="line">|key5|        null|     value5|</span><br><span class="line">+----+------------+-----------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_left.join(df_right, [<span class="string">'Keys'</span>], <span class="string">'left_semi'</span>).sort(<span class="string">'Keys'</span>).show() <span class="comment"># left_semi=leftsemi</span></span><br><span class="line">+----+-----------+</span><br><span class="line">|Keys|Values_Left|</span><br><span class="line">+----+-----------+</span><br><span class="line">|key1|     value1|</span><br><span class="line">|key2|     value2|</span><br><span class="line">|key3|     value3|</span><br><span class="line">+----+-----------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_left.join(df_right, [<span class="string">'Keys'</span>], <span class="string">'left_anti'</span>).sort(<span class="string">'Keys'</span>).show() <span class="comment"># leftanti=left_anti</span></span><br><span class="line">+----+-----------+</span><br><span class="line">|Keys|Values_Left|</span><br><span class="line">+----+-----------+</span><br><span class="line">|key4|     value4|</span><br><span class="line">|key5|     value5|</span><br><span class="line">+----+-----------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_left.join(df_right, [<span class="string">'Keys'</span>], <span class="string">'inner'</span>).sort(<span class="string">'Keys'</span>).show()</span><br><span class="line">+----+-----------+------------+</span><br><span class="line">|Keys|Values_Left|Values_Right|</span><br><span class="line">+----+-----------+------------+</span><br><span class="line">|key1|     value1|      value6|</span><br><span class="line">|key2|     value2|      value8|</span><br><span class="line">|key2|     value2|      value7|</span><br><span class="line">|key3|     value3|      value9|</span><br><span class="line">+----+-----------+------------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_left.join(df_right, [<span class="string">'Keys'</span>], <span class="string">'outer'</span>).sort(<span class="string">'Keys'</span>).show() <span class="comment"># outer=full=fullouter=full_outer</span></span><br><span class="line">+----+-----------+------------+</span><br><span class="line">|Keys|Values_Left|Values_Right|</span><br><span class="line">+----+-----------+------------+</span><br><span class="line">|key1|     value1|      value6|</span><br><span class="line">|key2|     value2|      value8|</span><br><span class="line">|key2|     value2|      value7|</span><br><span class="line">|key3|     value3|      value9|</span><br><span class="line">|key4|     value4|        null|</span><br><span class="line">|key5|     value5|        null|</span><br><span class="line">|key6|       null|     value10|</span><br><span class="line">+----+-----------+------------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_left = df_left.withColumnRenamed(<span class="string">'Keys'</span>, <span class="string">'Keys_Left'</span>)</span><br><span class="line">&gt;&gt; df_right = df_right.withColumnRenamed(<span class="string">'Keys'</span>, <span class="string">'Keys_Right'</span>)</span><br><span class="line">&gt;&gt; df_left.join(df_right, df_left.Keys_Left==df_right.Keys_Right, <span class="string">'cross'</span>).show()</span><br><span class="line">+---------+-----------+----------+------------+</span><br><span class="line">|Keys_Left|Values_Left|Keys_Right|Values_Right|</span><br><span class="line">+---------+-----------+----------+------------+</span><br><span class="line">|     key1|     value1|      key1|      value6|</span><br><span class="line">|     key2|     value2|      key2|      value8|</span><br><span class="line">|     key2|     value2|      key2|      value7|</span><br><span class="line">|     key3|     value3|      key3|      value9|</span><br><span class="line">+---------+-----------+----------+------------+</span><br><span class="line"></span><br><span class="line">&gt;&gt; df_left.crossJoin(df_right).show(<span class="number">25</span>)</span><br><span class="line">+---------+-----------+----------+------------+</span><br><span class="line">|Keys_Left|Values_Left|Keys_Right|Values_Right|</span><br><span class="line">+---------+-----------+----------+------------+</span><br><span class="line">|     key1|     value1|      key1|      value6|</span><br><span class="line">|     key1|     value1|      key2|      value7|</span><br><span class="line">|     key1|     value1|      key2|      value8|</span><br><span class="line">|     key1|     value1|      key3|      value9|</span><br><span class="line">|     key1|     value1|      key6|     value10|</span><br><span class="line">|     key2|     value2|      key1|      value6|</span><br><span class="line">|     key2|     value2|      key2|      value7|</span><br><span class="line">|     key2|     value2|      key2|      value8|</span><br><span class="line">|     key2|     value2|      key3|      value9|</span><br><span class="line">|     key2|     value2|      key6|     value10|</span><br><span class="line">|     key3|     value3|      key1|      value6|</span><br><span class="line">|     key3|     value3|      key2|      value7|</span><br><span class="line">|     key3|     value3|      key2|      value8|</span><br><span class="line">|     key3|     value3|      key3|      value9|</span><br><span class="line">|     key3|     value3|      key6|     value10|</span><br><span class="line">|     key4|     value4|      key1|      value6|</span><br><span class="line">|     key4|     value4|      key2|      value7|</span><br><span class="line">|     key4|     value4|      key2|      value8|</span><br><span class="line">|     key4|     value4|      key3|      value9|</span><br><span class="line">|     key4|     value4|      key6|     value10|</span><br><span class="line">|     key5|     value5|      key1|      value6|</span><br><span class="line">|     key5|     value5|      key2|      value7|</span><br><span class="line">|     key5|     value5|      key2|      value8|</span><br><span class="line">|     key5|     value5|      key3|      value9|</span><br><span class="line">|     key5|     value5|      key6|     value10|</span><br><span class="line">+---------+-----------+----------+------------+</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>扩充行<br>
<code>df.union()</code>：两个 df 合并，按位置进行合并，列名以前表为准（a.union (b) 列名顺序以 a 为准）<br>
<code>df.unoinAll()</code>：同 union 方法<br>
<code>df.unionByName()</code>：两个 df 合并，按列名进行合并<br>
<code>df1.unionByName(df2).unionByName(df3)</code></p></li>
<li><p>Pandas<br>
Pandas 下有 <code>concat</code> 方法，支持轴向合并<br>
<code>pd.concat([df1, df2, df3], ignore_index=True, sort=False)</code><br>
<code>df1.append([df2, df3], ignore_index=True, sort=False)</code><br>
<code>df1.join([df2, df3])</code><br>
Pandas 下有 <code>merge</code> 方法，支持多列合并<br>
同名列自动添加后缀，对应键仅保留一份副本<br>
<code>df.join()</code> 支持多列合并<br>
<code>df.append()</code> 支持多行合并</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt; df_left = pd.DataFrame({<span class="string">'Keys'</span>: [<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'key3'</span>, <span class="string">'key4'</span>, <span class="string">'key5'</span>], <span class="string">'Values_Left'</span>: [<span class="string">'value1'</span>, <span class="string">'value2'</span>, <span class="string">'value3'</span>, <span class="string">'value4'</span>, <span class="string">'value5'</span>]}, index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">&gt;&gt; df_right = pd.DataFrame({<span class="string">'Keys'</span>: [<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'key2'</span>, <span class="string">'key3'</span>, <span class="string">'key6'</span>], <span class="string">'Values_Right'</span>: [<span class="string">'value6'</span>, <span class="string">'value7'</span>, <span class="string">'value8'</span>, <span class="string">'value9'</span>, <span class="string">'value10'</span>]}, index=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">&gt;&gt; df_left, df_right</span><br><span class="line">    Keys    Values_Left</span><br><span class="line"> <span class="number">0</span>  key1      value1</span><br><span class="line"> <span class="number">1</span>  key2      value2</span><br><span class="line"> <span class="number">2</span>  key3      value3</span><br><span class="line"> <span class="number">3</span>  key4      value4</span><br><span class="line"> <span class="number">4</span>  key5      value5,</span><br><span class="line">    Keys    Values_Right</span><br><span class="line"> <span class="number">0</span>  key1       value6</span><br><span class="line"> <span class="number">1</span>  key2       value7</span><br><span class="line"> <span class="number">2</span>  key2       value8</span><br><span class="line"> <span class="number">4</span>  key3       value9</span><br><span class="line"> <span class="number">5</span>  key6       value10</span><br><span class="line">&gt;&gt; df_left.append(df_right) &lt;=&gt; pd.concat([df_left, df_right])</span><br><span class="line">Keys	Values_Left	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	value1	    NaN</span><br><span class="line"><span class="number">1</span>	key2	value2	    NaN</span><br><span class="line"><span class="number">2</span>	key3	value3	    NaN</span><br><span class="line"><span class="number">3</span>	key4	value4	    NaN</span><br><span class="line"><span class="number">4</span>	key5	value5	    NaN</span><br><span class="line"><span class="number">0</span>	key1	 NaN	  value6</span><br><span class="line"><span class="number">1</span>	key2	 NaN	  value7</span><br><span class="line"><span class="number">2</span>	key2	 NaN	  value8</span><br><span class="line"><span class="number">4</span>	key3	 NaN	  value9</span><br><span class="line"><span class="number">5</span>	key6	 NaN	  value10</span><br><span class="line">&gt;&gt; pd.concat([df_left, df_right], axis=<span class="number">1</span>) <span class="comment"># 类似join outer，key为index</span></span><br><span class="line">    Keys	Values_Left	  Keys  	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	  key1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	  key2	       value7</span><br><span class="line"><span class="number">2</span>	key3	   value3	  key2	       value8</span><br><span class="line"><span class="number">3</span>	key4	   value4	  NaN	        NaN</span><br><span class="line"><span class="number">4</span>	key5	   value5	  key3	       value9</span><br><span class="line"><span class="number">5</span>	NaN	        NaN	      key6	       value10</span><br><span class="line">&gt;&gt; pd.concat([df_left, df_right], axis=<span class="number">1</span>, join=<span class="string">'inner'</span>)</span><br><span class="line">	Keys	Values_Left	  Keys  	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	  key1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	  key2	       value7</span><br><span class="line"><span class="number">2</span>	key3	   value3	  key2	       value8</span><br><span class="line"><span class="number">4</span>	key5	   value5	  key3	       value9</span><br><span class="line">&gt;&gt; pd.merge(df_left, df_right, on=<span class="string">'Keys'</span>)</span><br><span class="line">    Keys	Values_Left  	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8</span><br><span class="line"><span class="number">3</span>	key3	   value3	       value9</span><br><span class="line">&gt;&gt; pd.merge(df_left, df_right, how=<span class="string">'left'</span>, on=<span class="string">'Keys'</span>)</span><br><span class="line">	Keys	Values_Left 	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8</span><br><span class="line"><span class="number">3</span>	key3	   value3	       value9</span><br><span class="line"><span class="number">4</span>	key4	   value4	        NaN</span><br><span class="line"><span class="number">5</span>	key5	   value5	        NaN</span><br><span class="line">&gt;&gt; pd.merge(df_left, df_right, how=<span class="string">'right'</span>, on=<span class="string">'Keys'</span>)</span><br><span class="line">    Keys	Values_Left 	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8</span><br><span class="line"><span class="number">3</span>	key3	   value3	       value9</span><br><span class="line"><span class="number">4</span>	key6	    NaN	           value10</span><br><span class="line">&gt;&gt; pd.merge(df_left, df_right, how=<span class="string">'outer'</span>, on=<span class="string">'Keys'</span>, validate=<span class="string">'one_to_many'</span>, indicator=<span class="string">'indicator_column'</span>)</span><br><span class="line">	Keys	Values_Left 	Values_Right	indicator_column</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6	          both</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7	          both</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8	          both</span><br><span class="line"><span class="number">3</span>	key3   	   value3	       value9	          both</span><br><span class="line"><span class="number">4</span>	key4	   value4	        NaN	           left_only</span><br><span class="line"><span class="number">5</span>	key5	   value5	        NaN	           left_only</span><br><span class="line"><span class="number">6</span>	key6	    NaN 	       value10	       right_only</span><br><span class="line">&gt;&gt; pd.merge(df_left, df_right, how=<span class="string">'inner'</span>, on=<span class="string">'Keys'</span>)</span><br><span class="line">    Keys	Values_Left 	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8</span><br><span class="line"><span class="number">3</span>	key3	   value3	       value9</span><br><span class="line">&gt;&gt; df_left.join(df_right, how=<span class="string">'left'</span>, lsuffix=<span class="string">'_Left'</span>, rsuffix=<span class="string">'_Right'</span>)</span><br><span class="line">    Keys_Left	Values_Left 	Keys_Right  	Values_Right</span><br><span class="line"><span class="number">0</span>	  key1	       value1	       key1	           value6</span><br><span class="line"><span class="number">1</span>	  key2	       value2	       key2	           value7</span><br><span class="line"><span class="number">2</span>	  key3	       value3	       key2	           value8</span><br><span class="line"><span class="number">3</span>	  key4	       value4	       NaN	            NaN</span><br><span class="line"><span class="number">4</span>	  key5	       value5	       key3	           value9</span><br><span class="line">&gt;&gt; df_left.join(df_right, how=<span class="string">'right'</span>, lsuffix=<span class="string">'_Left'</span>, rsuffix=<span class="string">'_Right'</span>)</span><br><span class="line">	Keys_Left	Values_Left 	Keys_Right  	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	      value1	       key1	           value6</span><br><span class="line"><span class="number">1</span>	key2	      value2	       key2	           value7</span><br><span class="line"><span class="number">2</span>	key3	      value3	       key2	           value8</span><br><span class="line"><span class="number">4</span>	key5	      value5	       key3	           value9</span><br><span class="line"><span class="number">5</span>	NaN	           NaN	           key6	           value10</span><br><span class="line">&gt;&gt; df_left.join(df_right, how=<span class="string">'outer'</span>, lsuffix=<span class="string">'_Left'</span>, rsuffix=<span class="string">'_Right'</span>)</span><br><span class="line">    Keys_Left	Values_Left 	Keys_Right   	Values_Right</span><br><span class="line"><span class="number">0</span>	   key1	       value1	        key1	       value6</span><br><span class="line"><span class="number">1</span>	   key2	       value2	        key2	       value7</span><br><span class="line"><span class="number">2</span>	   key3	       value3	        key2	       value8</span><br><span class="line"><span class="number">3</span>	   key4	       value4	        NaN	            NaN</span><br><span class="line"><span class="number">4</span>	   key5	       value5	        key3	       value9</span><br><span class="line"><span class="number">5</span>	   NaN	        NaN	            key6	       value10</span><br><span class="line">&gt;&gt; df_left.join(df_right, how=<span class="string">'inner'</span>, lsuffix=<span class="string">'_Left'</span>, rsuffix=<span class="string">'_Right'</span>)</span><br><span class="line">	Keys_Left	Values_Left 	Keys_Right  	Values_Right</span><br><span class="line"><span class="number">0</span>	   key1	       value1	        key1	       value6</span><br><span class="line"><span class="number">1</span>	   key2	       value2	        key2	       value7</span><br><span class="line"><span class="number">2</span>	   key3	       value3	        key2	       value8</span><br><span class="line"><span class="number">4</span>	   key5	       value5	        key3	       value9</span><br><span class="line">&gt;&gt; df_left.join(df_right.reindex([<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'key2'</span>, <span class="string">'key3'</span>, <span class="string">'key6'</span>]), on=<span class="string">'Keys'</span>, lsuffix=<span class="string">'_Left'</span>, rsuffix=<span class="string">'_Right'</span>) &lt;=&gt; pd.merge(df_left, df_right.reindex([<span class="string">'key1'</span>, <span class="string">'key2'</span>, <span class="string">'key2'</span>, <span class="string">'key3'</span>, <span class="string">'key6'</span>]), left_on=<span class="string">"Keys"</span>, right_index=<span class="literal">True</span>, how=<span class="string">"left"</span>, sort=<span class="literal">False</span>, suffixes=(<span class="string">'_Left'</span>, <span class="string">'_Right'</span>))</span><br><span class="line">	Keys	Keys_Left	Values_Left 	Keys_Right  	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   key1	       value1	        NaN	            NaN</span><br><span class="line"><span class="number">1</span>	key2	   key2	       value2	        NaN	            NaN</span><br><span class="line"><span class="number">1</span>	key2	   key2	       value2	        NaN	            NaN</span><br><span class="line"><span class="number">2</span>	key3	   key3	       value3	        NaN	            NaN</span><br><span class="line"><span class="number">3</span>	key4	   key4	       value4	        NaN	            NaN</span><br><span class="line"><span class="number">4</span>	key5	   key5	       value5	        NaN	            NaN</span><br><span class="line">&gt;&gt; df_left.combine_first(df_right) <span class="comment"># 相同Keys只保留左边的</span></span><br><span class="line">	Keys	Values_Left 	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key3	   value3	       value8</span><br><span class="line"><span class="number">3</span>	key4	   value4	        NaN</span><br><span class="line"><span class="number">4</span>	key5	   value5	       value9</span><br><span class="line"><span class="number">5</span>	key6	    NaN	           value10</span><br><span class="line">&gt;&gt; df_left.update(df_right)</span><br><span class="line">&gt;&gt; df_left</span><br><span class="line">	Keys	Values_Left</span><br><span class="line"><span class="number">0</span>	key1	   value1</span><br><span class="line"><span class="number">1</span>	key2	   value2</span><br><span class="line"><span class="number">2</span>	key2	   value3</span><br><span class="line"><span class="number">3</span>	key4	   value4</span><br><span class="line"><span class="number">4</span>	key3	   value5</span><br><span class="line">&gt;&gt; pd.merge_ordered(df_left, df_right, on=<span class="string">"Keys"</span>)</span><br><span class="line">	Keys	Values_Left 	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8</span><br><span class="line"><span class="number">3</span>	key2	   value3	       value7</span><br><span class="line"><span class="number">4</span>	key2	   value3	       value8</span><br><span class="line"><span class="number">5</span>	key3	   value5	       value9</span><br><span class="line"><span class="number">6</span>	key4	   value4       	NaN</span><br><span class="line"><span class="number">7</span>	key6	    NaN	           value10</span><br><span class="line">&gt;&gt; pd.merge_ordered(df_left, df_right, left_by=<span class="string">"Keys"</span>)</span><br><span class="line">    Keys	Values_Left 	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8</span><br><span class="line"><span class="number">3</span>	key2	   value3	       value7</span><br><span class="line"><span class="number">4</span>	key2	   value3	       value8</span><br><span class="line"><span class="number">5</span>	key4	   value4	        NaN</span><br><span class="line"><span class="number">6</span>	key3	   value5	       value9</span><br><span class="line">&gt;&gt; pd.merge_ordered(df_left, df_right, right_by=<span class="string">"Keys"</span>)</span><br><span class="line">	Keys	Values_Left 	Values_Right</span><br><span class="line"><span class="number">0</span>	key1	   value1	       value6</span><br><span class="line"><span class="number">1</span>	key2	   value2	       value7</span><br><span class="line"><span class="number">2</span>	key2	   value2	       value8</span><br><span class="line"><span class="number">3</span>	key2	   value3	       value7</span><br><span class="line"><span class="number">4</span>	key2	   value3	       value8</span><br><span class="line"><span class="number">5</span>	key3	   value5	       value9</span><br><span class="line"><span class="number">6</span>	key6	    NaN	           value10</span><br><span class="line">&gt;&gt; df_left = df_left.rename(columns={<span class="string">'Values_Left'</span>: <span class="string">'Values'</span>})</span><br><span class="line">&gt;&gt; df_right = df_right.rename(columns={<span class="string">'Values_Right'</span>: <span class="string">'Values'</span>}).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">&gt;&gt; df_left.compare(df_right, align_axis=<span class="number">0</span>)</span><br><span class="line">		    Keys	Values</span><br><span class="line"><span class="number">0</span>	self	NaN 	value1</span><br><span class="line">   other	NaN 	value6</span><br><span class="line"><span class="number">1</span>	self	NaN 	value2</span><br><span class="line">   other	NaN 	value7</span><br><span class="line"><span class="number">2</span>	self	NaN 	value3</span><br><span class="line">   other	NaN 	value8</span><br><span class="line"><span class="number">3</span>	self	key4	value4</span><br><span class="line">   other	key3	value9</span><br><span class="line"><span class="number">4</span>	self	key3	value5</span><br><span class="line">   other	key6	value10</span><br><span class="line">&gt;&gt; df_left.compare(df_right, keep_shape=<span class="literal">True</span>)</span><br><span class="line">        Keys	        Values</span><br><span class="line">    self	other	 self	other</span><br><span class="line"><span class="number">0</span>	NaN  	 NaN	value1	value6</span><br><span class="line"><span class="number">1</span>	NaN	     NaN	value2	value7</span><br><span class="line"><span class="number">2</span>	NaN   	 NaN	value3	value8</span><br><span class="line"><span class="number">3</span>	key4	 key3	value4	value9</span><br><span class="line"><span class="number">4</span>	key3	 key6	value5	value10</span><br><span class="line">&gt;&gt; df_left.compare(df_right, keep_shape=<span class="literal">True</span>, keep_equal=<span class="literal">True</span>)</span><br><span class="line">        Keys	       Values</span><br><span class="line">    self	other	 self	other</span><br><span class="line"><span class="number">0</span>	key1	key1	value1	value6</span><br><span class="line"><span class="number">1</span>	key2	key2	value2	value7</span><br><span class="line"><span class="number">2</span>	key2	key2	value3	value8</span><br><span class="line"><span class="number">3</span>	key4	key3	value4	value9</span><br><span class="line"><span class="number">4</span>	key3	key6	value5	value10</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="删除">删除</h1>
<ul>
<li><p>PySpark<br>
删除一列：<code>df.drop('xx')</code> 或者 <code>df.drop(F.col('xx'))</code><br>
删除多列：<code>df.drop(*['xx', 'yy', ...])</code><br>
删除某（些）行：使用 filter 方法<br>
去重：<code>df.dropDuplicates()</code> 或 <code>df.drop_duplicates()</code> 其中参数必须为数组，<code>df.distinct()</code> 其中不能传入参数。<br>
在 cols_to_group 相同的情况下保留 xx 列的值最小 / 最大的行：</p>
<p></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.groupBy(cols_to_group).agg(F.<span class="built_in">min</span>/<span class="built_in">max</span>(<span class="string">'xx'</span>).alias(<span class="string">'xx'</span>))</span><br><span class="line">df.withColumn(<span class="string">'min/max'</span>, F.<span class="built_in">min</span>/<span class="built_in">max</span>(<span class="string">'xx'</span>).over(Window.partitionBy(cols_to_group))).where(F.col(<span class="string">'xx'</span>) == F.col(<span class="string">'min/max'</span>))</span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">&gt;&gt; pdf = pd.DataFrame(<span class="built_in">dict</span>(os=[<span class="string">'ANDROID'</span>, <span class="string">'ANDROID'</span>, <span class="string">'IOS'</span>, <span class="string">'IOS'</span>, <span class="string">'IOS'</span>, <span class="string">'IOS'</span>], region=[<span class="string">'SG'</span>, <span class="string">'SG'</span>, <span class="string">'SG'</span>, <span class="string">'SG'</span>, <span class="string">'CN'</span>, <span class="string">'CN'</span>], value=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br><span class="line">&gt;&gt; sdf = spark.createDataFrame(pdf)</span><br><span class="line">&gt;&gt; sdf.show()</span><br><span class="line">+-------+------+-----+</span><br><span class="line">|     os|region|value|</span><br><span class="line">+-------+------+-----+</span><br><span class="line">|ANDROID|    SG|    <span class="number">1</span>|</span><br><span class="line">|ANDROID|    SG|    <span class="number">2</span>|</span><br><span class="line">|    IOS|    SG|    <span class="number">3</span>|</span><br><span class="line">|    IOS|    SG|    <span class="number">4</span>|</span><br><span class="line">|    IOS|    CN|    <span class="number">5</span>|</span><br><span class="line">|    IOS|    CN|    <span class="number">6</span>|</span><br><span class="line">+-------+------+-----+</span><br><span class="line">&gt;&gt; sdf.groupBy([<span class="string">'os'</span>, <span class="string">'region'</span>]).agg(F.<span class="built_in">min</span>(<span class="string">'value'</span>)).show()</span><br><span class="line">+-------+------+----------+</span><br><span class="line">|     os|region|<span class="built_in">min</span>(value)|</span><br><span class="line">+-------+------+----------+</span><br><span class="line">|    IOS|    CN|         <span class="number">5</span>|</span><br><span class="line">|    IOS|    SG|         <span class="number">3</span>|</span><br><span class="line">|ANDROID|    SG|         <span class="number">1</span>|</span><br><span class="line">+-------+------+----------+</span><br><span class="line">&gt;&gt; <span class="keyword">from</span> pyspark.sql.window <span class="keyword">import</span> Window</span><br><span class="line">&gt;&gt; sdf.withColumn(<span class="string">'min'</span>, F.<span class="built_in">min</span>(<span class="string">'value'</span>).over(Window.partitionBy([<span class="string">'os'</span>, <span class="string">'region'</span>]))).where(F.col(<span class="string">'value'</span>) == F.col(<span class="string">'min'</span>)).show()</span><br><span class="line">+-------+------+-----+---+</span><br><span class="line">|     os|region|value|<span class="built_in">min</span>|</span><br><span class="line">+-------+------+-----+---+</span><br><span class="line">|    IOS|    CN|    <span class="number">5</span>|  <span class="number">5</span>|</span><br><span class="line">|    IOS|    SG|    <span class="number">3</span>|  <span class="number">3</span>|</span><br><span class="line">|ANDROID|    SG|    <span class="number">1</span>|  <span class="number">1</span>|</span><br><span class="line">+-------+------+-----+---+</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Pandas<br>
删除某（些）列：<code>df.drop(['xx', 'xx'], axis=1)</code> 或者 <code>df.drop(columns=['xx', 'yy'])</code><br>
删除某（些）行：<code>df.drop([0, 1])</code> 其中 0，1 为 index 名字<br>
去重：<code>drop_duplicates(subset=None, keep='first', inplace=False, ignore_index=False)</code> 其中 keep 取值 {‘first’, ‘last’, False}；keep 第一次或者最后一次出现。如果需要根据某列最大最小值保留的话，则需提前排序</p></li>
</ul>
<h1 id="更改数据类型">更改数据类型</h1>
<ul>
<li><p>PySpark<br>
更改指定列的数据类型：<code>df = df.withColumn('xx', F.col('xx').cast(Type()))</code></p></li>
<li><p>Pandas<br>
更改所有列的数据类型：<code>df.astype('type')</code><br>
更改指定列的数据类型：<code>df.astype({'xx': 'int32'})</code></p></li>
</ul>
<h1 id="失数据处理">失数据处理</h1>
<ul>
<li><p>PySpark<br>
不自动添加 NaNs，且不抛出错误<br>
fillna 函数：<code>df.na.fill()</code><br>
dropna 函数：<code>df.na.drop()</code></p></li>
<li><p>Pandas<br>
对缺失数据自动添加 NaNs<br>
fillna 函数：<code>df.fillna()</code><br>
dropna 函数：<code>df.dropna()</code></p></li>
</ul>
<h1 id="sql语句">SQL 语句</h1>
<ul>
<li><p>PySpark<br>
表格注册：把 DataFrame 结构注册成 SQL 语句使用类型<br>
<code>df.registerTempTable('tt')</code> 或者 <code>sqlContext.registerDataFrameAsTable(df, 'tt')</code><br>
<code>spark.sql('SELECT xx, yy FROM tt WHERE xx &gt;= m AND yy &lt;= n')</code><br>
功能注册：把函数注册成 SQL 语句使用类型<br>
<code>spark.registerFunction('stringLengthString', lambda x: len(x))</code><br>
<code>spark.sql("SELECT stringLengthString('test')")</code></p></li>
<li><p>Pandas<br>
<code>import sqlite3</code><br>
<code>pd.read_sql('SELECT xx, yy FROM tt WHERE xx &gt;= m AND yy &lt;= n')</code></p></li>
</ul>
<h1 id="两者互相转换">两者互相转换</h1>
<ul>
<li><p>PySpark<br>
<code>pandas_df = spark_df.toPandas()</code><br>
<code>ArrayType()</code>, <code>StructType()</code>, <code>MapType()</code> 类型需要提前转换成 string，pandas 不支持</p></li>
<li><p> Pandas<br>
<code>spark_df = spark.createDataFrame(pandas_df)</code><br>
转换过程中可能会遇到报错： TypeError: field xx: Can not merge type A and B<br>
原因是该列存在空值。解决方法是转换成 String<br>
<code>pandas_df.xx = pandas_df.xx.astype(str)</code></p></li>
</ul>
<h1 id="函数应用">函数应用</h1>
<ul>
<li><p>PySpark<br>
<code>df.foreach(f)</code> 或者 <code>df.rdd.foreach(f)</code> 将 df 的每一列应用函数 f<br>
<code>df.foreachPartition(f)</code> 或者 <code>df.rdd.foreachPartition(f)</code> 将 df 的每一块应用函数 f<br>
UDF (User-defined Function):</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># one-line way:</span></span><br><span class="line">udf_name = F.udf(<span class="keyword">lambda</span> x, y: expression, ReturnType())</span><br><span class="line"></span><br><span class="line"><span class="comment"># def way:</span></span><br><span class="line"><span class="meta">@F.udf(<span class="params">returnType=ReturnType(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">udf_name</span>(<span class="params">x</span>):</span></span><br><span class="line">   expression</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">df.withColumn(<span class="string">'xx'</span>, udf_name(F.col(<span class="string">'xx'</span>), F.col(<span class="string">'yy'</span>)))</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>Pandas<br>
<code>df.apply(f)</code> 将 df 的每一列应用函数 f</p></li>
<li><p>Pandas udf in PySpark<br>
Driver 可能缺少必要的 package:pyarrow 导致报错 ModuleNotFoundError: No module named 'pyarrow'。有多种方案解决：</p>
<ol type="1">
<li><p>参考 <a href="https://spark.apache.org/docs/latest/api/python/user_guide/python_packaging.html">Python Package Management</a><br>
PySpark 允许通过以下方式将 Python 文件 (<code>.py</code>)、压缩的 Python 包 (<code>.zip</code>) 和 Egg 文件 (<code>.egg</code>) 上传到执行程序：<br>
设置配置 <code>spark.submit.pyFiles</code> 或者 <code>--py-files</code>Spark 脚本中的设置选项或者直接调用 <a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.addPyFile.html#pyspark.SparkContext.addPyFile"><code>pyspark.SparkContext.addPyFile()</code></a>应用程序。<br>
这是将额外的自定义 Python 代码发送到集群的直接方法。只添加单个文件或压缩整个包并上传它们。如果使用 <a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.addPyFile.html#pyspark.SparkContext.addPyFile"><code>pyspark.SparkContext.addPyFile()</code></a>，即使 job 开始运行后也允许使用上传的代码。<br>
但是不允许添加构建为 <a href="https://www.python.org/dev/peps/pep-0427/">Wheels</a> 包，因此不允许包含与本机代码的依赖关系。</p></li>
<li><p>使用 Conda 打包<br>
<a href="https://docs.conda.io/en/latest/">Conda</a> 是使用最广泛的 Python 包管理系统之一。PySpark 可以直接使用 Conda 环境通过利用 <a href="https://conda.github.io/conda-pack/spark.html">conda-pack</a> 来传送第三方 Python 包，它是一个命令行工具，可创建可重定位的 Conda 环境。<br>
下面的示例创建了一个 Conda 环境以在驱动程序和执行程序上使用，并将其打包到一个存档文件中。此存档文件捕获 Python 的 Conda 环境并存储 Python 解释器及其所有相关依赖项。<br>
</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">conda create -y -n pyspark_conda_env -c conda-forge pyarrow pandas conda-pack</span><br><span class="line">conda activate pyspark_conda_env</span><br><span class="line">conda pack -f -o pyspark_conda_env.tar.gz</span><br></pre></td></tr></tbody></table></figure><br>
之后可以使用 <code>--archives</code> 选项或 <code>spark.archives</code> 配置（<code>spark.yarn.dist.archives</code> 在 YARN 中）将其与脚本或代码一起发送。它会自动解压缩执行程序上的存档。<br>
在 <code>spark-submit</code> 脚本的情况下，您可以按如下方式使用它：<p></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">export PYSPARK_DRIVER_PYTHON=python # Do not set in cluster modes.</span><br><span class="line">export PYSPARK_PYTHON=./environment/bin/python</span><br><span class="line">spark-submit --archives pyspark_conda_env.tar.gz#environment app.py</span><br></pre></td></tr></tbody></table></figure>
<p>注意 <code>PYSPARK_DRIVER_PYTHON</code> 不应为 YARN 集群模式设置上述内容。<br>
如果您使用的是常规 Python shell 或 Notebook，您可以尝试如下所示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> main</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'PYSPARK_PYTHON'</span>] = <span class="string">'./environment/bin/python'</span></span><br><span class="line">os.environ[<span class="string">'PYSPARK_DRIVER_PYTHON'</span>] = <span class="string">'./environment/bin/python'</span></span><br><span class="line"></span><br><span class="line">spark = SparkSession.builder.config(</span><br><span class="line">    <span class="string">"spark.archives"</span>,  <span class="comment"># 'spark.yarn.dist.archives' in YARN.</span></span><br><span class="line">    <span class="string">"pyspark_conda_env.tar.gz#environment"</span>).getOrCreate()</span><br><span class="line">main(spark)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">SPARK_CONF = SparkConf() \</span><br><span class="line">    .<span class="built_in">set</span>(<span class="string">'spark.yarn.dist.archives'</span>, <span class="string">'pyspark_conda_env.tar.gz#environment'</span>) \</span><br><span class="line">    .<span class="built_in">set</span>(<span class="string">'spark.yarn.appMasterEnv.ARROW_PRE_0_15_IPC_FORMAT'</span>, <span class="string">'1'</span>) \</span><br><span class="line">    .<span class="built_in">set</span>(<span class="string">'spark.executorEnv.ARROW_PRE_0_15_IPC_FORMAT'</span>, <span class="string">'1'</span>)</span><br><span class="line">sc = SparkContext(appName=appName, conf=SPARK_CONF)</span><br><span class="line">sc.setLogLevel(<span class="string">'ERROR'</span>)</span><br><span class="line">spark = SparkSession.builder.enableHiveSupport().getOrCreate()</span><br></pre></td></tr></tbody></table></figure>
<p>对于 pyspark Shell：<br>
</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">export PYSPARK_DRIVER_PYTHON=python</span><br><span class="line">export PYSPARK_PYTHON=./environment/bin/python</span><br><span class="line">pyspark --archives pyspark_conda_env.tar.gz#environment</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>使用本机，不用集群<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">SPARK_CONF = SparkConf() \</span><br><span class="line">   .setMaster(<span class="string">'local'</span>) \</span><br><span class="line">   .<span class="built_in">set</span>(<span class="string">'spark.submit.deployMode'</span>, <span class="string">'client'</span>)</span><br><span class="line"> sc = SparkContext(appName=appName, conf=SPARK_CONF)</span><br><span class="line"> sc.setLogLevel(<span class="string">'ERROR'</span>)</span><br><span class="line"> spark = SparkSession.builder.enableHiveSupport().getOrCreate()</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol></li>
</ul>
<h1 id="map-reduce操作">Map-Reduce 操作</h1>
<ul>
<li><p>PySpark<br>
<code>df.map(func)</code>，<code>df.reduce(func)</code> 返回类型 seqRDDs</p></li>
<li><p>Pandas<br>
<code>map-reduce操作map(func, list)</code>，<code>reduce(func, list)</code> 返回类型 seq</p></li>
</ul>
<h1 id="diff操作">Diff 操作</h1>
<ul>
<li><p>PySpark<br>
没有 diff 操作（Spark 的上下行是相互独立，分布式存储的）</p></li>
<li><p>Pandas<br>
有 diff 操作，处理时间序列数据（Pandas 会对比当前行与上一行）</p></li>
</ul>
<h1 id="most-common计数">Most Common 计数</h1>
<ul>
<li><p>PySpark<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.cube(column_name/column_list).count().sort(<span class="string">'count'</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">df.groupBy(column_name/column_list).agg({<span class="string">'*'</span>: <span class="string">'count'</span>}).withColumnRenamed(<span class="string">'count(1)'</span>, <span class="string">'new_count'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Pandas<br>
<code>df.value_counts(ascending=False)</code></p></li>
</ul>
<h1 id="json-格式化选择解析">Json 格式化、选择、解析</h1>
<ul>
<li><p>PySpark<br>
格式化：<code>df.withColum('json_string', F.to_json(F.struct('key1', 'key2')))</code><br>
选择：<code>df.select('json_string.key')</code><br>
解析：<code>json_schema = spark.read.json(df.rdd.map(lambda row: row.json_string)).schema</code><br>
<code>F.get_json_object('json_string', '$.key')</code><br>
<code>F.from_json(F.get_json_object('json_string', '$.key'), schema)</code></p></li>
<li><p>Pandas<br>
格式化：<code>df['json_string'] = df[['key1', 'key2']].to_dict(orient='records')</code><br>
选择：<code>df.json_string.apply(pd.Series).key</code><br>
解析：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.join(pd.concat(<span class="built_in">list</span>(df[<span class="string">'json_string'</span>].apply(<span class="keyword">lambda</span> x: pd.json_normalize(json.loads(x)))), ignore_index=<span class="literal">True</span>))</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<h1 id="explode操作pivot操作melt操作">Explode 操作、Pivot 操作、Melt 操作</h1>
<ul>
<li><p>PySpark<br>
Explode &lt;=&gt; Groupby：<br>
将 xx 列中的每行的列表 / 数组值分拆形成单独的行<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df.withColumn(<span class="string">'xx'</span>, explode(F.col(<span class="string">'yy'</span>))) <span class="comment"># 忽略空值或者空列表/数组</span></span><br><span class="line">df.withColumn(<span class="string">'xx'</span>, explode_outer(F.col(<span class="string">'yy'</span>))) <span class="comment"># 不忽略空值或者空列表/数组</span></span><br><span class="line">df.groupBy(cols_to_group).agg(F.collect_list(<span class="string">'xx'</span>).alias(<span class="string">'yy'</span>)) <span class="comment"># 返回list形式，不去重</span></span><br><span class="line">df.groupBy(cols_to_group).agg(F.collect_set(<span class="string">'xx'</span>).alias(<span class="string">'yy'</span>)) <span class="comment"># 返回set形式，去重</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>Pivot &lt;=&gt; Melt</p>
<table>
<thead>
<tr class="header">
<th>Label</th>
<th>Keys</th>
<th style="text-align: left;">Values</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>'key1'</td>
<td style="text-align: left;">'value1'</td>
</tr>
<tr class="even">
<td>0</td>
<td>'key2'</td>
<td style="text-align: left;">'value2'</td>
</tr>
<tr class="odd">
<td>1</td>
<td>'key1'</td>
<td style="text-align: left;">'value3'</td>
</tr>
<tr class="even">
<td>1</td>
<td>'key2'</td>
<td style="text-align: left;">'value4'</td>
</tr>
</tbody>
</table>
<p>&lt;=&gt;</p>
<table>
<thead>
<tr class="header">
<th>Label</th>
<th>key1</th>
<th>key2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>'value1'</td>
<td>'value2'</td>
</tr>
<tr class="even">
<td>1</td>
<td>'value3'</td>
<td>'value4'</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">melt</span>(<span class="params">df, id_vars, value_vars, var_name, value_name</span>):</span></span><br><span class="line">    _vars_and_vals = F.create_map(<span class="built_in">list</span>(chain.from_iterable([[F.lit(c), F.col(c)] <span class="keyword">for</span> c <span class="keyword">in</span> value_vars])))</span><br><span class="line">    _tmp = df.select(*id_vars, explode(_vars_and_vals)).withColumnRenamed(<span class="string">'key'</span>, var_name).withColumnRenamed(<span class="string">'value'</span>, value_name)</span><br><span class="line">    <span class="keyword">return</span> _tmp.select(*cols)</span><br><span class="line"></span><br><span class="line">df_melt = df.selectExpr(<span class="string">'Label'</span>, <span class="string">'stack({}, {}) as (Keys, Values)'</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(cols), <span class="string">', '</span>.join((<span class="string">"'{}', {}"</span>.<span class="built_in">format</span>(i, i) <span class="keyword">for</span> i <span class="keyword">in</span> df.columns[<span class="number">1</span>:])))).where(F.col(<span class="string">'Values'</span>).isNotNull())</span><br><span class="line">df_melt = melt(df, id_vars=<span class="string">'Label'</span>, value_vars=df.columns[<span class="number">1</span>:], var_name=<span class="string">'Keys'</span>, value_name=<span class="string">'Values'</span>)</span><br><span class="line">df_pivot = df_melt.groupBy(<span class="string">'Label'</span>).pivot(<span class="string">'Keys'</span>).agg(F.first(<span class="string">'Values'</span>))</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>Pandas<br>
Explode：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt; df = pd.DataFrame( {<span class="string">'a'</span>:[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>], <span class="string">'b'</span>:[[<span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]]})</span><br><span class="line">&gt;&gt; df.explode(<span class="string">'b'</span>) <span class="comment"># explode的列名还是b</span></span><br><span class="line">   a  b</span><br><span class="line"><span class="number">0</span>  A  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  B  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  B  <span class="number">3</span></span><br><span class="line"><span class="number">2</span>  C  <span class="number">4</span></span><br><span class="line"><span class="number">2</span>  C  <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  C  <span class="number">4</span></span><br><span class="line">&gt;&gt; df = pd.DataFrame( {<span class="string">'a'</span>:[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'C'</span>, <span class="string">'C'</span>], <span class="string">'b'</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]})</span><br><span class="line">&gt;&gt; df</span><br><span class="line">   a  b</span><br><span class="line"><span class="number">0</span>  A  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  B  <span class="number">2</span></span><br><span class="line"><span class="number">2</span>  B  <span class="number">3</span></span><br><span class="line"><span class="number">3</span>  C  <span class="number">4</span></span><br><span class="line"><span class="number">4</span>  C  <span class="number">5</span></span><br><span class="line"><span class="number">5</span>  C  <span class="number">4</span></span><br><span class="line">&gt;&gt; df.groupby(<span class="string">'a'</span>)[<span class="string">'b'</span>].apply(<span class="built_in">list</span>).reset_index()</span><br><span class="line">   a          b</span><br><span class="line"><span class="number">0</span>  A        [<span class="number">1</span>]</span><br><span class="line"><span class="number">1</span>  B     [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">2</span>  C  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line">&gt;&gt; df.groupby(<span class="string">'a'</span>)[<span class="string">'b'</span>].apply(<span class="built_in">set</span>).apply(<span class="built_in">list</span>).reset_index()</span><br><span class="line">   a       b</span><br><span class="line"><span class="number">0</span>  A     [<span class="number">1</span>]</span><br><span class="line"><span class="number">1</span>  B  [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">2</span>  C  [<span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>Pivot &lt;=&gt; Melt：</p>
<table>
<thead>
<tr class="header">
<th>Label</th>
<th>Keys</th>
<th style="text-align: left;">Values</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>'key1'</td>
<td style="text-align: left;">'value1'</td>
</tr>
<tr class="even">
<td>0</td>
<td>'key2'</td>
<td style="text-align: left;">'value2'</td>
</tr>
<tr class="odd">
<td>1</td>
<td>'key1'</td>
<td style="text-align: left;">'value3'</td>
</tr>
<tr class="even">
<td>1</td>
<td>'key2'</td>
<td style="text-align: left;">'value4'</td>
</tr>
</tbody>
</table>
<p>&lt;=&gt;</p>
<table>
<thead>
<tr>
<th>
</th>
<th colspan="2" align="Center">
<p>Values</p>
</th>
</tr>
<tr>
<th>
<p>Keys</p>
</th>
<th>
<p>key1</p>
</th>
<th>
<p>key2</p>
</th>
</tr>
<tr>
<th>
<p>Label</p>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
<p>0</p>
</th>
<td>
<p>value1</p>
</td>
<td>
<p>value2</p>
</td>
</tr>
<tr>
<th>
<p>1</p>
</th>
<td>
<p>value3</p>
</td>
<td>
<p>value4</p>
</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">&gt;&gt; <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">melt</span>(<span class="params">frame</span>):</span></span><br><span class="line">&gt;&gt;     <span class="comment"># identifier is index</span></span><br><span class="line">&gt;&gt;     N, K = frame.shape</span><br><span class="line">&gt;&gt;     data = {</span><br><span class="line">&gt;&gt;         <span class="string">"Values"</span>: frame.to_numpy().ravel(),</span><br><span class="line">&gt;&gt;         <span class="string">"Keys"</span>: np.tile(np.asarray(frame.columns), K),</span><br><span class="line">&gt;&gt;         <span class="string">"Label"</span>: np.asarray(frame.index).repeat(N),</span><br><span class="line">&gt;&gt;     }</span><br><span class="line">&gt;&gt;     <span class="keyword">return</span> pd.DataFrame(data, columns=[<span class="string">"Label"</span>, <span class="string">"Keys"</span>, <span class="string">"Values"</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt; df = pd.DataFrame({<span class="string">'key1'</span>: [<span class="string">'value1'</span>, <span class="string">'value3'</span>], <span class="string">'key2'</span>: [<span class="string">'value2'</span>, <span class="string">'value4'</span>]}, index=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">     key1    key2</span><br><span class="line"><span class="number">0</span>  value1  value2</span><br><span class="line"><span class="number">1</span>  value3  value4</span><br><span class="line">&gt;&gt; df_melt = melt(df)</span><br><span class="line">   Label  Keys  Values</span><br><span class="line"><span class="number">0</span>      <span class="number">0</span>  key1  value1</span><br><span class="line"><span class="number">1</span>      <span class="number">0</span>  key2  value2</span><br><span class="line"><span class="number">2</span>      <span class="number">1</span>  key1  value3</span><br><span class="line"><span class="number">3</span>      <span class="number">1</span>  key2  value4</span><br><span class="line">&gt;&gt; df = df.reset_index().rename(columns={<span class="string">'index'</span>: <span class="string">'Label'</span>})</span><br><span class="line">   Label    key1    key2</span><br><span class="line"><span class="number">0</span>      <span class="number">0</span>  value1  value2</span><br><span class="line"><span class="number">1</span>      <span class="number">1</span>  value3  value4</span><br><span class="line">&gt;&gt; df_melt = df.melt(id_vars=[<span class="string">'Label'</span>], var_name=<span class="string">'Keys'</span>, value_name=<span class="string">'Values'</span>).sort_values(<span class="string">'Label'</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">   Label  Keys  Values</span><br><span class="line"><span class="number">0</span>      <span class="number">0</span>  key1  value1</span><br><span class="line"><span class="number">1</span>      <span class="number">0</span>  key2  value2</span><br><span class="line"><span class="number">2</span>      <span class="number">1</span>  key1  value3</span><br><span class="line"><span class="number">3</span>      <span class="number">1</span>  key2  value4</span><br><span class="line">&gt;&gt; df_pivot = df_melt.pivot(index=<span class="string">"Label"</span>, columns=<span class="string">"Keys"</span>, values=<span class="string">"Values"</span>)</span><br><span class="line">Keys     key1    key2</span><br><span class="line">Label                </span><br><span class="line"><span class="number">0</span>      value1  value2</span><br><span class="line"><span class="number">1</span>      value3  value4</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
        <tag>Data Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Matplotlib 库基础</title>
    <url>/contents/Python-Matplotlib%E5%BA%93%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<p>Matplotlib 是 Python 语言的一个图像绘制库。支持各种可视化类。<br>
Reference：<a href="http://blog.csdn.net/linzch3/article/details/71036772">【MOOC】Python 数据分析与展示 - 北京理工大学 -【第二周】数据分析之展示</a> ; <a href="http://www.icourse163.org/course/BIT-1001870002">公开课</a> ;<a href="https://matplotlib.org/index.html">Document</a>;<a href="https://github.com/matplotlib/matplotlib">GitHub</a><br>
<span id="more"></span></p>
<h1 id="matplotlib库的pyplot子库">Matplotlib 库的 pyplot 子库</h1>
<p>一般通过 <code>import matplotlib.pyplot as plt</code> 来引用 Matplotlib 库的 pyplot 子库。<br>
plt 通常为该模块的别名。</p>
<h1 id="线形图">线形图</h1>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html">matplotlib.pyplot.plot</a><br>
<code>plt.plot()</code> 为常用的画直线、折线或者曲线图像的函数。<br>
最简单的使用 <code>plt.plot(list_x or numpy.array_x)</code>：当 plt.plot 函数只有一个输入列表或者数组时，参数的元素的索引为 X 轴值，参数的元素的值为 Y 轴值。<br>
当有两个输入列表或者数组时 <code>plt.plot(list_x or numpy.array_x, list_y or numpy.array_y)</code>，第一个参数的元素的值为 X 轴值，第二个参数的元素的值为 Y 值。<br>
当绘制多条曲线时，各条图像的 X 轴不能省略。<br>
当有 2n 个输入列表或者数组时（n 为大于 1 的整数），将会绘制 n 条图像，第 i 个参数的元素的值为 X 轴值，第 i+1 个参数的元素的值为 Y 值（i 为 1 到 n 之间的整数）。<br>
一般化的函数格式：<br>
<code>plt.plot(x, y, format_string, **kwargs</code>：x 是 X 轴数据，列表或者数组，可选；y 是 Y 轴数据，列表或者数组；format_string 是控制曲线的格式，可选，**kwargs 是第二组或者更多 (x, y, format_string)。<br>
format_string 是控制曲线的格式，由颜色字符、风格字符、标记字符组成。<br>
- 颜色字符：</p>
<table>
<tbody><tr>
<td style="text-align:center">
蓝色
</td>
<td style="text-align:center">
绿色
</td>
<td style="text-align:center">
红色
</td>
<td style="text-align:center">
青绿色
</td>
<td style="text-align:center">
洋红色
</td>
<td style="text-align:center">
黄色
</td>
<td style="text-align:center">
黑色
</td>
<td style="text-align:center">
白色
</td>
<td style="text-align:center">
RGB 某颜色
</td>
<td style="text-align:center">
灰度值
</td>
</tr>
<tr>
<td style="text-align:center">
'b'
</td>
<td style="text-align:center">
'g'
</td>
<td style="text-align:center">
'r'
</td>
<td style="text-align:center">
'c'
</td>
<td style="text-align:center">
'm'
</td>
<td style="text-align:center">
'y'
</td>
<td style="text-align:center">
'k'
</td>
<td style="text-align:center">
'w'
</td>
<td style="text-align:center">
'#666666'
</td>
<td style="text-align:center">
'0.5'
</td>
</tr>
</tbody></table>
<ul>
<li>风格字符：</li>
</ul>
<table>
<tbody><tr>
<td style="text-align:center">
实线
</td>
<td style="text-align:center">
破折线
</td>
<td style="text-align:center">
点划线
</td>
<td style="text-align:center">
虚线
</td>
<td style="text-align:center">
无线条
</td>
</tr>
<tr>
<td style="text-align:center">
'-'
</td>
<td style="text-align:center">
'--'
</td>
<td style="text-align:center">
'-.'
</td>
<td style="text-align:center">
':'
</td>
<td style="text-align:center">
'' 或者 ' '
</td>
</tr>
</tbody></table>
<ul>
<li>标记字符：</li>
</ul>
<table>
<tbody><tr>
<td style="text-align:center">
点标记
</td>
<td style="text-align:center">
像素标记（极小的点）
</td>
<td style="text-align:center">
实心圆标记
</td>
<td style="text-align:center">
上三角标记
</td>
<td style="text-align:center">
下三角标记
</td>
<td style="text-align:center">
右三角标记
</td>
<td style="text-align:center">
左三角标记
</td>
</tr>
<tr>
<td style="text-align:center">
'.'
</td>
<td style="text-align:center">
','
</td>
<td style="text-align:center">
'o'
</td>
<td style="text-align:center">
'v'
</td>
<td style="text-align:center">
'^'
</td>
<td style="text-align:center">
'&gt;'
</td>
<td style="text-align:center">
'&lt;'
</td>
</tr>
<tr>
<td style="text-align:center">
下花三角标记
</td>
<td style="text-align:center">
上花三角标记
</td>
<td style="text-align:center">
左花三角标记
</td>
<td style="text-align:center">
右花三角标记
</td>
<td style="text-align:center">
实心方形标记
</td>
<td style="text-align:center">
实心五角标记
</td>
<td style="text-align:center">
星形标记
</td>
</tr>
<tr>
<td style="text-align:center">
'1'
</td>
<td style="text-align:center">
'2'
</td>
<td style="text-align:center">
'3'
</td>
<td style="text-align:center">
'4'
</td>
<td style="text-align:center">
's'
</td>
<td style="text-align:center">
'p'
</td>
<td style="text-align:center">
'*'
</td>
</tr>
<tr>
<td style="text-align:center">
竖六边形标记
</td>
<td style="text-align:center">
横六边形标记
</td>
<td style="text-align:center">
十字标记
</td>
<td style="text-align:center">
叉标记
</td>
<td style="text-align:center">
菱形标记
</td>
<td style="text-align:center">
瘦菱形标记
</td>
<td style="text-align:center">
垂直线标记
</td>
</tr>
<tr>
<td style="text-align:center">
'h'
</td>
<td style="text-align:center">
'H'
</td>
<td style="text-align:center">
'+'
</td>
<td style="text-align:center">
'x'
</td>
<td style="text-align:center">
'D'
</td>
<td style="text-align:center">
'd'
</td>
<td style="text-align:center">
|
</td>
</tr>
</tbody></table>
<p>举例：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">5</span>)</span><br><span class="line">plt.plot(a, a, <span class="string">'go-'</span>, a, a*<span class="number">1.5</span>, <span class="string">'r1'</span>, a, a*<span class="number">2</span>, <span class="string">'h'</span>, a, a*<span class="number">2.5</span>, <span class="string">'b:d'</span>)</span><br><span class="line">plt.savefig(<span class="string">'example'</span>, dpi=<span class="number">500</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/basic_plot.png" class="" width="600" height="450"><br>
因为三种格式所用字符均不相同，所以三者可以任意顺序排列，并且可选。<br>
此外也可以通过属性赋值来设定格式：<p></p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> color</td>
<td> 线条颜色</td>
</tr>
<tr class="even">
<td> linestyle</td>
<td> 线条风格</td>
</tr>
<tr class="odd">
<td> marker</td>
<td> 标记风格</td>
</tr>
<tr class="even">
<td> markerfacecolor</td>
<td> 标记颜色</td>
</tr>
<tr class="odd">
<td> markersize</td>
<td> 标记尺寸</td>
</tr>
<tr class="even">
<td> markevery</td>
<td> 标记间隔</td>
</tr>
</tbody>
</table>
<p>markevery 默认为 None, 此时所有点将会被标记。<br>
<code>markevery=N</code>, N 为整数，此时每隔 N-1 个点将会被标记。<br>
<code>markevery=(start, N)</code>，start 和 N 均为整数，此时从第 start 个点开始，每隔 N-1 个点将会被标记。<br>
<code>markevery=slice(start, end, N)</code>，start、end 和 N 均为整数，此时从第 start 个点开始直到第 end-1 个点，每隔 N-1 个点将会被标记。<br>
<code>markevery=[x1, x2, ..., xi]</code>，只有第 x1, x2, ..., xi 个点被标记。这里列表为任意长度（最大长度为数据的总个数）。<br>
<code>markevery=n</code>，n 为浮点数，此时标记的 x 轴坐标将会均匀间隔分布，标记个数为 1/n 取整。<br>
<code>markevery=(start, N)</code>，start 和 N 均为浮点数，此时标记的 x 轴坐标将会均匀间隔分布，标记个数为 (1-start)/n 取整，而且从第 l*start 个点开始，其中 l 为数据总个数。<br>
<code>plt.show()</code> 显示所绘图像；<code>plt.savefig(filename, dpi)</code> 保存所绘图像为文件，默认 PNG 格式，dpi 表示输出质量。<br>
<code>plt.figure(num=None, figsize=None, dpi=None, facecolor=None, clear=False)</code> 定义图像参数，其中 num 表示图像个数；figsize 表示图像尺寸，为一个二维元组；dpi 表示输出质量；facecolor 表示背景颜色；<code>clear=True</code> 表示清空之前的绘制。</p>
<h1 id="pyplot的子绘图区域">pyplot 的子绘图区域</h1>
<h2 id="plt.subplot">plt.subplot</h2>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html">matplotlib.pyplot.subplot</a><br>
<code>plt.subplot(nrows, ncols, plot_number)</code> 在全局绘图区域中创建一个分区体系，并定位到一个子绘图区域。<br>
举例：<br>
<img src="/images/Matplotlib/subplot.png" class="" width="600" height="450"><br>
注：参数之间的逗号可以省略。<br>
调用 plt.subplot 函数后使用 plt.plot 函数绘图至对应区域。</p>
<h2 id="plt.subplot2grid">plt.subplot2grid</h2>
<p><code>plt.subplot2grid(GridSpec, CurSpec, colspan=1, rowspan=1)</code> 设定网络，选中网络起始索引，从编号 0 开始，确定选中的行列区域跨越的数量。<br>
举例：<br>
<img src="/images/Matplotlib/subplot2grid.png" class="" width="600" height="450"><br>
注：为了使上面的 subplot2grid 函数的调用显示更加简洁，可以引入 GridSpec 类来实现该功能<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot(gs[<span class="number">0</span>,:])</span><br><span class="line">ax2 = plt.subplot(gs[<span class="number">1</span>,:-<span class="number">1</span>])</span><br><span class="line">ax3 = plt.subplot(gs[<span class="number">0</span>,-<span class="number">1</span>])</span><br><span class="line">ax4 = plt.subplot(gs[<span class="number">2</span>,<span class="number">0</span>])</span><br><span class="line">ax5 = plt.subplot(gs[<span class="number">2</span>,<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="pyplot的文字显示">pyplot 的文字显示</h1>
<h2 id="字体属性">字体属性</h2>
中文字体分类：<br>

<table>
<tbody><tr>
<td style="text-align:center">
黑体
</td>
<td style="text-align:center">
楷体
</td>
<td style="text-align:center">
隶书
</td>
<td style="text-align:center">
仿宋
</td>
<td style="text-align:center">
幼圆
</td>
<td style="text-align:center">
宋体
</td>
</tr>
<tr>
<td style="text-align:center">
'SimHei'
</td>
<td style="text-align:center">
'Kaiti'
</td>
<td style="text-align:center">
'LiSu'
</td>
<td style="text-align:center">
'FangSong'
</td>
<td style="text-align:center">
'YouYuan'
</td>
<td style="text-align:center">
'STSong'
</td>
</tr>
</tbody></table>
字体风格：<br>

<table>
<tbody><tr>
<td style="text-align:center">
正常
</td>
<td style="text-align:center">
斜体
</td>
</tr>
<tr>
<td style="text-align:center">
'normal' 或者 'roman'
</td>
<td style="text-align:center">
'italic' 或者 'oblique'
</td>
</tr>
</tbody></table>
字体大小：<br>

<table>
<tbody><tr>
<td style="text-align:center">
字号
</td>
<td style="text-align:center">
极小
</td>
<td style="text-align:center">
很小
</td>
<td style="text-align:center">
小
</td>
<td style="text-align:center">
比父元素更小
</td>
<td style="text-align:center">
中
</td>
<td style="text-align:center">
大
</td>
<td style="text-align:center">
很大
</td>
<td style="text-align:center">
极大
</td>
<td style="text-align:center">
比父元素更大
</td>
</tr>
<tr>
<td style="text-align:center">
整数
</td>
<td style="text-align:center">
xx-small
</td>
<td style="text-align:center">
x-small
</td>
<td style="text-align:center">
small
</td>
<td style="text-align:center">
smaller
</td>
<td style="text-align:center">
medium
</td>
<td style="text-align:center">
large
</td>
<td style="text-align:center">
x-large
</td>
<td style="text-align:center">
xx-large
</td>
<td style="text-align:center">
larger
</td>
</tr>
</tbody></table>
<ol type="1">
<li>修改全局的字体属性：<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.rcParams[<span class="string">'font.family'</span>]=<span class="string">''</span> <span class="comment">#字体</span></span><br><span class="line">matplotlib.rcParams[<span class="string">'font.style'</span>]=<span class="string">''</span> <span class="comment">#风格</span></span><br><span class="line">matplotlib.rcParams[<span class="string">'font.size'</span>]=<span class="string">''</span> <span class="comment">#字号</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>修改局部的字体属性：<br>
在有文字显示的函数中增加属性 fontname 改变字体，fontstyle 改变风格，fontsize 改变字号</li>
</ol>
<h2 id="文本显示">文本显示</h2>
<table>
<colgroup>
<col style="width: 73%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>plt.xlabel(string)</code></td>
<td>对 X 轴增加文本标签</td>
</tr>
<tr class="even">
<td><code>plt.ylabel(string)</code></td>
<td>对 Y 轴增加文本标签</td>
</tr>
<tr class="odd">
<td><code>plt.title(string)</code></td>
<td>对图形整体增加文本标签</td>
</tr>
<tr class="even">
<td><code>plt.text(x, y, string)</code></td>
<td>在任意位置增加文本标签</td>
</tr>
<tr class="odd">
<td><code>plt.annotate(s, xy=arrow_crd, xytext=text_crd, arrowprops=dict)</code></td>
<td>在图形中增加带箭头的注解</td>
</tr>
</tbody>
</table>
<p>注：文本字符串中可以用一对 $ 符号来引入 LaTeX 公式。<br>
annotate 函数的参数：<code>plt.annotate(s, xy=arrow_crd, xytext=text_crd, arrowprops=dict)</code><br>
s 为文本字符串；xy 为箭头指向的位置，即要注释的位置；xytext 为箭尾的位置，即文本位置；两个位置属性的值均为二维元组；arrowprops 为箭头的属性，如：facecolor 箭头颜色，shrink 箭头缩放成程度，width 箭头线段宽度，headwidth 箭头宽度，frac 箭头头部所占据的比例等；这些属性以字典形式传入。</p>
<h2 id="坐标轴显示">坐标轴显示</h2>
<table>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>plt.xticks(x, list)</code></td>
<td>对 X 轴增加坐标标记</td>
</tr>
<tr class="even">
<td><code>plt.yticks(y, list)</code></td>
<td>对 Y 轴增加坐标标记</td>
</tr>
<tr class="odd">
<td><code>plt.xlim(min, max)</code></td>
<td>显示 X 轴坐标范围</td>
</tr>
<tr class="even">
<td><code>plt.ylim(min, max)</code></td>
<td>显示 Y 轴坐标范围</td>
</tr>
</tbody>
</table>
<p>其中 ticks 可以设置字体大小（fontsize）、旋转角度（rotation）等属性。</p>
<h2 id="网格显示">网格显示</h2>
<p><code>plt.grid(Ture)</code></p>
<h1 id="matplotlib库的基础绘图函数">matplotlib 库的基础绘图函数</h1>
<h2 id="基础绘图函数">基础绘图函数</h2>
<table>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>plt.plot(x,y,fmt)</code></td>
<td>绘制一个坐标图</td>
</tr>
<tr class="even">
<td><code>plt.vlines(x, ymin, ymax)</code></td>
<td>绘制一个垂直线</td>
</tr>
<tr class="odd">
<td><code>plt.hlines(y, xmin, xmax)</code></td>
<td>绘制一个水平线</td>
</tr>
<tr class="even">
<td><code>plt.axvline(x=0, ymin=0, ymax=1)</code></td>
<td>绘制一个垂直线</td>
</tr>
<tr class="odd">
<td><code>plt.axhline(y=0, xmin=0, xmax=1)</code></td>
<td>绘制一个水平线</td>
</tr>
<tr class="even">
<td><code>plt.axvspan(xmin, xmax, ymin=0, ymax=1)</code></td>
<td>绘制一个垂直矩形</td>
</tr>
<tr class="odd">
<td><code>plt.axhspan(ymin, ymax, xmin=0, xmax=1)</code></td>
<td>绘制一个水平矩形</td>
</tr>
<tr class="even">
<td><code>plt.boxplot(data,notch,position)</code></td>
<td>绘制一个箱形图</td>
</tr>
<tr class="odd">
<td><code>plt.bar(left,height,width,bottom)</code></td>
<td>绘制一个条形图</td>
</tr>
<tr class="even">
<td><code>plt.barh(width,bottom,left,height)</code></td>
<td>绘制一个横向条形图</td>
</tr>
<tr class="odd">
<td><code>plt.hist(x,bins,normed)</code></td>
<td>绘制一个直方图</td>
</tr>
<tr class="even">
<td><code>plt.pie(data, explode)</code></td>
<td>绘制一个饼状图</td>
</tr>
<tr class="odd">
<td><code>plt.scatter(x,y)</code></td>
<td>绘制一个散点图</td>
</tr>
<tr class="even">
<td><code>plt.stem(x,y,linefmt,markerfmt)</code></td>
<td>绘制一个柴火图</td>
</tr>
<tr class="odd">
<td><code>plt.step(x,y,where)</code></td>
<td>绘制一个步阶图</td>
</tr>
<tr class="even">
<td><code>pyplot.psd()</code></td>
<td>绘制一个能量谱密度图</td>
</tr>
<tr class="odd">
<td><code>pyplot.magnitude_spectrum()</code></td>
<td>绘制一个幅度频谱图</td>
</tr>
<tr class="even">
<td><code>pyplot.phase_spectrum()</code></td>
<td>绘制一个相角频谱图</td>
</tr>
<tr class="odd">
<td><code>pyplot.angle_spectrum()</code></td>
<td>绘制一个相位频谱图</td>
</tr>
</tbody>
</table>
<h2 id="绘制垂直水平线矩形">绘制垂直、水平线、矩形</h2>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axhline.html">matplotlib.pyplot.axhline</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axvline.html">matplotlib.pyplot.axvline</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hlines.html">matplotlib.pyplot.hlines</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.vlines.html">matplotlib.pyplot.vlines</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axhspan.html">matplotlib.pyplot.axhspan</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axvspan.html">matplotlib.pyplot.axvspan</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw a default hline at y=1 that spans the xrange</span></span><br><span class="line">plt.axhline(y=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># draw a default vline at x=1 that spans the yrange</span></span><br><span class="line">plt.axvline(x=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw a thick red hline at y=0 that spans the xrange</span></span><br><span class="line">plt.axhline(linewidth=<span class="number">8</span>, color=<span class="string">'#d62728'</span>)</span><br><span class="line"><span class="comment"># draw a thick blue vline at x=0 that spans the yrange from 0.8 to 1.4</span></span><br><span class="line">plt.axvline(x=<span class="number">0.25</span>, ymin=<span class="number">0.6</span>, ymax=<span class="number">0.8</span>, linewidth=<span class="number">8</span>, color=<span class="string">'#1f77b4'</span>)</span><br><span class="line">plt.axvline(x=<span class="number">0.5</span>, ymin=<span class="number">0.8</span>, ymax=<span class="number">0.6</span>, linewidth=<span class="number">8</span>, color=<span class="string">'#1f77b4'</span>)</span><br><span class="line">plt.vlines(x=<span class="number">0.75</span>, ymin=<span class="number">0.8</span>, ymax=<span class="number">1.4</span>, linewidth=<span class="number">8</span>, color=<span class="string">'#1f77b4'</span>)</span><br><span class="line">plt.vlines(x=<span class="number">1</span>, ymin=<span class="number">1.4</span>, ymax=<span class="number">0.8</span>, linewidth=<span class="number">8</span>, color=<span class="string">'#1f77b4'</span>)</span><br><span class="line"><span class="comment"># draw a default hline at y=.5 that spans the middle half of the axes</span></span><br><span class="line">plt.axhline(y=<span class="number">0.5</span>, xmin=<span class="number">0.25</span>, xmax=<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">plt.axhspan(<span class="number">0.25</span>, <span class="number">0.75</span>, xmin=<span class="number">0.2</span>, xmax=<span class="number">0.7</span>, facecolor=<span class="string">'0.5'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.axvspan(<span class="number">1.25</span>, <span class="number">1.55</span>, ymin=<span class="number">0.2</span>, ymax=<span class="number">0.7</span>, facecolor=<span class="string">'#2ca02c'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.axis([-<span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/line_span.png" class="" width="600" height="450"><br>
<code>plt.axvline(x=0, ymin=0, ymax=1)</code>、<code>plt.axhline(y=0, xmin=0, xmax=1)</code> 与 <code>plt.vlines(x, ymin, ymax)</code>、<code>plt.hlines(y, xmin, xmax)</code> 类似，但是前者可以不填任何参数，而后者必须指定三个参数。其中第一个参数为线段的x轴或者y轴位置，第二、第三个参数为线段的起点和终点位置。其中对于前者，起点和终点位置是由距离坐标系两端的距离的比例来决定，对于后者，起点和终点位置是由绝对坐标来决定。<br>
例如 <code>plt.axvline(x=0.25, ymin=0.6, ymax=0.8, linewidth=8, color='#1f77b4')</code> 表示线段从(0.25,0.6*(2-(-1))+(-1))到(0.25,0.8*(2-(-1))+(-1))。其中ymin和ymax的值交换位置不影响结果。而 <code>plt.vlines(x=0.75, ymin=0.8, ymax=1.4, linewidth=8, color='#1f77b4')</code> 表示线段从(0.75,0.8)到(0.75,1.4)。同样的，ymin和ymax的值交换位置不影响结果。从图中还可以观察到，axvline形成的线段上下端也有宽度，而vline形成的线段没有，所以前者形成的线段比后者稍长。<br>
除x,y,xmin,xmax,ymin,ymax之外的参数为通用参数，其中facecolor或者fc表示面积颜色，alpha表示透明度（取值为0到1之间的浮点数）。<p></p>
<h2 id="绘制箱形图条形图直方图">绘制箱形图、条形图、直方图</h2>
<h3 id="箱形图">箱形图</h3>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.boxplot.html">matplotlib.pyplot.boxplot</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">data = np.random.lognormal(size=(<span class="number">25</span>, <span class="number">4</span>), mean=<span class="number">1.5</span>, sigma=<span class="number">1.75</span>)</span><br><span class="line">labels = <span class="built_in">list</span>(<span class="string">'ABCD'</span>)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">6</span>, figsize=(<span class="number">12</span>, <span class="number">6</span>), sharey=<span class="literal">True</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].boxplot(data, labels=labels)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].boxplot(data, labels=labels, showmeans=<span class="literal">True</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">2</span>].boxplot(data, labels=labels, showmeans=<span class="literal">True</span>, meanline=<span class="literal">True</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">3</span>].boxplot(data, labels=labels, showbox=<span class="literal">False</span>, showcaps=<span class="literal">False</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">4</span>].boxplot(data, labels=labels, notch=<span class="literal">True</span>, bootstrap=<span class="number">10000</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">5</span>].boxplot(data, labels=labels, showfliers=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">boxprops = <span class="built_in">dict</span>(linestyle=<span class="string">'--'</span>, linewidth=<span class="number">3</span>, color=<span class="string">'darkgoldenrod'</span>)</span><br><span class="line">flierprops = <span class="built_in">dict</span>(marker=<span class="string">'o'</span>, markerfacecolor=<span class="string">'green'</span>, markersize=<span class="number">12</span>, linestyle=<span class="string">'none'</span>)</span><br><span class="line">medianprops = <span class="built_in">dict</span>(linestyle=<span class="string">'-.'</span>, linewidth=<span class="number">2.5</span>, color=<span class="string">'firebrick'</span>)</span><br><span class="line">meanpointprops = <span class="built_in">dict</span>(marker=<span class="string">'D'</span>, markeredgecolor=<span class="string">'black'</span>, markerfacecolor=<span class="string">'firebrick'</span>)</span><br><span class="line">meanlineprops = <span class="built_in">dict</span>(linestyle=<span class="string">'--'</span>, linewidth=<span class="number">2.5</span>, color=<span class="string">'purple'</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].boxplot(data, boxprops=boxprops)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].boxplot(data, flierprops=flierprops, medianprops=medianprops)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">2</span>].boxplot(data, whis=<span class="string">'range'</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">3</span>].boxplot(data, meanprops=meanpointprops, meanline=<span class="literal">False</span>, showmeans=<span class="literal">True</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">4</span>].boxplot(data, meanprops=meanlineprops, meanline=<span class="literal">True</span>, showmeans=<span class="literal">True</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">5</span>].boxplot(data, whis=[<span class="number">15</span>, <span class="number">85</span>])</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/box.png" class="" width="1200" height="450"><br>
<img src="/images/Matplotlib/box_illustration.png" class="" width="500" height="450"><br>
data为随机生成的4×25数组，图片划分为2栏6列，<code>sharey=Ture</code> 表示共享Y轴坐标。<br>
axes为坐标系对象是一个2×6的数组，每一个元素对应一个坐标系。<br>
<code>plt.boxplot()</code> 第一个参数为所展示的数据，数组形式；label为X轴坐标的标签。<br>
<code>vert=False</code> 表示箱形图案为横向放置，<code>patch_artist=True</code> 表示箱形图框内有填充。<br>
<code>showmeans=Ture</code> 表示显示平均值，<code>meanline=Ture</code> 表示使平均值以虚线形式显示。<br>
<code>showbox=False</code> 表示不显示箱形边框，<code>showcaps=False</code> 表示不显示上下两端的error_bar。<br>
<code>notch=True</code> 表示显示槽口，<code>bootstrap=10000</code> 表示显示中值周围的置信区间。<br>
<code>showfliers=False</code> 表示不显示上下error_bar之外的值。<br>
<code>boxprops</code> 表示箱形图案的属性；<code>flierprops</code> 表示error_bar之外的点的属性；<code>medianprops</code> 表示中值点的属性；<code>meanprops</code> 表示平均值点的属性。<br>
<code>whis</code> 表示数据范围的属性：它的值可以是浮点数、字符串、数组范围。<br>
- 如果 <code>whis='range'</code> 表示error_bar的范围为所有数值的最小值到所有数值的最大值，即没有上下极端值。<br>
- 如果 <code>whis=[a,b]</code>，其中a,b是两个数字（整型或者浮点型均可），则error_bar的范围为所有数值由小到大排列后第a%位的值到所有数值由小到大排列后第b%位的值。<br>
- 如果 <code>whis=c</code>，其中c是一个浮点数，则表示error_bar的范围为(Q1-c*(Q3-Q1))到(Q3+c*(Q3-Q1))，其中Q1所有数值由小到大排列后第25%的值，Q3所有数值由小到大排列后第75%的值。<br>
- 如果不设置whis，则默认值为 <code>whis=1.5</code>。<p></p>
<h3 id="条形图">条形图</h3>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.bar.html">matplotlib.pyplot.bar</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.barh.html">matplotlib.pyplot.barh</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">5</span></span><br><span class="line">menMeans = (<span class="number">20</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">27</span>)</span><br><span class="line">womenMeans = (<span class="number">25</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">20</span>, <span class="number">25</span>)</span><br><span class="line">menStd = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">womenStd = (<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">ind = np.arange(N)    <span class="comment"># the x locations for the groups</span></span><br><span class="line">width = <span class="number">0.5</span>       <span class="comment"># the width of the bars: can also be len(x) sequence</span></span><br><span class="line"></span><br><span class="line">p1 = plt.bar(ind, menMeans, width, color=<span class="string">'r'</span>, hatch=<span class="string">'o'</span>)</span><br><span class="line">plt.errorbar(ind+<span class="number">0.25</span>, menMeans, yerr=menStd, capsize=<span class="number">5</span>, elinewidth=<span class="number">5</span>, capthick=<span class="number">5</span>, ecolor=<span class="string">'g'</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">p2 = plt.bar(ind, womenMeans, width, bottom=menMeans, yerr=womenStd)</span><br><span class="line">plt.errorbar(ind+<span class="number">0.25</span>, np.array(womenMeans)+np.array(menMeans) , yerr=womenStd, capsize=<span class="number">5</span>, elinewidth=<span class="number">5</span>, capthick=<span class="number">5</span>, ecolor=<span class="string">'y'</span>, linewidth=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">'Scores'</span>)</span><br><span class="line">plt.title(<span class="string">'Scores by group and gender'</span>)</span><br><span class="line">plt.xticks(ind+<span class="number">0.25</span>, (<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>))</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">81</span>, <span class="number">10</span>))</span><br><span class="line">plt.legend((p1[<span class="number">0</span>], p2[<span class="number">0</span>]), (<span class="string">'Men'</span>, <span class="string">'Women'</span>))</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/bar.png" class="" width="600" height="450"><br>
<code>plt.bar(x, height, width, bottom, align='center')</code> 表示画一个柱状图案（矩形），其上下左右边界分别为bottom+height、bottom、x-width/2、x+width/2<br>
align表示x表示矩形的中间（align='center'）还是矩形的左边边界（align='edge'）。如果需要让x表示矩形的右边边界，则设置align='edge'且width为一个负数。align的默认值为'center'。<br>
其他常用的属性有：<br>
color : 柱状图案的填充颜色<br>
edgecolor : 柱状图案的边框颜色<br>
linewidth : 柱状图案的边框粗细<br>
xerr : x轴的error bar<br>
yerr : y轴的error bar<br>
elinewidth: error bar的宽度<br>
capsize： error bar的帽子大小<br>
capthick： error bar的帽子宽度<br>
ecolor : error bar的颜色<br>
log : 如果为true，则坐标为对数显示<br>
hatch：图案填充， ['/' | '' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*']<br>
如果绘制横向条形图，则使用 <code>plt.barh(y, height, width, left, align='center')</code>，使用方法同上。<p></p>
<h3 id="直方图">直方图</h3>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist.html">matplotlib.pyplot.hist</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.mlab <span class="keyword">as</span> mlab</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># example data</span></span><br><span class="line">mu = <span class="number">100</span>  <span class="comment"># mean of distribution</span></span><br><span class="line">sigma = <span class="number">25</span>  <span class="comment"># standard deviation of distribution</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">500</span>)</span><br><span class="line">num_bins = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># the histogram of the data</span></span><br><span class="line">n, bins, patches = ax.hist(x, num_bins, normed=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> patches[::<span class="number">2</span>]:</span><br><span class="line">    i.set_color(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a 'best fit' line</span></span><br><span class="line">y = mlab.normpdf(bins, mu, sigma)</span><br><span class="line">ax.plot(bins, y, <span class="string">'--'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Probability density'</span>)</span><br><span class="line">ax.set_title(<span class="string">r'Histogram of IQ: $\mu=100$, $\sigma=25$'</span>)</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/hist.png" class="" width="600" height="450"><br>
data为随机生成的以mu为均值，以sigma为标准差的正态分布数组，数组长度为500。<br>
所绘制的直方图有50个分组。<br>
<code>plt.bar(x, num_bins, normed=True)</code> 中x为data，num_bins为分组个数，normed为是否归一化。<br>
并且返回n, bins, patches三个数组，n和patches的数组维度均为分组个数，而bins的数组维度为分组个数+1；<br>
其中n为数据落在每个分组中的个数或者概率密度，bins为每个分组的两端的x坐标值，patches表示每个分组，可以通过patches对分组属性进行设置。<br>
当normed=False时，n为数据落在每个分组中的个数；当normed=True，n为数据落在每个分组中的概率密度（注意，不是概率分布，sum(n)*(max(num_bins)-min(num_bins))=num_bins）。<br>
<code>i.set_color('y')</code> 设置了每隔一个分组颜色为黄色。<br>
<code>y = mlab.normpdf(bins, mu, sigma)</code> 返回一个数组，数组为以mu为均值，以sigma为标准差的正态分布曲线上bins所对应的y轴值。<br>
<code>ax.plot(bins, y, '--')</code> 则绘制匹配直方图的正态分布图曲线。<p></p>
<h2 id="绘制饼状图">绘制饼状图</h2>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pie.html">matplotlib.pyplot.pie</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pie chart, where the slices will be ordered and plotted counter-clockwise:</span></span><br><span class="line">labels = <span class="string">'Frogs'</span>, <span class="string">'Hogs'</span>, <span class="string">'Dogs'</span>, <span class="string">'Logs'</span></span><br><span class="line">sizes = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">10</span>]</span><br><span class="line">explode = (<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># only "explode" the 2nd slice (i.e. 'Hogs')</span></span><br><span class="line"></span><br><span class="line">fig1, ax1 = plt.subplots()</span><br><span class="line">ax1.pie(sizes, explode=explode, labels=labels, autopct=<span class="string">'%1.1f%%'</span>, pctdistance=<span class="number">0.5</span>, labeldistance=<span class="number">1.2</span>, radius=<span class="number">2</span>, shadow=<span class="literal">True</span>, startangle=<span class="number">90</span>)</span><br><span class="line">ax1.axis(<span class="string">'equal'</span>)  <span class="comment"># Equal aspect ratio ensures that pie is drawn as a circle.</span></span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/pie.png" class="" width="600" height="450"><br>
explode表示每部分饼状图案偏离圆心的距离，为<strong>绝对</strong>距离。<br>
autopct表示显示数字的格式。pctdistance表示显示数字距离圆心的<strong>相对</strong>距离，默认值为0.6，表示数字离圆心0.6个半径距离。<br>
shadow表示是否有阴影，startangle表示绘制饼状图的起始角度。<br>
labels表示标签，labeldistance表示标签离圆心的<strong>相对</strong>距离，默认为1.1，表示数字离圆心1.1个半径距离。<br>
radius表示饼状图的半径，为<strong>绝对</strong>距离。<br>
plt.axis('equal')表示饼状图为正圆形，否则为椭圆形。<p></p>
<h2 id="绘制散点图">绘制散点图</h2>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html">matplotlib.pyplot.scatter</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span></span><br><span class="line">x = np.random.rand(N)</span><br><span class="line">y = np.random.rand(N)</span><br><span class="line">colors = np.random.rand(N)</span><br><span class="line">area = np.pi * (<span class="number">15</span> * np.random.rand(N))**<span class="number">2</span>  <span class="comment"># 0 to 15 point radii</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, s=area, c=colors, alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/scatter.png" class="" width="600" height="450"><br>
data为50个任意点，颜色也为任意的0-1之间的数，半径为0-15π之间任意的数。<br>
x,y是维度一样的列表，其中每个元素表示每个点的横纵坐标。<br>
s表示大小。alpha表示透明度。<p></p>
<h2 id="绘制柴火图步阶图">绘制柴火图、步阶图</h2>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.stem.html">matplotlib.pyplot.stem</a>；<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.step.html">matplotlib.pyplot.step</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> ma</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">4</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">x = np.linspace(<span class="number">0.1</span>, <span class="number">2</span>*np.pi, <span class="number">10</span>)</span><br><span class="line">plt.stem(x, np.cos(x), <span class="string">'-.'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">7</span>, <span class="number">0.4</span>)</span><br><span class="line">y0 = np.sin(x)</span><br><span class="line">y = y0.copy() + <span class="number">2.5</span></span><br><span class="line">plt.step(x, y, label=<span class="string">'pre (default)'</span>)</span><br><span class="line">y -= <span class="number">0.5</span></span><br><span class="line">plt.step(x, y, where=<span class="string">'mid'</span>, label=<span class="string">'mid'</span>)</span><br><span class="line">y -= <span class="number">0.5</span></span><br><span class="line">plt.step(x, y, where=<span class="string">'post'</span>, label=<span class="string">'post'</span>)</span><br><span class="line">y = ma.masked_where((y0 &gt; -<span class="number">0.15</span>) &amp; (y0 &lt; <span class="number">0.15</span>), y - <span class="number">0.5</span>)</span><br><span class="line">plt.step(x, y, label=<span class="string">'masked (pre)'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">plt.ylim(-<span class="number">0.5</span>, <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/stem_step.png" class="" width="1200" height="450"><br>
x, y表示数据的横纵坐标。<br>
在step函数中有一个where属性，where属性有三个取值'pre'或'post'或'mid'。<br>
<code>where='pre'</code> 是默认值，表示每个步阶的坐标是从(x[i],y[i+1])到(x[i+1],y[i+1])。<br>
<code>where='mid'</code> 表示每个步阶的坐标是从(x[i],y[i])到(x[i+1],y[i])。<br>
<code>where='post'</code> 表示每个步阶的跳跃是从步阶的一半开始。<p></p>
<h2 id="绘制频谱图">绘制频谱图</h2>
<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.psd.html">matplotlib.pyplot.psd</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.magnitude_spectrum.html">matplotlib.pyplot.magnitude_spectrum</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.angle_spectrum.html">matplotlib.pyplot.angle_spectrum</a>;<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.phase_spectrum.html">matplotlib.pyplot.phase_spectrum</a><br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">dt = <span class="number">0.01</span></span><br><span class="line">Fs = <span class="number">1</span>/dt</span><br><span class="line">t = np.arange(<span class="number">0</span>, <span class="number">10</span>, dt)</span><br><span class="line">nse = np.random.randn(<span class="built_in">len</span>(t))</span><br><span class="line">r = np.exp(-t/<span class="number">0.05</span>)</span><br><span class="line">cnse = np.convolve(nse, r)*dt</span><br><span class="line">cnse = cnse[:<span class="built_in">len</span>(t)]</span><br><span class="line">s = <span class="number">0.1</span>*np.sin(<span class="number">2</span>*np.pi*t) + cnse</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(t, s)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.psd(s, Fs=Fs)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.magnitude_spectrum(s, Fs=Fs)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.magnitude_spectrum(s, Fs=Fs, scale=<span class="string">'dB'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">plt.angle_spectrum(s, Fs=Fs)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line">plt.phase_spectrum(s, Fs=Fs)</span><br></pre></td></tr></tbody></table></figure><br>
<img src="/images/Matplotlib/spectrum.png" class="" width="1200" height="450"><br>
<code>pyplot.psd()</code> 绘制能量谱密度图；<code>pyplot.magnitude_spectrum()</code> 绘制幅度频谱图；<code>pyplot.phase_spectrum()</code> 绘制相角频谱图；<code>pyplot.angle_spectrum()</code> 绘制相位频谱图。<br>
Fs表示采样频率。<p></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
        <tag>Data Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python NumPy 库基础</title>
    <url>/contents/Python-NumPy%E5%BA%93%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<p>NumPy 是 Python 语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数函数库。<br>
Reference：<a href="http://blog.csdn.net/linzch3/article/details/70992906">【MOOC】Python 数据分析与展示 - 北京理工大学 -【第一周】数据分析之表示</a> ; <a href="http://www.icourse163.org/course/BIT-1001870002">公开课</a> ;<a href="http://www.numpy.org">Document</a>;<a href="https://github.com/numpy/numpy">GitHub</a><br>
<span id="more"></span></p>
<h1 id="数据的维度">数据的维度</h1>
<ol type="1">
<li><p>一维数据<br>
一维数据由对等关系的有序或无序数据构成，采用线性方式组织，对应列表、数组和集合等概念。<br>
列表和数组的区别是：</p>
<ul>
<li>列表中元素的数据类型可以不同。</li>
<li>数组中元素的数据类型相同。<br>
一维数据的 Python 表示：列表（有序）或者集合（无序）。</li>
</ul></li>
<li><p>二维数据<br>
二维数据由多个一维数据构成，是一维数据的组合形式，表格是典型的二维数据，其中，表头是二维数据的一部分。<br>
二维数据的 Python 表示：列表。</p></li>
<li><p>多维数据<br>
多维数据由一维或二维数据在新维度上扩展形成。<br>
多维数据的 Python 表示：列表。</p></li>
<li><p>高维数据<br>
高维数据仅利用最基本的二元关系展示数据间的复杂结构。<br>
高维数据的 Python 表示：字典类型或者 JSON、XML、YAML 格式。</p></li>
</ol>
<h1 id="numpy的数组对象ndarray">NumPy 的数组对象：ndarray</h1>
<p>NumPy 是一个开源的 Python 科学计算基础库，包含：<br>
- 一个强大的 N 维数组对象 ndarray<br>
- 广播功能函数<br>
- 整合 C/C++/Fortran 代码的工具<br>
- 线性代数、傅里叶变换、随机数生成等功能<br>
NumPy 是 SciPy、 Pandas 等数据处理或科学计算库的基础。<br>
一般使用 <code>import numpy as np</code> 来引用 numpy 库。<br>
ndarray 意为：N 维数组对象。</p>
<h2 id="ndarray的好处">ndarray 的好处</h2>
<ul>
<li>数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据。</li>
<li>设置专门的数组对象，经过优化，可以提升这类应用的运算速度。<br>
注：科学计算中，一个维度所有数据的类型往往相同。</li>
<li>数组对象采用相同的数据类型，有助于节省运算和存储空间。</li>
</ul>
<h2 id="ndarray由两部分构成">ndarray 由两部分构成</h2>
<ul>
<li>实际的数据</li>
<li>描述这些数据的元数据（数据维度、数据类型等）</li>
</ul>
<p>ndarray 数组一般要求所有元素类型相同（同质），数组下标从 0 开始。<br>
ndarray 在程序中的别名是 array，所以用 np.array () 生成一个 ndarray 数组。<br>
<code>np.array()</code> 输出成 [] 格式，元素由空格分割。<br>
轴（axis）保存数据的维度；秩（rank）轴的数量。</p>
<h2 id="ndarray对象的属性">ndarray 对象的属性</h2>
<table>
<colgroup>
<col style="width: 8%">
<col style="width: 91%">
</colgroup>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.ndim</td>
<td> 秩，即轴的数量或维度的数量</td>
</tr>
<tr class="even">
<td>.shape</td>
<td>ndarray 对象的尺度，对于矩阵：n 行 m 列</td>
</tr>
<tr class="odd">
<td>.size</td>
<td>ndarray 对象元素的个数，即 n*m 的值</td>
</tr>
<tr class="even">
<td>.dtype</td>
<td>ndarray 对象的元素类型</td>
</tr>
<tr class="odd">
<td>.itemsize</td>
<td>ndarray 对象中每个元素的大小，以字节为单位<br>如果元素均为整数，则缺省为 int32，如果元素中有浮点数，则缺省为 float64。</td>
</tr>
</tbody>
</table>
<h2 id="ndarray数组的元素类型">ndarray 数组的元素类型</h2>
<table>
<thead>
<tr class="header">
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> bool</td>
<td> 布尔类型，True 或者 False。</td>
</tr>
<tr class="even">
<td>intc</td>
<td> 与 C 语言的 int 类型一致，一般是 int32 或者 int64</td>
</tr>
<tr class="odd">
<td>intp</td>
<td> 用于索引的整数，与 C 预言中的 ssize_t 一致，int32 或者 int64</td>
</tr>
<tr class="even">
<td>int8</td>
<td> 字节长度的整数，取值：[-128, 127]</td>
</tr>
<tr class="odd">
<td>int16</td>
<td>16 位长度的整数，取值：[-32768, 32767]</td>
</tr>
<tr class="even">
<td>int32</td>
<td>32 位长度的整数，取值：[-2<sup>31</sup>, 2<sup>31</sup>-1]</td>
</tr>
<tr class="odd">
<td>int64</td>
<td>64 位长度的整数，取值：[-2<sup>63</sup>, 2<sup>63</sup>-1]</td>
</tr>
<tr class="even">
<td>uint8</td>
<td>8 位无符号整数，取值：[0, 255]</td>
</tr>
<tr class="odd">
<td>uint16</td>
<td>16 位无符号整数，取值：[0, 65535]</td>
</tr>
<tr class="even">
<td>uint32</td>
<td>32 位无符号整数，取值：[0, 2<sup>32</sup>-1]</td>
</tr>
<tr class="odd">
<td>uint64</td>
<td>64 位无符号整数，取值：[0, 2<sup>64</sup>-1]</td>
</tr>
<tr class="even">
<td>float16</td>
<td>16 位半精度浮点数：1 位符号位，5 位指数，10 位尾数</td>
</tr>
<tr class="odd">
<td> float32</td>
<td>32 位半精度浮点数：1 位符号位，8 位指数，23 位尾数</td>
</tr>
<tr class="even">
<td> float64</td>
<td>64 位半精度浮点数：1 位符号位，11 位指数，52 位尾数</td>
</tr>
<tr class="odd">
<td> complex64</td>
<td> 复数类型，实部和虚部都是 32 位浮点数</td>
</tr>
<tr class="even">
<td> complex128</td>
<td> 复数类型，实部和虚部都是 64 位浮点数</td>
</tr>
</tbody>
</table>
<p>浮点数：（符号）尾数 * 10<sup> 指数</sup><br>
复数：实部 (.real)+ 虚部 i（.imag）</p>
<h2 id="与python对比">与 Python 对比</h2>
<ul>
<li>Python 语法仅支持整数、浮点数和复数 3 种类型。</li>
<li>科学计算涉及数据较多，对存储和性能都有较高要求。</li>
<li>对元素类型精细定义，有助于 NumPy 合理使用存储空间并优化性能。</li>
<li>对元素类型精细定义，有助于程序员对程序规模有合理评估。</li>
</ul>
<h2 id="非同质的ndarray对象">非同质的 ndarray 对象</h2>
<p>ndarray 数组可以由非同质的对象构成。<br>
非同质的 ndarray 元素类型为 object 类型。</p>
<h2 id="ndarray数组的创建">ndarray 数组的创建</h2>
<p>ndarray 数组的创建方法</p>
<ol type="1">
<li>从 Python 中的列表、元组、列表元祖混合等类型创建 ndarray 数组：<br>
<code>np.array(list,tuple)</code></li>
<li>从字节流（raw bytes）中创建 ndarray 数组。</li>
<li>从文件中读取特定格式中创建 ndarray 数组。</li>
<li>使用 NumPy 中函数创建 ndarray 数组：</li>
</ol>
<table>
<colgroup>
<col style="width: 30%">
<col style="width: 70%">
</colgroup>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>np.arange(n,m,k)</code></td>
<td>类似 <code>range()</code> 函数，返回 ndarray 类型，元素从 n 到 m-k，间隔 k</td>
</tr>
<tr class="even">
<td><code>np.ones(shape)</code></td>
<td>根据 shape 生成一个全 1 数组，shape 是元组类型</td>
</tr>
<tr class="odd">
<td><code>np.zeros(shape)</code></td>
<td>根据 shape 生成一个全 0 数组，shape 是元组类型</td>
</tr>
<tr class="even">
<td><code>np.full(shape,val)</code></td>
<td>根据 shape 生成一个数组，shape 是元组类型，每个元素的值都是 val</td>
</tr>
<tr class="odd">
<td><code>np.eye(n)</code></td>
<td>创建一个正方的 n*n 单位矩阵，对角线为 1，其余为 0</td>
</tr>
<tr class="even">
<td><code>np.ones_like(a)</code></td>
<td>根据数组 a 的形状生成一个全 1 数组</td>
</tr>
<tr class="odd">
<td><code>np.zero_like(a)</code></td>
<td>根据数组 a 的形状生成一个全 0 数组</td>
</tr>
<tr class="even">
<td><code>np.full_like(a,val)</code></td>
<td>根据数组 a 的形状生成一个全 1 数组</td>
</tr>
<tr class="odd">
<td><code>np.linspace(n,m,k)</code></td>
<td>根据起止数据等间距地填充数据，形成数据，元素从 n 到 m，间隔 (m-n)/(k-1)，元素个数为 k</td>
</tr>
<tr class="even">
<td><code>np.linspace(n,m,k,endpoint=False)</code></td>
<td>根据起止数据等间距地填充数据，形成数据，元素从 n 到 m-(m-n)/k，间隔 (m-n)/k，元素个数为 k</td>
</tr>
<tr class="odd">
<td><code>np.linspace(a,b,c,...)</code></td>
<td>将两个或者多个数组合并成一个新的数组，原数组不变</td>
</tr>
</tbody>
</table>
<p>当 <code>np.array()</code> 不指定 dtype 时，NumPy 将根据数据情况关联一个 dtype 类型。</p>
<h2 id="ndarray数组的变换">ndarray 数组的变换</h2>
<p>对于创建后的 ndarray 数组，可以对其进行维度变换和元素类型变换。<br>
维度变换：</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.reshape(shape)</code></td>
<td>不改变数组元素，返回一个 shape 形状的新数组，原数组不变</td>
</tr>
<tr class="even">
<td><code>.resize(shape)</code></td>
<td>与<code>.reshape(shape)</code> 功能一致，但修改原数组</td>
</tr>
<tr class="odd">
<td><code>.swapaxes(ax1,ax2)</code></td>
<td>将数组的其中两个维度进行顺序调换</td>
</tr>
<tr class="even">
<td><code>.flatten()</code></td>
<td>对数组进行降维，返回折叠后的新的一维数组，原数组不变</td>
</tr>
<tr class="odd">
<td><code>.astype(new_type)</code></td>
<td>对数组中的元素进行类型变化，返回一个新数组，原数组不变</td>
</tr>
<tr class="even">
<td><code>.tolist()</code></td>
<td>ndarray 数组向列表转换</td>
</tr>
</tbody>
</table>
<h2 id="ndarray数组的操作">ndarray 数组的操作</h2>
<p>数组的索引和切片：<br>
- 索引：获取数组中特定位置元素的过程。<br>
- 切片：获取数组元素子集的过程。</p>
<ol type="1">
<li>一维数组的索引和切片：与 Python 的列表类似
<ul>
<li><code>a[n]</code>：返回第 n+1 个元素。如果 n 为负数，则返回倒着数第 n 个元素。</li>
<li><code>a[n:m:k]</code>：起始编号 n，终止编号 m，步长 k，用冒号分割。如果 n 为空，即 <code>n = 0</code>；如果 m 为空，即 <code>m = len(a)</code>。</li>
</ul></li>
<li>多维数组的索引和切片：
<ul>
<li><code>a[n,m,k,...]</code>：每个维度一个索引值，最外 list 中第 n 个元素，倒数第二外 list 中第 m 个元素，以此类推。如果 n 为负数，则返回倒着数第 n 个元素。</li>
<li><code>a[n1:m1:k1,n2:m2:k2,n3:m3:k3,...]</code>：每个维度的切片方法与一维数组相同。顺序为从外到内。</li>
</ul></li>
</ol>
<h2 id="ndarray数组的运算">ndarray 数组的运算</h2>
<p>数组与标量之间的运算作用于数组的每一个元素。</p>
<h3 id="numpy一元函数">NumPy 一元函数</h3>
<p>对 ndarray 中的数据执行元素级运算的函数：</p>
<table>
<colgroup>
<col style="width: 62%">
<col style="width: 37%">
</colgroup>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>np.abs(x)</code> or <code>np.fabs(x)</code></td>
<td>计算数组各元素的绝对值</td>
</tr>
<tr class="even">
<td><code>np.sqrt(x)</code></td>
<td>计算数组各元素的平方根</td>
</tr>
<tr class="odd">
<td><code>np.sqare(x)</code></td>
<td>计算数组各元素的平方</td>
</tr>
<tr class="even">
<td><code>np.log(x)</code> or <code>np.log10(x)</code>or<code>np.log2(x)</code></td>
<td>计算数组各元素的自然对数、10 为底的对数、2 为底的对数</td>
</tr>
<tr class="odd">
<td><code>np.ceil(x)</code> or <code>np.floor(x)</code></td>
<td>计算数组各元素的向上取整、向下取整</td>
</tr>
<tr class="even">
<td><code>np.rint(x)</code></td>
<td>计算数组各元素的四舍五入</td>
</tr>
<tr class="odd">
<td><code>np.modf(x)</code></td>
<td>将数组各元素的小数部分和整数部分以两个独立数组形式返回</td>
</tr>
<tr class="even">
<td><code>np.cos(x)</code> or <code>np.cosh(x)</code><br><code>np.cos(x)</code> or <code>np.cosh(x)</code><br><code>np.cos(x)</code> or <code>np.cosh(x)</code></td>
<td>计算数组各元素的普通型和双曲型三角函数</td>
</tr>
<tr class="odd">
<td><code>np.exp(x)</code></td>
<td>计算数组各元素的指数值</td>
</tr>
<tr class="even">
<td><code>np.sign(x)</code></td>
<td>计算数组各元素的符号值：1 (+),0,-1 (-)</td>
</tr>
</tbody>
</table>
<h3 id="numpy二元函数">NumPy 二元函数</h3>
<table>
<colgroup>
<col style="width: 61%">
<col style="width: 38%">
</colgroup>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> + - * / **</td>
<td> 两个数组各元素进行对应运算</td>
</tr>
<tr class="even">
<td><code>np.maximum(x,y)</code> or <code>np.fmax(x,y)</code>or<code>np.minimum(x,y)</code> or <code>np.fmin(x,y)</code></td>
<td>两个数组元素级的最大值、最小值计算</td>
</tr>
<tr class="odd">
<td><code>np.mod(x,y)</code></td>
<td>两个数组元素级的模运算</td>
</tr>
<tr class="even">
<td><code>np.copysign(x,y)</code></td>
<td>将数组 y 中的各元素值的符号赋值给数组 x 的对应元素</td>
</tr>
<tr class="odd">
<td> &gt; &lt; &gt;= &lt;= == !=</td>
<td> 算术比较两个数组各元素，产生布尔型数组</td>
</tr>
</tbody>
</table>
<h2 id="numpy数据的存取">Numpy 数据的存取</h2>
<h3 id="一维二维数据的csv存取">一维、二维数据的 CSV 存取</h3>
<p>CSV (Comma‐Separated Value，逗号分隔值)，CSV 是一种常见的文件格式，用来存储批量数据。<br>
<strong>写入 CSV 文件：</strong><code>np.savetxt(fname, array, fmt, delimiter)</code>，其中 fname 指的是文件、字符串或者产生器，可以是.gz 或.bz2 压缩文件（NumPy 支持直接存入压缩文件以节省空间）；array 指的是需要存入的数组；fmt 指的是写入文件的格式，例如：% d (十进制整数) %.2f (保留 2 位小数的浮点数) %.18e (保留 18 位小数点的科学计数法)；delimiter 指的是分割字符串，默认是空格。<br>
<strong>读取 CSV 文件：</strong><code>np.loadtxt(fname, dtype, fmt, delimiter)</code>，其中 fname 指的是文件、字符串或者产生器，可以是.gz 或.bz2 压缩文件（NumPy 支持直接读取压缩文件）；dtype 指的是读取数据的类型，默认为浮点类型；delimiter 指的是分割字符串，默认是空格；uppack 指的是如果 True，读入属性将写入不同变量。<br>
CSV 文件的局限性：<br>
- CSV 只能有效存储一维和二维数组。<br>
- <code>np.savetxt()</code>；<code>np.loadtxt()</code> 只能有效存取一维和二维数组。</p>
<h3 id="多维数据的dat存取">多维数据的 dat 存取</h3>
<p>使用 tofile 函数保存多维数据：<br>
<strong>写入 dat 文件：</strong><code>a.tofile(fname, sep, format)</code>，其中 a 指的是需要存入的数组；fname 指的是文件、字符串；sep 指的是数据分割字符串，如果是空格，写入文件为二进制。<br>
<strong>读取 dat 文件：</strong><code>np.fromfile(fname, dtype, count, sep)</code>，其中 fname 指的是文件、字符串；dtype 指的是读取数据的类型；count 指的是读取数据的个数，如果 count=-1 则表示读入整个文件；sep 指的是数据分割字符串，如果是空格，以二进制读取文件。<br>
注意：该方法需要读取时知道存入文件时数组的维度和元素类型，a.tofile () 和 np.fromfile () 需要配合使用，可以通过元数据文件来存储额外信息。</p>
<h3 id="numpy便捷文件的存取">NumPy 便捷文件的存取</h3>
<p><strong>写入文件：</strong><code>np.save(fname, array)</code>，其中 fname 指的是文件名，以.npy 或者.npz 为扩展名，后者为压缩文件；array 指的是需要存入的数组。<br>
<strong>读取文件：</strong><code>np.load(fname)</code>，其中 fname 指的是文件名，以.npy 或者.npz 为扩展名，后者为压缩文件。</p>
<h2 id="numpy的随机数函数">NumPy 的随机数函数</h2>
<p>NumPy 的随机函数子库：<code>np.random.*</code> 包含有关随机数的函数。</p>
<h3 id="随机数组生成">随机数组生成</h3>
<table>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>rand(d0, d1, ..., dn)</code></td>
<td>根据 d0-dn 创建随机数数组，浮点数，[0, 1)，均匀分布</td>
</tr>
<tr class="even">
<td><code>randn(d0, d1, ..., dn)</code></td>
<td>根据 d0-dn 创建随机数数组，标准正太分布</td>
</tr>
<tr class="odd">
<td><code>randint(low[,high,shape])</code></td>
<td>根据 shape 创建随机整数数组 范围是 [1ow, high)，均匀分布</td>
</tr>
<tr class="even">
<td><code>seed(s)</code></td>
<td>随机数种子 s 是给定的种子值，相同的种子值产生相同的随机数组</td>
</tr>
<tr class="odd">
<td><code>uniform(low,high,size)</code></td>
<td>产生具有均匀分布的数组，low 为起始值，high 为结束值，size 为形状</td>
</tr>
<tr class="even">
<td><code>normal(loc,scale,size)</code></td>
<td>产生具有正太分布的数组，loc 为均值，scale 为标准差，size 为形状</td>
</tr>
<tr class="odd">
<td><code>poisson(lam,size)</code></td>
<td>产生具有泊松分布的数组，lam 为随机事件发生率，size 为形状</td>
</tr>
</tbody>
</table>
<h3 id="数组的随机变换">数组的随机变换</h3>
<table>
<colgroup>
<col style="width: 26%">
<col style="width: 73%">
</colgroup>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>shuffle(a)</code></td>
<td>根据数组 a 的第 1 轴进行随机排列，改变数组 x</td>
</tr>
<tr class="even">
<td><code>permutation(a)</code></td>
<td>根据数组 a 的第 1 轴产生一个新的乱序数组，不改变数组 x</td>
</tr>
<tr class="odd">
<td><code>choice(a[, size, replace, p])</code></td>
<td>从一维数组 a 中以概率 p 抽取元素，形成 size 形状新数组<br>replace 表示是否可以重用元素，默认为 True</td>
</tr>
</tbody>
</table>
<h2 id="numpy的统计函数">NumPy 的统计函数</h2>
<table>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>sum(a, axis = None)</code></td>
<td>根据给定轴 axis 计算数组 a 相关元素之和</td>
</tr>
<tr class="even">
<td><code>mean(a, axis = None)</code></td>
<td>根据给定轴 axis 计算数组 a 相关元素的期望</td>
</tr>
<tr class="odd">
<td><code>average(a, axis = None, weights = None)</code></td>
<td>根据给定轴 axis 计算数组 a 相关元素的加权平均值</td>
</tr>
<tr class="even">
<td><code>std(a, axis = None)</code></td>
<td>根据给定轴 axis 计算数组 a 相关元素的标准差</td>
</tr>
<tr class="odd">
<td><code>var(a, axis = None)</code></td>
<td>根据给定轴 axis 计算数组 a 相关元素的方差</td>
</tr>
<tr class="even">
<td><code>min(a) max(a)</code></td>
<td>计算数组 a 中元素的最小值、最大值</td>
</tr>
<tr class="odd">
<td><code>argmin(a) argmax(a)</code></td>
<td>计算数组 a 中元素最小值、最大值的降一维后下标</td>
</tr>
<tr class="even">
<td><code>unravel_index(index, shape)</code></td>
<td>根据 shape 将一维下标 index 转换成多维下标</td>
</tr>
<tr class="odd">
<td><code>ptp(a)</code></td>
<td>计算数组 a 中元素最大值与最小值的差</td>
</tr>
<tr class="even">
<td><code>median(a)</code></td>
<td>计算数组 a 中元素的中位数（中值），结果为浮点数</td>
</tr>
</tbody>
</table>
<p>・axis = None 是统计函数的标配参数，axis 为整数或元组。</p>
<h2 id="numpy的梯度函数">NumPy 的梯度函数</h2>
<p><code>np.gradient(f)</code>：计算数组 f 中元素的梯度，当 f 为多维时，返回每个维度的梯度。<br>
梯度：连续值之间的变化率，即斜率。例如：XY 坐标轴连续三个 X 坐标对应的 Y 轴值：a, b, c，其中，b 的梯度是 (c-a)/2。</p>
<h1 id="图像的数据表示">图像的数据表示</h1>
<p>图像一般使用 RGB 色彩模式，即每个像素点的颜色由红 (R)、绿 (G)、蓝 (B) 组成。<br>
RGB 三个颜色通道的变化和叠加得到各种颜色，其中<br>
・R 红色，取值范围：0‐255<br>
・G 绿色，取值范围：0‐255<br>
・B 蓝色，取值范围：0‐255<br>
RGB 形成的颜色包括了人类视力所能感知的所有颜色。</p>
<h2 id="pil库">PIL 库</h2>
<p>Python Image Library：<br>
安装：<code>pip install pillow</code><br>
调用：<code>from PIL import Image</code><br>
Image 是 PIL 库中代表一个图像的类（对象）。<br>
图像是一个三维数组，维度分别是高度、宽度和像素 RGB 值。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
        <tag>Data Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Pandas 库基础</title>
    <url>/contents/Python-Pandas%E5%BA%93%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<p>Pandas 是 Python 第三方库，提供高性能易用数据类型和分析工具，Pandas 基于 NumPy 实现，常与 NumPy 和 Matplotlib 一同使用。<br>
Reference：<a href="http://blog.csdn.net/linzch3/article/details/71046340">【MOOC】Python 数据分析与展示 - 北京理工大学 -【第三周】数据分析之概要</a> ; <a href="http://www.icourse163.org/course/BIT-1001870002">公开课</a> ;<a href="http://pandas.pydata.org/#">Document</a>;<a href="https://github.com/pandas-dev/pandas">GitHub</a><br>
<span id="more"></span></p>
<h1 id="pandas库">Pandas 库</h1>
<p>一般通过 <code>import pandas as pd</code> 来引用 Pandas 库。<br>
pd 通常为该模块的别名。<br>
与 numpy 的区别：</p>
<table>
<thead>
<tr class="header">
<th>NumPy</th>
<th>Pandas</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> 基础数据类型</td>
<td>扩展数据类型</td>
</tr>
<tr class="even">
<td>关注数据的结构表达</td>
<td>关注数据的应用表达</td>
</tr>
<tr class="odd">
<td>维度：数据间关系</td>
<td>数据与索引的关系</td>
</tr>
</tbody>
</table>
<p>该库基于 numpy 提供了两个新的数据类型：Series, DataFrame。<br>
基于上述数据类型有各类操作：基本操作、运算操作、特征类操作、关联类操作。</p>
<h1 id="series类型一维">Series 类型（一维）</h1>
<p>Series 类型由一组数据及与之相关的数据索引组成：<br>
index_0 ------&gt; data_a<br>
index_1 ------&gt; data_b<br>
index_2 ------&gt; data_c<br>
index_3 ------&gt; data_d<br>
index_4 ------&gt; data_e<br>
　索引　　　 数据</p>
<p>Series 是一维带 “标签” 数组 (Series 类型包括 index 和 values 两部分，index 和 values 一一对应)</p>
<h2 id="series类型的创建">Series 类型的创建</h2>
<p>Series 类型可以由如下类型创建：<br>
- Python 列表，index 与列表元素个数一致<br>
- 标量值，index 表达 Series 类型的尺寸<br>
- Python 字典，键值对中的 “键” 是索引，index 从字典中进行选择操作<br>
- ndarray，索引和数据都可以通过 ndarray 类型创建<br>
- 其他函数，range () 函数等</p>
<h3 id="列表">列表</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"><span class="comment"># 第一列为自动索引，dtype后为数据类型。</span></span><br></pre></td></tr></tbody></table></figure>
<p>Pandas 也可以自定义索引。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"><span class="comment"># 第一列为给定索引，dtype后为数据类型。</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="标量">标量</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series(<span class="number">5</span>, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"><span class="comment"># 第一列为给定索引，dtype后为数据类型。</span></span><br></pre></td></tr></tbody></table></figure>
<p>注意：此时不能省略 index。</p>
<h3 id="字典">字典</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series({<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>, <span class="string">'d'</span>:<span class="number">4</span>, <span class="string">'e'</span>:<span class="number">5</span>}, index=[<span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>])</span><br><span class="line">&gt;&gt;&gt;e    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"><span class="comment"># 第一列为给定索引，dtype后为数据类型。</span></span><br></pre></td></tr></tbody></table></figure>
<p>注意，index 里面的值的个数可以少于给定字典的键的个数，但是 index 里面每个值必须都是给定字典的键。输出顺序为 index 的顺序。</p>
<h3 id="ndarray">ndarray</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = pd.Series(np.arange(<span class="number">5</span>), index=np.arange(<span class="number">9</span>,<span class="number">4</span>,-<span class="number">1</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="number">9</span>    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">8</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">7</span>    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">5</span>    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"><span class="comment"># 第一列为给定索引，dtype后为数据类型。</span></span><br></pre></td></tr></tbody></table></figure>
<p>注意：这里数据类型为 int64。</p>
<h3 id="range">range()</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series(<span class="built_in">range</span>(<span class="number">5</span>), index=<span class="built_in">range</span>(<span class="number">9</span>,<span class="number">4</span>,-<span class="number">1</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="number">9</span>    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">8</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">7</span>    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">5</span>    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"><span class="comment"># 第一列为给定索引，dtype后为数据类型。</span></span><br></pre></td></tr></tbody></table></figure>
<p>注意：这里数据类型为 int64。</p>
<h2 id="series类型的基本操作">Series 类型的基本操作</h2>
<h3 id="获取所有索引所有数据">获取所有索引、所有数据</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">s.index</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">u'a'</span>, <span class="string">u'b'</span>, <span class="string">u'c'</span>, <span class="string">u'd'</span>, <span class="string">u'e'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">s.values</span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>(s.values)</span><br><span class="line">&gt;&gt;&gt;&lt;<span class="built_in">type</span> <span class="string">'numpy.ndarray'</span>&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>注意 a.values 返回的是 ndarray 类型。</p>
<h3 id="索引">索引</h3>
<p>自动索引和自定义索引并存（但不能混合使用）<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">s[<span class="number">0</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">s[<span class="string">'a'</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">s.at[<span class="string">'a'</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">s.iat[<span class="number">0</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">s[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"></span><br><span class="line">s[[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]]</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"></span><br><span class="line">s[[<span class="string">'a'</span>,<span class="number">1</span>]] <span class="comment"># 自动索引和自定义索引不能混用。</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>    NaN</span><br><span class="line">&gt;&gt;&gt;dtype: float64</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="切片">切片</h3>
<p>NumPy 中运算和操作可用于 Series 类型（运算和操作结果仍然是 Series 类型）<br>
可以通过自定义索引的列表进行切片（切片后的结果仍然是 Series 类型）<br>
可以通过自动索引进行切片，如果存在自定义索引，则一同被切片（切片后的结果仍然是 Series 类型）<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">s[<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span></span><br><span class="line"></span><br><span class="line">s.loc[<span class="string">'b'</span>: <span class="string">'d'</span>]</span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"></span><br><span class="line">s.iloc[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"></span><br><span class="line">s[:<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"></span><br><span class="line">s[s &gt; s.median()]</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br><span class="line"></span><br><span class="line">np.exp(s)</span><br><span class="line">&gt;&gt;&gt;a      <span class="number">2.718282</span></span><br><span class="line">&gt;&gt;&gt;b      <span class="number">7.389056</span></span><br><span class="line">&gt;&gt;&gt;c     <span class="number">20.085537</span></span><br><span class="line">&gt;&gt;&gt;d     <span class="number">54.598150</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">148.413159</span></span><br><span class="line">&gt;&gt;&gt;dtype: float64</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="字典-1">字典</h3>
<p>Python 字典中运算和操作可用于 Series 类型（运算和操作结果仍然是 Series 类型）<br>
通过自定义索引访问<br>
保留字 in 操作（只会判断自定义索引，不会判断自动索引）<br>
使用.get () 方法<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="string">'c'</span> <span class="keyword">in</span> s</span><br><span class="line">&gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> s</span><br><span class="line">&gt;&gt;&gt;<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">s.get(<span class="string">'c'</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span></span><br><span class="line"></span><br><span class="line">s.get(<span class="string">'f'</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">s.get(<span class="string">'f'</span>, <span class="number">100</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">100</span></span><br></pre></td></tr></tbody></table></figure><br>
注意s.get(key)：<br>
- 如果key存在于索引中，则返回该索引对应的值。<br>
- 如果key不存在于索引中，则返回None。<br>
- 如果get函数中有第二个参数且key不存在于索引中，则返回第二个参数的值，但不会改变s的值。<p></p>
<h3 id="对齐">对齐</h3>
<p>Series 类型在运算中会自动对齐不同索引的数据。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">s2 = pd.Series([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">s1 + s2</span><br><span class="line">&gt;&gt;&gt;a    NaN</span><br><span class="line">&gt;&gt;&gt;b    NaN</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">6.0</span></span><br><span class="line">&gt;&gt;&gt;d    NaN</span><br><span class="line">&gt;&gt;&gt;e    NaN</span><br><span class="line">&gt;&gt;&gt;dtype: float64</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="名字">名字</h3>
<p>Series 对象和索引都可以有一个名字，存储在属性.name 中。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">s.name = <span class="string">'values'</span></span><br><span class="line">s.index.name = <span class="string">'indexes'</span></span><br><span class="line">&gt;&gt;&gt;indexes</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;Name: values, dtype: int64</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="修改">修改</h3>
<p>Series 对象可以随时修改并即刻生效。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line">s[<span class="string">'c'</span>] = <span class="number">30</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="number">30</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;dtype: int64</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="dataframe类型二维">DataFrame 类型（二维）</h1>
<p>DataFrame 类型由共用相同索引的一组列组成：<br>
　　　　　　column　　　　　　　axis=1<br>
　　　　　　index_0 ------&gt; data_a data_f ... data_v<br>
　　　　　　index_1 ------&gt; data_b data_g ... data_w<br>
rows　　　　index_2 ------&gt; data_c data_h ... data_x<br>
axis=0　　　index_3 ------&gt; data_d data_i ... data_y<br>
　　　　　　index_4 ------&gt; data_e data_j ... data_z<br>
　　　　　　　索引　　　　　　　　数据<br>
DataFrame 是一个表格型的数据类型，每列值类型可以不同 (类似于 Excel)。<br>
DataFrame 既有行索引、也有列索引。<br>
DataFrame 常用于表达二维数据，但可以表达多维数据。</p>
<h2 id="dataframe类型的创建">DataFrame 类型的创建</h2>
<p>DataFrame 类型可以由如下类型创建：<br>
- 二维 ndarray 对象<br>
- 由一维 ndarray、列表、字典、元组或 Series 构成的字典<br>
- Series 类型<br>
- 其他 DataFrame 类型</p>
<h3 id="二维ndarray">二维 ndarray</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="字典-2">字典</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df_dict = {<span class="string">'one'</span>: np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>), <span class="string">'two'</span>: np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)}</span><br><span class="line">df = pd.DataFrame(df_dict, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"></span><br><span class="line">df_dict = {<span class="string">'one'</span>: [<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>], <span class="string">'two'</span>: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]}</span><br><span class="line">df = pd.DataFrame(df_dict, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"></span><br><span class="line">df_dict = {<span class="string">'one'</span>: {<span class="string">'a'</span>:<span class="number">0</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">4</span>, <span class="string">'d'</span>:<span class="number">6</span>, <span class="string">'e'</span>:<span class="number">8</span>}, <span class="string">'two'</span>: {<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">3</span>, <span class="string">'c'</span>:<span class="number">5</span>, <span class="string">'d'</span>:<span class="number">7</span>, <span class="string">'e'</span>:<span class="number">9</span>}}</span><br><span class="line">df = pd.DataFrame(df_dict)</span><br><span class="line"></span><br><span class="line">df_dict = {<span class="string">'one'</span>: (<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>), <span class="string">'two'</span>: (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)}</span><br><span class="line">df = pd.DataFrame(df_dict, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"></span><br><span class="line">df_dict = {<span class="string">'one'</span>: pd.Series(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]), <span class="string">'two'</span>: pd.Series(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])}</span><br><span class="line">df = pd.DataFrame(df_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述所有的创建方式的结果都一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure>
<p>字典内的值可以是 ndarray、列表、字典、元组或 Series 类型。</p>
<h3 id="series类型">Series 类型</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s1 = pd.Series([<span class="number">0</span>,<span class="number">1</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">s2 = pd.Series([<span class="number">2</span>,<span class="number">3</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">s3 = pd.Series([<span class="number">4</span>,<span class="number">5</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">s4 = pd.Series([<span class="number">6</span>,<span class="number">7</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">s5 = pd.Series([<span class="number">8</span>,<span class="number">9</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df = pd.DataFrame([s1,s2,s3,s4,s5], index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure>
<p>注意：这里每一个 Series 对象的 index 必须一样，否则报错。</p>
<h3 id="其他dataframe类型">其他 DataFrame 类型</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(a, index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], columns=[<span class="string">'one'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span></span><br></pre></td></tr></tbody></table></figure>
<p>类似对 DataFrame 进行切片。</p>
<h3 id="读取csv文件">读取 CSV 文件</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'aaa.csv'</span>) <span class="comment"># 读取aaa.csv文件</span></span><br><span class="line">df = pd.read_csv(<span class="string">'aaa.csv'</span>, index_col=<span class="string">'bbb'</span>) <span class="comment"># 指定行标签 label</span></span><br><span class="line">df = pd.read_csv(StringIO(<span class="string">'one,two\n0,1\n2,3\n4,5\n6,7\n8,9'</span>)) <span class="comment"># 读取csv格式的字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="dataframe类型的基本操作">DataFrame 类型的基本操作</h2>
<h3 id="获取所有索引所有数据-1">获取所有索引、所有数据</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df.index</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">u'a'</span>, <span class="string">u'b'</span>, <span class="string">u'c'</span>, <span class="string">u'd'</span>, <span class="string">u'e'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">df.columns</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">u'one'</span>, <span class="string">u'two'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">df.values</span><br><span class="line">&gt;&gt;&gt;[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="索引-1">索引</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df[[<span class="string">'one'</span>]] <span class="comment"># 返回一个DataFrame类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'one'</span>] <span class="comment"># 返回一个Series类型，注意这里不能用自动索引</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;Name: one, dtype: int32</span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'c'</span>] <span class="comment"># 返回一个Series类型，注意这里不能用自动索引</span></span><br><span class="line">&gt;&gt;&gt;one    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;two    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;Name: c, dtype: int32</span><br><span class="line">        </span><br><span class="line">df.iloc[<span class="number">1</span>] <span class="comment"># 返回第二行，Series类型，不可直接用a[1]</span></span><br><span class="line">&gt;&gt;&gt;one    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;two    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;Name: b, dtype: int32</span><br><span class="line"></span><br><span class="line">df[<span class="string">'one'</span>][<span class="string">'c'</span>] <span class="comment"># 返回一个numpy.int32类型，注意这里顺序为先列后行</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'c'</span>, <span class="string">'one'</span>] <span class="comment"># 返回一个numpy.int32类型，注意这里顺序为先行后列</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span></span><br><span class="line"></span><br><span class="line">df.at[<span class="string">'c'</span>, <span class="string">'one'</span>] <span class="comment"># 返回一个numpy.int32类型，注意这里顺序为先行后列</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span></span><br><span class="line"></span><br><span class="line">df.iloc[<span class="number">1</span>, <span class="number">0</span>] <span class="comment"># 返回一个numpy.int32类型，注意这里顺序为先行后列</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span></span><br><span class="line"></span><br><span class="line">df.iat[<span class="number">2</span>, <span class="number">0</span>] <span class="comment"># 返回一个numpy.int32类型，注意这里顺序为先行后列</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="切片-1">切片</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df[<span class="number">0</span>:<span class="number">3</span>] <span class="comment"># 返回前三行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">df.head(<span class="number">3</span>) <span class="comment"># 返回前三行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">df.head(-<span class="number">3</span>) <span class="comment"># 返回前两行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"></span><br><span class="line">df.take([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]) <span class="comment"># 返回第一、二、三行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">df.take([<span class="number">0</span>], axis=<span class="number">1</span>) <span class="comment"># 返回第一列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span></span><br><span class="line"></span><br><span class="line">df.take([-<span class="number">1</span>, -<span class="number">2</span>]) <span class="comment"># 返回倒数第一、二行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line"></span><br><span class="line">df.tail(<span class="number">2</span>) <span class="comment"># 返回倒数两行，注意和上方顺序不一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.tail(-<span class="number">2</span>) <span class="comment"># 返回倒数三行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'b'</span>:<span class="string">'d'</span>] <span class="comment"># 与切片不同，这种情况下包含开头也包含结束</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'c'</span>:, [<span class="string">'one'</span>]] <span class="comment"># 行标签从c到最后行，且只选取one这一列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span></span><br><span class="line"></span><br><span class="line">df[df &gt; df.median()]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a  NaN  NaN</span><br><span class="line">&gt;&gt;&gt;b  NaN  NaN</span><br><span class="line">&gt;&gt;&gt;c  NaN  NaN</span><br><span class="line">&gt;&gt;&gt;d  <span class="number">6.0</span>  <span class="number">7.0</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="number">8.0</span>  <span class="number">9.0</span></span><br><span class="line"></span><br><span class="line">np.exp(df)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>          one          two</span><br><span class="line">&gt;&gt;&gt;a     <span class="number">1.000000</span>     <span class="number">2.718282</span></span><br><span class="line">&gt;&gt;&gt;b     <span class="number">7.389056</span>    <span class="number">20.085537</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">54.598150</span>   <span class="number">148.413159</span></span><br><span class="line">&gt;&gt;&gt;d   <span class="number">403.428793</span>  <span class="number">1096.633158</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="number">2980.957987</span>  <span class="number">8103.083928</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="条件筛选">条件筛选</h3>
<ol type="1">
<li><p>简单逻辑判断（&lt;,&gt;, ==, &amp;, |, ~ 等）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df.loc[df[<span class="string">'one'</span>] &gt; <span class="number">5</span>] <span class="comment"># one属性大于5的记录</span></span><br><span class="line">df[df[<span class="string">'one'</span>] &gt; <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'two'</span>][df[<span class="string">'one'</span>] &gt; <span class="number">5</span>] <span class="comment"># 返回Series类型</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;Name: two, dtype: int32</span><br><span class="line"></span><br><span class="line">df.loc[[<span class="string">'two'</span>]][df[<span class="string">'one'</span>] &gt; <span class="number">5</span>] <span class="comment"># 返回DataFrame类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.loc[:, [<span class="string">'two'</span>,<span class="string">'one'</span>]][df[<span class="string">'one'</span>] &gt; <span class="number">5</span>] <span class="comment"># 调换index顺序</span></span><br><span class="line">df[[<span class="string">'two'</span>,<span class="string">'one'</span>]][df[<span class="string">'one'</span>] &gt; <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two  one</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">7</span>    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">9</span>    <span class="number">8</span></span><br><span class="line"></span><br><span class="line">df.loc[(df[<span class="string">'one'</span>] &gt; <span class="number">5</span>) | (df[<span class="string">'two'</span>] &lt;<span class="number">5</span>)] <span class="comment"># one属性大于5或者two属性小于5的记录，注意每个判断表达式都要用括号括起来</span></span><br><span class="line">df[(df[<span class="string">'one'</span>] &gt; <span class="number">5</span>) | (df[<span class="string">'two'</span>] &lt;<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.loc[df[<span class="string">'two'</span>] != <span class="number">5</span>] <span class="comment"># 删除某符合条件的行</span></span><br><span class="line">df[df[<span class="string">'two'</span>] != <span class="number">5</span>]</span><br><span class="line">df.drop(df.loc[df.two == <span class="number">5</span>].index, axis=<span class="number">0</span>)</span><br><span class="line">df.drop(df[df.two == <span class="number">5</span>].index, axis=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>自定义函数筛选</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df.loc[<span class="keyword">lambda</span> x: x[<span class="string">'one'</span>] * x[<span class="string">'two'</span>] &gt; <span class="number">5</span>] <span class="comment"># 函数入参x是整个DataFrame</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df[df.apply(<span class="keyword">lambda</span> x: x[<span class="string">'one'</span>] * x[<span class="string">'two'</span>] &gt; <span class="number">5</span>, axis=<span class="number">1</span>)] <span class="comment"># 函数入参x是一行数据Series</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">5</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">df[df.apply(<span class="built_in">filter</span>, axis=<span class="number">1</span>)] <span class="comment"># 函数作为apply的参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a  NaN  NaN</span><br><span class="line">&gt;&gt;&gt;b  NaN  NaN</span><br><span class="line">&gt;&gt;&gt;c  NaN  NaN</span><br><span class="line">&gt;&gt;&gt;d  <span class="number">6.0</span>  <span class="number">7.0</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="number">8.0</span>  <span class="number">9.0</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h3 id="字典-3">字典</h3>
<p>in 关键字只能检查 columns 的值是否存在。<br>
get 关键字也只能提取列<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="string">'c'</span> <span class="keyword">in</span> df</span><br><span class="line">&gt;&gt;&gt;<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">'one'</span> <span class="keyword">in</span> df</span><br><span class="line">&gt;&gt;&gt;<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">df.get(<span class="string">'c'</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">df.get(<span class="string">'one'</span>)</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;Name: one, dtype: int32</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="对齐-1">对齐</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">4</span>, <span class="number">10</span>).reshape(<span class="number">3</span>, <span class="number">2</span>), index=[<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df1 + df2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one   two</span><br><span class="line">&gt;&gt;&gt;a  NaN   NaN</span><br><span class="line">&gt;&gt;&gt;b  NaN   NaN</span><br><span class="line">&gt;&gt;&gt;c  <span class="number">8.0</span>  <span class="number">10.0</span></span><br><span class="line">&gt;&gt;&gt;d  NaN   NaN</span><br><span class="line">&gt;&gt;&gt;e  NaN   NaN</span><br></pre></td></tr></tbody></table></figure>
<h3 id="名字-1">名字</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df.columns.name = <span class="string">'columns'</span></span><br><span class="line">df.index.name = <span class="string">'indexes'</span></span><br><span class="line">&gt;&gt;&gt;columns  one  two</span><br><span class="line">&gt;&gt;&gt;indexes          </span><br><span class="line">&gt;&gt;&gt;a          <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b          <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c          <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d          <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e          <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="修改-1">修改</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">s = {<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>}</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">set</span>([<span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">df[<span class="string">'one'</span>] = {<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">8</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">2</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">4</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">6</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'one'</span>] = [<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">8</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">6</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">2</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">0</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'one'</span>] = (<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">8</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">6</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">2</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">0</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure>
<p>字典会自动重排顺序。</p>
<h1 id="pandas的数据类型操作">Pandas 的数据类型操作</h1>
<p>Pandas 提供各种函数对 Series 类型和 DataFrame 类型进行操作，两种类型操作类似，下面例子以 DataFrame 为例。</p>
<h2 id="重新索引">重新索引</h2>
<p>.reindex () 能够改变或重排 Series 和 DataFrame 索引<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.reindex(index=[<span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line"></span><br><span class="line">df.reindex(columns=[<span class="string">'two'</span>,<span class="string">'one'</span>,<span class="string">'three'</span>]) <span class="comment"># 注意仅仅是重排索引，如果列名不存在，整列为NaN</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two  one  three</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span>    <span class="number">0</span>    NaN</span><br><span class="line">&gt;&gt;&gt;b    <span class="number">3</span>    <span class="number">2</span>    NaN</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">5</span>    <span class="number">4</span>    NaN</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">7</span>    <span class="number">6</span>    NaN</span><br><span class="line">&gt;&gt;&gt;e    <span class="number">9</span>    <span class="number">8</span>    NaN</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">'one'</span>) <span class="comment"># 将某列变成索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    two</span><br><span class="line">&gt;&gt;&gt;one     </span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span>      <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>      <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>      <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">6</span>      <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">8</span>      <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.reset_index() <span class="comment"># 新生成数字升序索引，原索引变成新的列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> index  one  two</span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span>     a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>     b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>     c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>     d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>     e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.reset_index(drop=<span class="literal">True</span>) <span class="comment"># 新生成数字升序索引，原索引丢弃</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;<span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.rename(columns={<span class="string">'one'</span>: <span class="string">'x'</span>, <span class="string">'two'</span>: <span class="string">'y'</span>}) <span class="comment"># 列索引重命名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  x  y</span><br><span class="line">&gt;&gt;&gt;a  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.rename({<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="number">5</span>}) <span class="comment"># 行索引重命名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">5</span>    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.rename(<span class="built_in">str</span>.upper) <span class="comment"># 行索引更改种类；如需要改变列索引种类则增加参数axis='columns'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;A    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;B    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;C    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;D    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;E    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="插入">插入</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df2 = df1.columns.insert(<span class="number">1</span>, <span class="string">'three'</span>)</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">u'one'</span>, <span class="string">u'three'</span>, <span class="string">u'two'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">df3 = df1.reindex(columns=df2, fill_value=<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  three  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>      <span class="number">5</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>      <span class="number">5</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>      <span class="number">5</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>      <span class="number">5</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>      <span class="number">5</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df4 = df1.index.insert(<span class="number">3</span>, <span class="string">'f'</span>)</span><br><span class="line">&gt;&gt;&gt;Index([<span class="string">u'a'</span>, <span class="string">u'b'</span>, <span class="string">u'c'</span>, <span class="string">u'f'</span>, <span class="string">u'd'</span>, <span class="string">u'e'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">df5 = df1.reindex(index=df4, fill_value=<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;f    <span class="number">5</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="合并">合并</h2>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html">合并官方教程</a></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>, <span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">10</span>, <span class="number">16</span>).reshape(<span class="number">3</span>, <span class="number">2</span>), index=[<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;f   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">&gt;&gt;&gt;g   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">&gt;&gt;&gt;h   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">df3 = pd.DataFrame(np.arange(<span class="number">16</span>, <span class="number">22</span>).reshape(<span class="number">3</span>, <span class="number">2</span>), index=[<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;i   <span class="number">16</span>   <span class="number">17</span></span><br><span class="line">&gt;&gt;&gt;j   <span class="number">18</span>   <span class="number">19</span></span><br><span class="line">&gt;&gt;&gt;k   <span class="number">20</span>   <span class="number">21</span></span><br><span class="line"></span><br><span class="line">df4 = pd.DataFrame(np.arange(<span class="number">10</span>, <span class="number">25</span>).reshape(<span class="number">5</span>, <span class="number">3</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  three  four  five</span><br><span class="line">&gt;&gt;&gt;a     <span class="number">10</span>    <span class="number">11</span>    <span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;b     <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br><span class="line">&gt;&gt;&gt;c     <span class="number">16</span>    <span class="number">17</span>    <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;d     <span class="number">19</span>    <span class="number">20</span>    <span class="number">21</span></span><br><span class="line">&gt;&gt;&gt;e     <span class="number">22</span>    <span class="number">23</span>    <span class="number">24</span></span><br><span class="line"></span><br><span class="line">df5 = pd.concat([df1, df2, df3], keys=[<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]) <span class="comment"># 行合并</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    one  two</span><br><span class="line">&gt;&gt;&gt;x a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;y f   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> g   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> h   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line">&gt;&gt;&gt;z i   <span class="number">16</span>   <span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> j   <span class="number">18</span>   <span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> k   <span class="number">20</span>   <span class="number">21</span></span><br><span class="line"></span><br><span class="line">df5.loc[<span class="string">'y'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;f   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">&gt;&gt;&gt;g   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">&gt;&gt;&gt;h   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">df5.loc[<span class="string">'y'</span>].loc[<span class="string">'g'</span>]</span><br><span class="line">&gt;&gt;&gt;one    <span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;two    <span class="number">13</span></span><br><span class="line">&gt;&gt;&gt;Name: g, dtype: int32</span><br><span class="line">    </span><br><span class="line">pd.concat([df1, df4], axis=<span class="number">1</span>) <span class="comment"># 列合并</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two  three  four  five</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span>     <span class="number">10</span>    <span class="number">11</span>    <span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span>     <span class="number">13</span>    <span class="number">14</span>    <span class="number">15</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span>     <span class="number">16</span>    <span class="number">17</span>    <span class="number">18</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span>     <span class="number">19</span>    <span class="number">20</span>    <span class="number">21</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span>     <span class="number">22</span>    <span class="number">23</span>    <span class="number">24</span></span><br><span class="line"></span><br><span class="line">df6 = pd.DataFrame(np.arange(<span class="number">10</span>, <span class="number">16</span>).reshape(<span class="number">3</span>, <span class="number">2</span>), index=[<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>], columns=[<span class="string">'two'</span>, <span class="string">'three'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two  three</span><br><span class="line">&gt;&gt;&gt;d   <span class="number">10</span>     <span class="number">11</span></span><br><span class="line">&gt;&gt;&gt;e   <span class="number">12</span>     <span class="number">13</span></span><br><span class="line">&gt;&gt;&gt;f   <span class="number">14</span>     <span class="number">15</span></span><br><span class="line"></span><br><span class="line">pd.concat([df1, df6], axis=<span class="number">1</span>) <span class="comment"># 列合并，行并集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two   two  three</span><br><span class="line">&gt;&gt;&gt;a  <span class="number">0.0</span>  <span class="number">1.0</span>   NaN    NaN</span><br><span class="line">&gt;&gt;&gt;b  <span class="number">2.0</span>  <span class="number">3.0</span>   NaN    NaN</span><br><span class="line">&gt;&gt;&gt;c  <span class="number">4.0</span>  <span class="number">5.0</span>   NaN    NaN</span><br><span class="line">&gt;&gt;&gt;d  <span class="number">6.0</span>  <span class="number">7.0</span>  <span class="number">10.0</span>   <span class="number">11.0</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="number">8.0</span>  <span class="number">9.0</span>  <span class="number">12.0</span>   <span class="number">13.0</span></span><br><span class="line">&gt;&gt;&gt;f  NaN  NaN  <span class="number">14.0</span>   <span class="number">15.0</span></span><br><span class="line"></span><br><span class="line">pd.concat([df1, df6], axis=<span class="number">1</span>, join=<span class="string">'inner'</span>) <span class="comment"># 列合并，行交集</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two  two  three</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span>   <span class="number">10</span>     <span class="number">11</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span>   <span class="number">12</span>     <span class="number">13</span></span><br><span class="line"></span><br><span class="line">df1.append(df2) <span class="comment"># 行合并</span></span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">f   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">g   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">h   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line"></span><br><span class="line">df1.append([df2, df3]) <span class="comment"># 多个DataFrame行合并</span></span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">f   <span class="number">10</span>   <span class="number">11</span></span><br><span class="line">g   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">h   <span class="number">14</span>   <span class="number">15</span></span><br><span class="line">i   <span class="number">16</span>   <span class="number">17</span></span><br><span class="line">j   <span class="number">18</span>   <span class="number">19</span></span><br><span class="line">k   <span class="number">20</span>   <span class="number">21</span></span><br><span class="line"></span><br><span class="line">df1.append(df6) <span class="comment"># 行合并，列交集</span></span><br><span class="line">   one  two  three</span><br><span class="line">a  <span class="number">0.0</span>    <span class="number">1</span>    NaN</span><br><span class="line">b  <span class="number">2.0</span>    <span class="number">3</span>    NaN</span><br><span class="line">c  <span class="number">4.0</span>    <span class="number">5</span>    NaN</span><br><span class="line">d  <span class="number">6.0</span>    <span class="number">7</span>    NaN</span><br><span class="line">e  <span class="number">8.0</span>    <span class="number">9</span>    NaN</span><br><span class="line">d  NaN   <span class="number">10</span>   <span class="number">11.0</span></span><br><span class="line">e  NaN   <span class="number">12</span>   <span class="number">13.0</span></span><br><span class="line">f  NaN   <span class="number">14</span>   <span class="number">15.0</span></span><br><span class="line"></span><br><span class="line">df1.append(df6, ignore_index=<span class="literal">True</span>) <span class="comment"># 行合并，列交集，重新索引</span></span><br><span class="line">   one  two  three</span><br><span class="line"><span class="number">0</span>  <span class="number">0.0</span>    <span class="number">1</span>    NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>    <span class="number">3</span>    NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">4.0</span>    <span class="number">5</span>    NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">6.0</span>    <span class="number">7</span>    NaN</span><br><span class="line"><span class="number">4</span>  <span class="number">8.0</span>    <span class="number">9</span>    NaN</span><br><span class="line"><span class="number">5</span>  NaN   <span class="number">10</span>   <span class="number">11.0</span></span><br><span class="line"><span class="number">6</span>  NaN   <span class="number">12</span>   <span class="number">13.0</span></span><br><span class="line"><span class="number">7</span>  NaN   <span class="number">14</span>   <span class="number">15.0</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="索引-2">索引</h2>
<p>Series 和 DataFrame 的索引是 Index 类型，Index 对象是不可修改类型<br>
Index 类型的常用方法：</p>
<table>
<colgroup>
<col style="width: 42%">
<col style="width: 57%">
</colgroup>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>idx.append(idx)</code></td>
<td>连接另一个 Index 对象，产生新的 Index 对象</td>
</tr>
<tr class="even">
<td><code>idx.diff(idx)</code></td>
<td>计算差集，产生新的 Index 对象</td>
</tr>
<tr class="odd">
<td><code>idx.intersection(idx)</code></td>
<td>计算交集，产生新的 Index 对象</td>
</tr>
<tr class="even">
<td><code>idx.union(idx)</code></td>
<td>计算并集，产生新的 Index 对象</td>
</tr>
<tr class="odd">
<td><code>idx.delete(loc)</code></td>
<td>删除 loc 位置处的元素，产生新的 Index 对象</td>
</tr>
<tr class="even">
<td><code>idx.insert(loc, e)</code></td>
<td>在 loc 位置处增加一个元素 e，产生新的 Index 对象</td>
</tr>
<tr class="odd">
<td><code>Series/DataFrame.drop(idx.vaule, axis=0/1)</code></td>
<td>删除 Series 和 DataFrame 指定行或列索引，axis=1 表示列（默认 axis=0）</td>
</tr>
</tbody>
</table>
<h2 id="数据类型运算">数据类型运算</h2>
<h3 id="算术运算法则">算术运算法则</h3>
<p>算术运算根据行列索引，补齐后运算，运算默认产生浮点数。<br>
补齐时缺项填充 NaN (空值)。<br>
二维和一维、一维和零维间为广播运算（低维对象元素会作用到高维对象的每一个元素）。<br>
采用 +、‐、*、/ 符号进行的二元运算产生新的对象。<br>
方法形式的运算可通过指定参数避免上面的 NaN 的产生。</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.add(d, **argws)</code></td>
<td>类型间的加法运算，可选参数</td>
</tr>
<tr class="even">
<td><code>.sub(d, **argws)</code></td>
<td>类型间的减法运算，可选参数</td>
</tr>
<tr class="odd">
<td><code>.mul(d, **argws)</code></td>
<td>类型间的乘法运算，可选参数</td>
</tr>
<tr class="even">
<td><code>.div(d, **argws)</code></td>
<td>类型间的除法运算，可选参数 </td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">3</span>).reshape(<span class="number">3</span>,<span class="number">1</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], columns=[<span class="string">'one'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">2</span></span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df1 + df2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a  <span class="number">0.0</span>  NaN</span><br><span class="line">&gt;&gt;&gt;b  <span class="number">3.0</span>  NaN</span><br><span class="line">&gt;&gt;&gt;c  <span class="number">6.0</span>  NaN</span><br><span class="line">&gt;&gt;&gt;d  NaN  NaN</span><br><span class="line">&gt;&gt;&gt;e  NaN  NaN</span><br><span class="line"></span><br><span class="line">df1.add(df2, fill_value=<span class="number">5</span>) <span class="comment"># 先填充后运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   one   two</span><br><span class="line">&gt;&gt;&gt;a   <span class="number">0.0</span>   <span class="number">6.0</span></span><br><span class="line">&gt;&gt;&gt;b   <span class="number">3.0</span>   <span class="number">8.0</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="number">6.0</span>  <span class="number">10.0</span></span><br><span class="line">&gt;&gt;&gt;d  <span class="number">11.0</span>  <span class="number">12.0</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="number">13.0</span>  <span class="number">14.0</span></span><br><span class="line"></span><br><span class="line">df3 = pd.Series([<span class="number">5</span>, <span class="number">10</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">&gt;&gt;&gt;one     <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;two    <span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;dtype: int32</span><br><span class="line"></span><br><span class="line">df3 + <span class="number">5</span> <span class="comment"># 广播运算</span></span><br><span class="line">&gt;&gt;&gt;one    <span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;two    <span class="number">15</span></span><br><span class="line">&gt;&gt;&gt;dtype: int32</span><br><span class="line"></span><br><span class="line">df2 + df3 <span class="comment"># 不同维度间的广播运算，一维Series默认在轴1参与运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">5</span>   <span class="number">11</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">7</span>   <span class="number">13</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">9</span>   <span class="number">15</span></span><br><span class="line">&gt;&gt;&gt;d   <span class="number">11</span>   <span class="number">17</span></span><br><span class="line">&gt;&gt;&gt;e   <span class="number">13</span>   <span class="number">19</span></span><br><span class="line"></span><br><span class="line">df3 = pd.Series([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">&gt;&gt;&gt;a     <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">15</span></span><br><span class="line">&gt;&gt;&gt;dtype: int32</span><br><span class="line"></span><br><span class="line">df2.add(df3, axis=<span class="number">0</span>) <span class="comment"># 使用运算方法可以令一维Series在轴0参与运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   one   two</span><br><span class="line">&gt;&gt;&gt;a   <span class="number">5.0</span>   <span class="number">6.0</span></span><br><span class="line">&gt;&gt;&gt;b  <span class="number">12.0</span>  <span class="number">13.0</span></span><br><span class="line">&gt;&gt;&gt;c  <span class="number">19.0</span>  <span class="number">20.0</span></span><br><span class="line">&gt;&gt;&gt;d   NaN   NaN</span><br><span class="line">&gt;&gt;&gt;e   NaN   NaN</span><br></pre></td></tr></tbody></table></figure>
<h3 id="比较运算法则">比较运算法则</h3>
<p>比较运算只能比较<strong>相同索引</strong>的元素，<strong>不进行补齐</strong>。<br>
二维和一维、一维和零维间为广播运算。<br>
采用 &gt;、&lt;、&gt;=、&lt;=、==、!= 等符号进行的二元运算产生布尔对象。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">15</span>,<span class="number">5</span>,-<span class="number">1</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a   <span class="number">15</span>   <span class="number">14</span></span><br><span class="line">&gt;&gt;&gt;b   <span class="number">13</span>   <span class="number">12</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="number">11</span>   <span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">9</span>    <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">7</span>    <span class="number">6</span></span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df1 &gt; df2 <span class="comment">#df1和df2必须尺寸一样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    one    two</span><br><span class="line">&gt;&gt;&gt;a   <span class="literal">True</span>   <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;b   <span class="literal">True</span>   <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="literal">True</span>   <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;d   <span class="literal">True</span>   <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">df3 = pd.Series([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line">&gt;&gt;&gt;one     <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;two    <span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;dtype: int32</span><br><span class="line"></span><br><span class="line">df3 &gt; <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;one    <span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;two     <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;dtype: <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">df3 &gt; df2 <span class="comment"># 不同维度间的广播运算，一维Series默认在轴1参与运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    one   two</span><br><span class="line">&gt;&gt;&gt;a   <span class="literal">True</span>  <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;b   <span class="literal">True</span>  <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="literal">True</span>  <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;d  <span class="literal">False</span>  <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="literal">False</span>  <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="单列多列分组聚合运算">单列 / 多列 / 分组 / 聚合运算</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.loc[:, <span class="string">'one'</span>] = df.loc[:, <span class="string">'one'</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>) <span class="comment"># 在Pandas中，DataFrame的一列就是一个Series, 可以通过map来对一列进行操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">4</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="number">16</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d   <span class="number">36</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e   <span class="number">64</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">df.loc[:, <span class="string">'one'</span>] = df.loc[:, <span class="string">'one'</span>].<span class="built_in">map</span>(square) <span class="comment"># 其中lambda函数中的x代表当前元素。可以使用另外的函数来代替lambda函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">4</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="number">16</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d   <span class="number">36</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e   <span class="number">64</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.loc[:, <span class="string">'one'</span>] = df.loc[:, <span class="string">'one'</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> x &gt;= <span class="number">5</span> <span class="keyword">else</span> <span class="literal">False</span>) <span class="comment"># lambda中可以传入任何表达式</span></span><br><span class="line">df.loc[:, <span class="string">'two'</span>] = df.loc[:, <span class="string">'two'</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> x &gt;= <span class="number">5</span> <span class="keyword">else</span> <span class="literal">False</span>)</span><br><span class="line">&gt;&gt;&gt;		  one    two</span><br><span class="line">&gt;&gt;&gt;a  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;b  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;c  <span class="literal">False</span>   <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;d   <span class="literal">True</span>   <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;e   <span class="literal">True</span>   <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">df.loc[:, <span class="string">'three'</span>] = df.apply(<span class="keyword">lambda</span> x: x[<span class="string">'one'</span>] + <span class="number">2</span> * x[<span class="string">'two'</span>], axis=<span class="number">1</span>) <span class="comment"># 要对DataFrame的多个列同时进行运算，可以使用apply</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two  three</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span>      <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">4</span>    <span class="number">5</span>     <span class="number">14</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">6</span>    <span class="number">7</span>     <span class="number">20</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">8</span>    <span class="number">9</span>     <span class="number">26</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'f'</span>, :] = df.apply(<span class="keyword">lambda</span> x: x[<span class="string">'a'</span>] + <span class="number">2</span> * x[<span class="string">'b'</span>], axis=<span class="number">0</span>) <span class="comment">#对DataFrame的多个行同时进行运算，将axis设为0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a  <span class="number">0.0</span>  <span class="number">1.0</span></span><br><span class="line">&gt;&gt;&gt;b  <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line">&gt;&gt;&gt;c  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line">&gt;&gt;&gt;d  <span class="number">6.0</span>  <span class="number">7.0</span></span><br><span class="line">&gt;&gt;&gt;e  <span class="number">8.0</span>  <span class="number">9.0</span></span><br><span class="line">&gt;&gt;&gt;f  <span class="number">4.0</span>  <span class="number">7.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要对DataFrame的每个元素同时进行运算，可以使用applymap</span></span><br><span class="line">df = df.applymap(<span class="keyword">lambda</span> x: x ** <span class="number">2</span> <span class="keyword">if</span> x &lt;= <span class="number">5</span> <span class="keyword">else</span> x * <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">4</span>    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;c   <span class="number">16</span>   <span class="number">25</span></span><br><span class="line">&gt;&gt;&gt;d   <span class="number">12</span>   <span class="number">14</span></span><br><span class="line">&gt;&gt;&gt;e   <span class="number">16</span>   <span class="number">18</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="pandas的数据特征分析">Pandas 的数据特征分析</h1>
<h2 id="排序">排序</h2>
<p><code>.sort_index(axis=0, ascending=True)</code> 方法在指定轴上根据索引进行排序，默认升序。<br>
<code>Series.sort_values(axis=0, ascending=True)</code>、<code>DataFrame.sort_values(by, axis=0, ascending=True)</code> 方法在指定轴上根据数值进行排序，默认升序。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'d'</span>], columns=[<span class="string">'two'</span>, <span class="string">'one'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two  one</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.sort_index() <span class="comment"># 根据indexes顺排（首字母顺序）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two  one</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line"></span><br><span class="line">df.sort_index(ascending=<span class="literal">False</span>) <span class="comment"># 根据indexes逆排（首字母顺序）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two  one</span><br><span class="line">&gt;&gt;&gt;e    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line"></span><br><span class="line">df.sort_index(axis=<span class="number">1</span>) <span class="comment"># 根据columns顺排（首字母顺序）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">1</span>    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">5</span>    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">7</span>    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">9</span>    <span class="number">8</span></span><br><span class="line"></span><br><span class="line">df.sort_values(<span class="string">'two'</span>, ascending=<span class="literal">False</span>) <span class="comment"># 根据'two'这一列的值重排所有的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  two  one</span><br><span class="line">&gt;&gt;&gt;d    <span class="number">8</span>    <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">6</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">4</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">0</span>    <span class="number">1</span></span><br><span class="line"></span><br><span class="line">df.sort_values(<span class="string">'c'</span>, axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;c    <span class="number">1</span>    <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;a    <span class="number">5</span>    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">7</span>    <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">9</span>    <span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><br>
注意：排序时，NaN永远都是在排序结果末尾（不管是升序 还是 降序）<p></p>
<h2 id="统计">统计</h2>
<p>适用于 Series 和 DataFrame 类型数据，基本统计分析</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.sum()</td>
<td> 计算数据的总和，按 0 轴计算，下同</td>
</tr>
<tr class="even">
<td>.count()</td>
<td> 非 NaN 值的数量</td>
</tr>
<tr class="odd">
<td>.mean() .median()</td>
<td> 计算数据的算术平均值、算术中位数</td>
</tr>
<tr class="even">
<td>.var() .std()</td>
<td> 计算数据的方差、标准差</td>
</tr>
<tr class="odd">
<td>.min() .max()</td>
<td> 计算数据的最小值、最大值</td>
</tr>
<tr class="even">
<td>.describe()</td>
<td> 针对 0 轴（各列）的统计汇总</td>
</tr>
</tbody>
</table>
<p>适用于 Series 类型，基本统计分析</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.argmin() .argmax()</td>
<td> 计算数据最大值、最小值所在位置的索引位置（自动索引）</td>
</tr>
<tr class="even">
<td>.idxmin() .idxmax()</td>
<td> 计算数据最大值、最小值所在位置的索引位置（自定义索引）</td>
</tr>
</tbody>
</table>
<p>适用于 Series 和 DataFrame 类型，累计计算</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.cumsum()</td>
<td> 依次给出前 1、2、…、n 个数的和</td>
</tr>
<tr class="even">
<td>.cumprod()</td>
<td> 依次给出前 1、2、…、n 个数的积</td>
</tr>
<tr class="odd">
<td>.cummax()</td>
<td> 依次给出前 1、2、…、n 个数的最大值</td>
</tr>
<tr class="even">
<td>.cummin()</td>
<td> 依次给出前 1、2、…、n 个数的最小值</td>
</tr>
</tbody>
</table>
<p>适用于 Series 和 DataFrame 类型，滚动计算（窗口计算）</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.rolling(w).sum()</td>
<td> 依次计算相邻 w 个元素的和</td>
</tr>
<tr class="even">
<td>.rolling(w).mean()</td>
<td> 依次计算相邻 w 个元素的算术平均值</td>
</tr>
<tr class="odd">
<td>.rolling(w).var()</td>
<td> 依次计算相邻 w 个元素的方差</td>
</tr>
<tr class="even">
<td>.rolling(w).std()</td>
<td> 依次计算相邻 w 个元素的标准差</td>
</tr>
<tr class="odd">
<td>.rolling(w).min() .max()</td>
<td> 依次计算相邻 w 个元素的最小值和最大值</td>
</tr>
</tbody>
</table>
<p>适用于 Series 和 DataFrame 类型，相关性分析</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.cov()</td>
<td> 计算协方差矩阵</td>
</tr>
<tr class="even">
<td>.corr()</td>
<td> 计算相关系数矩阵，Pearson、Spearman、Kendall 等系数 </td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>), index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>], columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line">df[<span class="string">'one'</span>] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span>    <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">1</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">2</span>    <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">2</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">'one'</span>)[<span class="string">'two'</span>].<span class="built_in">sum</span>() <span class="comment"># 按照列one进行分组对列two进行统计求和，返回Series类型</span></span><br><span class="line">&gt;&gt;&gt;one</span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>     <span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>    <span class="number">16</span></span><br><span class="line">&gt;&gt;&gt;Name: two, dtype: int32</span><br><span class="line">    </span><br><span class="line">df.groupby([<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]).<span class="built_in">sum</span>() <span class="comment"># 可以指定分组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two</span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>    <span class="number">2</span>    <span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>    <span class="number">5</span>   <span class="number">21</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">'one'</span>)[<span class="string">'two'</span>].describe() <span class="comment"># 按照列one进行分组对列two进行统计计数，返回DataFrame类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    count  mean       std  <span class="built_in">min</span>  <span class="number">25</span>%  <span class="number">50</span>%  <span class="number">75</span>%  <span class="built_in">max</span></span><br><span class="line">&gt;&gt;&gt;one                                                </span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>      <span class="number">3.0</span>   <span class="number">3.0</span>  <span class="number">2.000000</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>      <span class="number">2.0</span>   <span class="number">8.0</span>  <span class="number">1.414214</span>  <span class="number">7.0</span>  <span class="number">7.5</span>  <span class="number">8.0</span>  <span class="number">8.5</span>  <span class="number">9.0</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'three'</span>] = df.groupby(<span class="string">'one'</span>)[<span class="string">'two'</span>].transform(<span class="keyword">lambda</span> x: (x.<span class="built_in">sum</span>() - x) / x.count()) <span class="comment"># 按照列one进行分组对列two进行函数运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  one  two     three</span><br><span class="line">&gt;&gt;&gt;a    <span class="number">1</span>    <span class="number">1</span>  <span class="number">2.666667</span></span><br><span class="line">&gt;&gt;&gt;b    <span class="number">1</span>    <span class="number">3</span>  <span class="number">2.000000</span></span><br><span class="line">&gt;&gt;&gt;c    <span class="number">1</span>    <span class="number">5</span>  <span class="number">1.333333</span></span><br><span class="line">&gt;&gt;&gt;d    <span class="number">2</span>    <span class="number">7</span>  <span class="number">4.500000</span></span><br><span class="line">&gt;&gt;&gt;e    <span class="number">2</span>    <span class="number">9</span>  <span class="number">3.500000</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">'one'</span>).agg([<span class="string">'sum'</span>, <span class="string">'count'</span>, <span class="string">'mean'</span>, <span class="string">'median'</span>, <span class="string">'var'</span>, <span class="string">'std'</span>, <span class="string">'min'</span>, <span class="string">'max'</span>, <span class="string">'first'</span>, <span class="string">'last'</span>]) <span class="comment"># agg方法将一个函数使用在一个数列上，然后返回一个标量的值。内置函数名需要用引号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   two                                                   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="built_in">sum</span> count mean median var       std <span class="built_in">min</span> <span class="built_in">max</span> first last</span><br><span class="line">&gt;&gt;&gt;one                                                       </span><br><span class="line">&gt;&gt;&gt;<span class="number">1</span>     <span class="number">9</span>     <span class="number">3</span>    <span class="number">3</span>      <span class="number">3</span>   <span class="number">4</span>  <span class="number">2.000000</span>   <span class="number">1</span>   <span class="number">5</span>     <span class="number">1</span>    <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>    <span class="number">16</span>     <span class="number">2</span>    <span class="number">8</span>      <span class="number">8</span>   <span class="number">2</span>  <span class="number">1.414214</span>   <span class="number">7</span>   <span class="number">9</span>     <span class="number">7</span>    <span class="number">9</span></span><br><span class="line"></span><br><span class="line">df.agg([<span class="string">'sum'</span>, <span class="string">'count'</span>, <span class="string">'mean'</span>, <span class="string">'median'</span>, <span class="string">'var'</span>, <span class="string">'std'</span>, <span class="string">'min'</span>, <span class="string">'max'</span>, <span class="string">'first'</span>, <span class="string">'last'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>            one        two</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>     <span class="number">7.000000</span>  <span class="number">25.000000</span></span><br><span class="line">&gt;&gt;&gt;count   <span class="number">5.000000</span>   <span class="number">5.000000</span></span><br><span class="line">&gt;&gt;&gt;mean    <span class="number">1.400000</span>   <span class="number">5.000000</span></span><br><span class="line">&gt;&gt;&gt;median  <span class="number">1.000000</span>   <span class="number">5.000000</span></span><br><span class="line">&gt;&gt;&gt;var     <span class="number">0.300000</span>  <span class="number">10.000000</span></span><br><span class="line">&gt;&gt;&gt;std     <span class="number">0.547723</span>   <span class="number">3.162278</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">min</span>     <span class="number">1.000000</span>   <span class="number">1.000000</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>     <span class="number">2.000000</span>   <span class="number">9.000000</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
        <tag>Data Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬虫</title>
    <url>/contents/Python%E7%88%AC%E8%99%AB.html</url>
    <content><![CDATA[<p>网络爬虫是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。<br>
本文介绍基本的网络爬虫的方法，并给出一个具体实例。<br>
Reference：<a href="http://www.icourse163.org/course/BIT-1001870001">公开课</a><br>
<span id="more"></span></p>
<h1 id="爬虫许可">爬虫许可</h1>
<p>大部分网站都会在其网站根网址上发布 robots 协议<br>
如豆瓣网：https://www.douban.com/robots.txt<br>
</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/subject_search</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/amazon_search</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/search</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/group/search</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/event/search</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/celebrities/search</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/location/drama/search</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/forum/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/new_subject</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/service/iframe</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/j/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/link2/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/recommend/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/trailer/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/doubanapp/card</span></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="string">https://www.douban.com/sitemap_index.xml</span></span><br><span class="line"><span class="attr">Sitemap:</span> <span class="string">https://www.douban.com/sitemap_updated_index.xml</span></span><br><span class="line"><span class="comment"># Crawl-delay: 5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">User-agent:</span> <span class="string">Wandoujia</span> <span class="string">Spider</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="requests库">Requests 库</h1>
<p>Reference：<a href="http://www.jianshu.com/p/c6376d6c753c">Python 网络爬虫与信息提取 (一)：网络爬虫之规则</a><br>
安装：<code>pip install requests</code>。</p>
<h2 id="requests库的主要方法">Requests 库的主要方法</h2>
<table>
<colgroup>
<col style="width: 16%">
<col style="width: 83%">
</colgroup>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>requests.request()</code></td>
<td>构造一个请求，支撑以下各方法的基础方法</td>
</tr>
<tr class="even">
<td><code>requests.get()</code></td>
<td>获取 HTML 网页的主要方法，对应于 HTTP 的 GET，请求获取 url 位置的资源</td>
</tr>
<tr class="odd">
<td><code>requests.head()</code></td>
<td>获取 HTML 网页头信息的方法，对应于 HTTP 的 HEAD，请求获取 url 位置资源的响应消息报告，获得该资源的头部信息</td>
</tr>
<tr class="even">
<td><code>requests.post()</code></td>
<td>向 HTML 网页提交 post 请求的方法，对应于 HTTP 的 POST，请求向 url 位置的资源后附加新的数据</td>
</tr>
<tr class="odd">
<td><code>requests.put()</code></td>
<td>向 HTML 网页提交 put 请求的方法，对应于 HTTP 的 PUT，请求向 url 位置存储一个资源，覆盖原 url 位置的资源</td>
</tr>
<tr class="even">
<td><code>requests.patch()</code></td>
<td>向 HTML 网页提交局部修改请求的方法，对应于 HTTP 的 PATCH，请求局部更新 url 位置的资源，即改变该处资源的部分内容</td>
</tr>
<tr class="odd">
<td><code>requests.delete()</code></td>
<td>向 HTML 网页提交删除请求的方法，对应于 HTTP 的 DELETE，请求删除 url 位置存储的资源</td>
</tr>
</tbody>
</table>
<h2 id="get方法">get 方法</h2>
<p>在爬虫中主要使用 get 方法，其他方法参数与 get 方法类似。<br>
<code>r = requests.get(url)</code>: 右边构造一个向服务器请求资源的 Requests 对象，左边返回一个包含服务器资源的 Response 对象给 r。<br>
完整参数:<code>requests.get(url,params=None,**kwargs)</code>, 实则由 request 方法封装。<br>
Resonse 对象的五个属性：</p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> r.status_code</td>
<td>HTTP 请求的返回状态，200 表示连接成功，404 表示失败</td>
</tr>
<tr class="even">
<td> r.text</td>
<td>HTTP 响应内容的字符串形式，即 url 对应的页面内容</td>
</tr>
<tr class="odd">
<td> r.encoding</td>
<td>HTTP header 中猜测的响应内容编码方式</td>
</tr>
<tr class="even">
<td> r.apparent_encoding</td>
<td> 从内容中分析出的响应内容编码方式（备选编码方式）</td>
</tr>
<tr class="odd">
<td>r.content</td>
<td>HTTP 响应内容的二进制形式</td>
</tr>
</tbody>
</table>
<h2 id="异常处理">异常处理</h2>
<table>
<thead>
<tr class="header">
<th>异常</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> requests.ConnectionError</td>
<td> 网络连接错误异常，如 DNS 查询失败、拒绝连接等</td>
</tr>
<tr class="even">
<td> requests.HTTPError</td>
<td>HTTP 错误异常</td>
</tr>
<tr class="odd">
<td> requests.URLRequired</td>
<td>url 缺失异常</td>
</tr>
<tr class="even">
<td> requests.TooManyRedirects</td>
<td> 超过最大重定向次数，产生重定向异常</td>
</tr>
<tr class="odd">
<td> requests.ConnectTimeout</td>
<td> 连接远程服务器超时异常</td>
</tr>
<tr class="even">
<td> requests.Timeout</td>
<td> 请求 url 超时，产生超时异常</td>
</tr>
</tbody>
</table>
<p>使用 r.raise_for_status () 方法构建通用代码框架：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>)</span></span><br><span class="line"><span class="function">	<span class="title">try</span>:</span></span><br><span class="line">		r = requests.get(url,timeout = <span class="number">30</span>)</span><br><span class="line">		r.raise_for_status()</span><br><span class="line">		r.encoding = r.apparent_encoding</span><br><span class="line">		<span class="keyword">return</span> r.text</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Error"</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="requests库主要方法">Requests 库主要方法</h2>
<p><code>requests.request(method,url,**kwargs)</code><br>
- method (请求方式) 包括：GET/HEAD/POST/PUT/PATCH/DELETE/OPTIONS。<br>
- **kwargs (控制访问参数) 包括:params (添加键值到 url 后)/data (字典 / 字节序列等作为 Request 的内容)/json/headers (HTTP 定制头)/cookies (Request 中的 cookie)/auth (元祖，支持 HTTP 认证)/files (传输文件)/timeout/proxies (设定访问代理服务器)/allow_redirects (重定向开关)/stream (获取内容立即下载开关)/verify (认证 SSL 证书开关)/cert (本地 SSL 证书路径)。</p>
<h1 id="beautiful-soup库">Beautiful Soup 库</h1>
<p>Beautiful Soup 库可对 HTML/XML 格式进行解析并提取相关信息。<br>
Beautiful Soup 库是解析 / 遍历 / 维护 "标签" 的功能库，引用方式：<code>from bs4 import BeautifulSoup</code>。<br>
Reference：<a href="http://www.jianshu.com/p/7b950b8a5966">Python 网络爬虫与信息提取 (二)：网络爬虫之提取</a><br>
安装：<code>pip install beautifulsoup4</code>。</p>
<h2 id="beautiful-soup库的解析器">Beautiful Soup 库的解析器</h2>
<table>
<thead>
<tr class="header">
<th>解析器</th>
<th>使用方法</th>
<th>条件</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> HTML 解析器</td>
<td><code>BeautifulSoup(mk,'html.parser')</code></td>
<td>安装 bs4 库</td>
</tr>
<tr class="even">
<td> lxml 的 HTML 解析器</td>
<td><code>BeautifulSoup(mk,'lxml')</code></td>
<td><code>pip install lxml</code></td>
</tr>
<tr class="odd">
<td>lxml 的 XML 解析器</td>
<td><code>BeautifulSoup(mk,'xml')</code></td>
<td><code>pip install lxml</code></td>
</tr>
<tr class="even">
<td>html5lib 的解析器</td>
<td><code>BeautifulSoup(mk,'html5lib')</code></td>
<td><code>pip install html5lib</code></td>
</tr>
</tbody>
</table>
<h2 id="beautiful-soup类的基本元素">Beautiful Soup 类的基本元素</h2>
<table>
<thead>
<tr class="header">
<th>基本元素</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> Tag</td>
<td> 标签，最基本的信息组织单元，分别用 <code>&lt;&gt;</code> 和 <code>&lt;/&gt;</code> 标明开头和结尾</td>
</tr>
<tr class="even">
<td> Name</td>
<td> 标签的名字，<code>&lt;p&gt;...&lt;/p&gt;</code> 的名字是 'p'，格式：<code>&lt;tag&gt;.name</code></td>
</tr>
<tr class="odd">
<td>Attributes</td>
<td> 标签的属性，字典形式组织，格式：<code>&lt;tag&gt;.attrs</code> 或者 <code>&lt;tag&gt;['attrs']</code></td>
</tr>
<tr class="even">
<td>NavigableString</td>
<td> 标签内非属性字符串，<code>&lt;&gt;...&lt;/&gt;</code> 中的字符串，格式：<code>&lt;tag&gt;.string</code></td>
</tr>
<tr class="odd">
<td>Comment</td>
<td> 标签内字符串的注释部分，一种特殊的 Comment 类型</td>
</tr>
</tbody>
</table>
<ul>
<li>任何存在于 HTML 语法中的标签都可用 <code>soup.&lt;tag&gt;</code> 访问获得，存在多个取第一个。</li>
<li>每个 <code>&lt;tag&gt;</code> 有自己的名字，通过 <code>&lt;tag&gt;.name</code> 获取，字符串类型。</li>
<li>每个 <code>&lt;tag&gt;</code> 有 0 或多个属性，字典类型。</li>
<li>每个 <code>&lt;tag&gt;</code> 内有字符串，可以跨越多个标签层次，如果字符串不是注释，则 NavigableString 类型。</li>
<li>如果 <code>&lt;tag&gt;</code> 内的字符串是注释，则返回 Comment 类型。</li>
</ul>
<h2 id="html内容遍历方法">HTML 内容遍历方法</h2>
<img src="/images/Python%E7%88%AC%E8%99%AB/HTML.png" class="" width="600" height="400">
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
<th>遍历方式</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
.contents |子节点的列表，将 <code>&lt;tag&gt;</code> 所有儿子节点存入列表

下行遍历

.children |子节点的迭代类型，与.contents类似，用于循环遍历儿子节点<br>
.descendants |子孙节点的迭代类型，用于循环遍历子孙节点<br>
.parent |节点的父标签

上行遍历

.parents |节点先辈标签的迭代类型，用于循环遍历先辈节点<br>
.next_sibling |返回按照HTML文本顺序的下一个平行节点标签

平行遍历

<p>.previous_sibling | 返回按照 HTML 文本顺序的上一个平行节点标签<br>
.next_siblings | 迭代类型，返回按照 HTML 文本顺序的后续所有平行节点标签<br>
.previous_siblings | 迭代类型，返回按照 HTML 文本顺序的前续所有平行节点标签</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">	<span class="built_in">print</span>(child) <span class="comment">#遍历儿子节点</span></span><br><span class="line"><span class="keyword">for</span> descendant <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">	<span class="built_in">print</span>(descendant) <span class="comment">#遍历子孙节点</span></span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.body.parents:</span><br><span class="line">	<span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">		<span class="built_in">print</span>(parent)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(parent.name)</span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">	<span class="built_in">print</span>(sibling)</span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:</span><br><span class="line">	<span class="built_in">print</span>(sibling)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="html格式输出">HTML 格式输出</h2>
<p>使用 <code>prettify()</code> 方法，为 HTML 文本 &lt;&gt; 及其内容增加 '' 并且可用于标签 / 方法。</p>
<h2 id="html内容查找方法">HTML 内容查找方法</h2>
<p><code>&lt;&gt;.find_all(name,attrs,recursive,text='',**kwargs)</code><br>
返回一个列表类型，存储查找的结果<br>
name: 对标签名称的检索字符串<br>
attrs: 对标签属性值的检索字符串，可标注属性检索，如果 attrs 是 class，则替换为 class_。<br>
recursive: 是否对子孙全部搜索，默认 True<br>
text='': 对字符串域进行检索，其中可以用 re.compile () 来进行正则表达式检索<br>
由<code>.find_all()</code> 扩展的七个方法:</p>
<table>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>&lt;&gt;.find()</code></td>
<td>搜索且只返回一个结果，同<code>.find_a11()</code> 参数</td>
</tr>
<tr class="even">
<td><code>&lt;&gt;.find_parents()</code></td>
<td>在先辈节点中搜索，返回列表类型，同<code>.find_all()</code> 参数</td>
</tr>
<tr class="odd">
<td><code>&lt;&gt;.find_parent()</code></td>
<td>在先辈节点中返回一个结果，同<code>.find()</code> 参数</td>
</tr>
<tr class="even">
<td><code>&lt;&gt;.find_next_siblings()</code></td>
<td>在后续平行节点中搜索，返回列表类型，同<code>.find_a11()</code> 参数</td>
</tr>
<tr class="odd">
<td><code>&lt;&gt;.find_next_sibling()</code></td>
<td>在后续平行节点中返回一个结果，同<code>.find()</code> 参数</td>
</tr>
<tr class="even">
<td><code>&lt;&gt;.find_previous_siblings()</code></td>
<td>在前续平行节点中搜索，返回列表类型，同<code>.find_a11()</code> 参数</td>
</tr>
<tr class="odd">
<td><code>&lt;&gt;.find_previous_sibling()</code></td>
<td>在前续平行节点中返回一个结果，同<code>.find()</code> 参数</td>
</tr>
</tbody>
</table>
<h1 id="信息组织与提取方法">信息组织与提取方法</h1>
<p>信息标记的三种形式及比较：<br>
XML (Extensible Markup Language) 是最早的通用信息标记语言，可扩展性好，但繁琐；标签由名字和属性构成，形式有：<br>
</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   --&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>
JSON(JavaScript Objection Notation)适合程序处理，较XML简洁;有类型的键值对，形式有：<br>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"key"</span>:<span class="string">"value"</span></span><br><span class="line"><span class="string">"key"</span>:[<span class="string">"value1"</span>,<span class="string">"value2"</span>]</span><br><span class="line"><span class="string">"key"</span>:{<span class="attr">"subkey"</span>:<span class="string">"subvalue"</span>}</span><br></pre></td></tr></tbody></table></figure><br>
YAML(YAML Ain't Markup Language)文本信息比例最高，可读性好;无类型的键值对，形式有：<br>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">key:value</span></span><br><span class="line"><span class="string">key:#Comment</span></span><br><span class="line"><span class="string">-value1</span></span><br><span class="line"><span class="string">-value2</span></span><br><span class="line"><span class="attr">key:</span></span><br><span class="line">  <span class="string">subkey:subvalue</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="re正则表达式库">Re (正则表达式) 库</h1>
<p>regular expression = regex = RE<br>
是一种通用的字符串表达框架，用来简洁表达一组字符串的表达式，也可用来判断某字符串的特征归属。<br>
Reference：<a href="http://www.jianshu.com/p/98d0139dacac">Python 网络爬虫与信息提取 (三)：网络爬虫之实战</a> ;<a href="http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html">Python 正则表达式指南</a></p>
<h2 id="正则表达式的语法">正则表达式的语法</h2>
<h3 id="普通字符">普通字符</h3>
<p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<h3 id="非打印字符">非打印字符</h3>
<p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<colgroup>
<col style="width: 4%">
<col style="width: 95%">
</colgroup>
<thead>
<tr class="header">
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>\cx</code></td>
<td>匹配由 x 指明的控制字符。例如，<code>\cM</code> 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td>
</tr>
<tr class="even">
<td><code>\f</code></td>
<td>匹配一个换页符。等价于 <code>\x0c</code> 和 <code>\cL</code>。</td>
</tr>
<tr class="odd">
<td><code>\n</code></td>
<td>匹配一个换行符。等价于 <code>\x0a</code> 和 <code>\cJ</code>。</td>
</tr>
<tr class="even">
<td><code>\r</code></td>
<td>匹配一个回车符。等价于 <code>\x0d</code> 和 <code>\cM</code>。</td>
</tr>
<tr class="odd">
<td><code>\d</code></td>
<td>匹配任何数字。等价于 <code>[0-9]</code>。</td>
</tr>
<tr class="even">
<td><code>\D</code></td>
<td>匹配任何非数字。等价于 <code>[^\d]</code>。</td>
</tr>
<tr class="odd">
<td><code>\w</code></td>
<td>匹配任何单词字符。等价于 <code>[a-zA-Z0-9_]</code>。</td>
</tr>
<tr class="even">
<td><code>\W</code></td>
<td>匹配任何非单词字符。等价于 <code>[^\w]</code>。</td>
</tr>
<tr class="odd">
<td><code>\s</code></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 <code>[\f\n\r\t\v]</code>。</td>
</tr>
<tr class="even">
<td><code>\S</code></td>
<td>匹配任何非空白字符。等价于 <code>[^\f\n\r\t\v]</code>。</td>
</tr>
<tr class="odd">
<td><code>\t</code></td>
<td>匹配一个制表符。等价于 <code>\x09</code> 和 <code>\cI</code>。</td>
</tr>
<tr class="even">
<td><code>\v</code></td>
<td>匹配一个垂直制表符。等价于 <code>\x0b</code> 和 <code>\cK</code>。</td>
</tr>
</tbody>
</table>
<h3 id="特殊字符">特殊字符</h3>
<p>所谓特殊字符，就是一些有特殊含义的字符。<br>
若要匹配这些特殊字符，必须首先使字符 "转义"，即，将反斜杠字符。下表列出了正则表达式中的特殊字符：</p>
<table>
<colgroup>
<col style="width: 19%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th>特别字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>^</code></td>
<td>匹配输入字符串的开始位置，在多行模式中匹配每一行的结尾。<br>除非在方括号表达式中使用，此时它表示不接受该字符集合。</td>
</tr>
<tr class="even">
<td><code>$</code></td>
<td>匹配输入字符串的结尾位置，在多行模式中匹配每一行的结尾。</td>
</tr>
<tr class="odd">
<td><code>(...)</code></td>
<td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。从表达式左边开始每遇到一个分组，则编号 + 1。分组表达式作为一个整体可以后接数量词。表达式中的 <code>|</code> 仅在分组中有效。</td>
</tr>
<tr class="even">
<td><code>(?P&lt;name&gt;...)</code></td>
<td>分组，除了原有编号外再指定额外别名。</td>
</tr>
<tr class="odd">
<td><code>\&lt;number&gt;</code><br><code>(&lt;?P=name)</code></td>
<td>引用编号为 number 或者别名为 name 的分组。</td>
</tr>
<tr class="even">
<td><code>[...]</code></td>
<td>字符集，对应的位置可以是字符集中任意字符。 字符集中的字符可以逐个列出，也可以给出范围，如 <code>[abc]</code> 或 <code>[a-c]</code>。第一个字符如果是 ^ 则表示取反，如 [^abc] 表示不是 a 或 b 或 c 的其他字符。<br>所有的特殊字符在字符集中都失去其原有的特殊含义。在字符集中如果要使用<code>]</code> 或 <code>-</code> 或 <code>^</code>，可以在前面加上反斜杠，或者把<code>]</code> 或 <code>-</code> 放在第一位，把 <code>^</code> 放在非第一位。</td>
</tr>
<tr class="odd">
<td><code>{n}</code></td>
<td>n 是一个非负整数。匹配确定的 n 次。</td>
</tr>
<tr class="even">
<td><code>{n,}</code></td>
<td>n 是一个非负整数。至少匹配 n 次。<code>{1,}</code> 等价于 <code>+</code>。<code>{0,}</code> 则等价于 <code>*</code>。</td>
</tr>
<tr class="odd">
<td><code>{n,m}</code></td>
<td>m 和 n 均为非负整数，其中 n&lt;=m。最少匹配 n 次且最多匹配 m 次。<code>{0,1}</code> 等价于 <code>?</code>。<br>请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr class="even">
<td><code>*</code></td>
<td>匹配前面的子表达式零次或多次。</td>
</tr>
<tr class="odd">
<td><code>+</code></td>
<td>匹配前面的子表达式一次或多次。</td>
</tr>
<tr class="even">
<td><code>.</code></td>
<td>匹配除换行符 <code>\n</code> 之外的任何单字符。在 DOTALL 模式中也能匹配换行符。</td>
</tr>
<tr class="odd">
<td><code>?</code></td>
<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。</td>
</tr>
<tr class="even">
<td><code>\</code></td>
<td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。</td>
</tr>
<tr class="odd">
<td><code>|</code></td>
<td>左右表达式任意一个。</td>
</tr>
</tbody>
</table>
<h3 id="经典实例">经典实例</h3>
<table>
<thead>
<tr class="header">
<th>正则表达式</th>
<th>匹配字符串</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>^[A-Za-z]+$</code></td>
<td>由 26 个字母组成的字符串</td>
</tr>
<tr class="even">
<td><code>^[A-Za-z0-9]+$</code></td>
<td>由 26 个字母和数字组成的字符串</td>
</tr>
<tr class="odd">
<td><code>^-?\d+$</code></td>
<td>整数形式的字符串</td>
</tr>
<tr class="even">
<td><code>^[1-9][0-9]*$</code></td>
<td>正整数形式的字符串</td>
</tr>
<tr class="odd">
<td><code>[\u4e00-\u9fa5]</code></td>
<td>匹配中文字符</td>
</tr>
</tbody>
</table>
<h2 id="正则表达式相关注解">正则表达式相关注解</h2>
<ol type="1">
<li>数量词的贪婪模式与非贪婪模式<br>
正则表达式通常用于在文本中查找匹配的字符串。Python 里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。实际我们一般使用非贪婪模式来提取。</li>
<li>反斜杠问题<br>
与大多数编程语言相同，正则表达式里使用 <code>\</code> 作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符 <code>\</code>，那么使用编程语言表示的正则表达式里将需要 4 个反斜杠 <code>\\\\</code>：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。<br>
Python 里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用 <code>r'\\'</code> 表示。同样，匹配一个数字的 <code>\\d</code> 可以写成 <code>r'\d'</code>。使用原生字符串，就不用担心漏写了反斜杠，写出来的表达式也更直观。</li>
</ol>
<h2 id="re库的基本使用">Re 库的基本使用</h2>
<p>正则表达式的表示类型为 raw string 类型 (原生字符串类型), 表示为 <code>r'text'</code>。</p>
<h3 id="re库主要功能函数">Re 库主要功能函数</h3>
<table>
<thead>
<tr class="header">
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> re.search()</td>
<td> 在一个字符串中搜索匹配正则表达式的第一个位置，返回 match 对象</td>
</tr>
<tr class="even">
<td> re.match()</td>
<td> 从一个字符串的开始位置起匹配正则表达式，返回 match 对象</td>
</tr>
<tr class="odd">
<td> re.findall()</td>
<td> 搜索字符串，以列表类型返回全部能匹配的子串</td>
</tr>
<tr class="even">
<td> re.split()</td>
<td> 将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td>
</tr>
<tr class="odd">
<td> re.finditer()</td>
<td> 搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是 match 对象</td>
</tr>
<tr class="even">
<td> re.sub()</td>
<td> 在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td>
</tr>
</tbody>
</table>
<h3 id="search方法">search 方法</h3>
<p><code>re.search(pattern, string, flags = 0)</code><br>
参数 flag 是匹配模式，取值可以使用按位或运算符’|’表示同时生效。<br>
其他方法的参数与 search 类似。sub 方法多一个参数 repl，<code>re.sub(pattern, repl, string, flags = 0)</code>。</p>
<table>
<thead>
<tr class="header">
<th>flag</th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> re.I(IGNORECASE)</td>
<td> 忽略大小写</td>
</tr>
<tr class="even">
<td> re.M(MULTILINE)</td>
<td> 多行模式，改变 '^' 和 '$' 的行为</td>
</tr>
<tr class="odd">
<td> re.S(DOTALL)</td>
<td> 点任意匹配模式，改变 '.' 的行为</td>
</tr>
<tr class="even">
<td> re.L(LOCALE)</td>
<td> 使预定字符类</td>
</tr>
<tr class="odd">
<td> re.U(UNICODE)</td>
<td> 使预定字符类</td>
</tr>
<tr class="even">
<td> re.X(VERBOSE)</td>
<td> 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</td>
</tr>
</tbody>
</table>
<h3 id="match对象">Match 对象</h3>
<p>一次匹配的结果，包含了很多关于此次匹配的信息，可以使用 Match 提供的可读属性或方法来获取这些信息。</p>
<h4 id="属性">属性</h4>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> string</td>
<td> 匹配时使用的文本。</td>
</tr>
<tr class="even">
<td>re</td>
<td> 匹配时使用的 Pattern 对象。</td>
</tr>
<tr class="odd">
<td>pos</td>
<td> 文本中正则表达式开始搜索的索引。值与 Pattern.match () 和 Pattern.seach () 方法的同名参数相同。</td>
</tr>
<tr class="even">
<td>endpos</td>
<td> 文本中正则表达式结束搜索的索引。值与 Pattern.match () 和 Pattern.seach () 方法的同名参数相同。</td>
</tr>
<tr class="odd">
<td>lastindex</td>
<td> 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为 None。</td>
</tr>
<tr class="even">
<td>lastgroup</td>
<td> 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为 None。</td>
</tr>
</tbody>
</table>
<h4 id="方法">方法</h4>
<table>
<colgroup>
<col style="width: 19%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>group([group1, …])</code></td>
<td>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。可以使用编号也可以使用别名。<br>编号 0 代表整个匹配的子串，不填写参数时，返回 <code>group(0)</code>，没有截获字符串的组返回 None，截获了多次的组返回最后一次截获的子串。</td>
</tr>
<tr class="even">
<td><code>groups([default])</code></td>
<td>以元组形式返回全部分组截获的字符串。相当于调用 <code>group(1,2,…last)</code>。<br>default 表示没有截获字符串的组以这个值替代，默认为 None。</td>
</tr>
<tr class="odd">
<td><code>groupdict([default])</code></td>
<td>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default 含义同上。</td>
</tr>
<tr class="even">
<td><code>start([group])</code></td>
<td>返回指定的组截获的子串在 string 中的起始索引（子串第一个字符的索引）。group 默认值为 0。</td>
</tr>
<tr class="odd">
<td><code>end([group])</code></td>
<td>返回指定的组截获的子串在 string 中的结束索引（子串最后一个字符的索引 + 1）。group 默认值为 0。</td>
</tr>
<tr class="even">
<td><code>span([group])</code></td>
<td>返回 <code>(start(group), end(group))</code>。</td>
</tr>
<tr class="odd">
<td><code>expand(template)</code></td>
<td>将匹配到的分组代入 template 中然后返回。template 中可以使用 <code>\id</code> 或 <code>\g&lt;id&gt;</code> 或 <code>\g&lt;name&gt;</code> 引用分组，但不能使用编号 0。<code>\id</code> 与 <code>\g&lt;id&gt;</code> 是等价的，但 <code>\10</code> 将被认为是第 10 个分组，如果你想表达 <code>\1</code> 之后是字符<code>'0'</code>，只能使用 <code>\g&lt;1&gt;0</code>。</td>
</tr>
</tbody>
</table>
<h3 id="pattern对象">Pattern 对象</h3>
<p>Pattern 对象是一个编译好的正则表达式，通过 Pattern 提供的一系列方法可以对文本进行匹配查找。<br>
Pattern 不能直接实例化，必须使用 re.compile () 进行构造。<br>
Pattern 提供了几个可读属性用于获取表达式的相关信息：</p>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> pattern</td>
<td> 编译时用的表达式字符串。</td>
</tr>
<tr class="even">
<td>flags</td>
<td> 编译时用的匹配模式。数字形式。</td>
</tr>
<tr class="odd">
<td>groups</td>
<td> 表达式中分组的数量。</td>
</tr>
<tr class="even">
<td>groupindex</td>
<td> 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。</td>
</tr>
</tbody>
</table>
<p>所以 <code>re.xxx(pattern, string, flags = 0)</code> 可以写做 <code>pattern.xxx(string, flag)</code>。</p>
<h1 id="sqlite库">SQLite 库</h1>
<h2 id="sqlite简介">SQLite 简介</h2>
<ul>
<li>轻量级</li>
<li>速度快</li>
<li>无需部署</li>
<li>没有服务器</li>
<li>很少或不需要进行管理</li>
<li>由于 SQLite 数据库的驱动已经在 Python 里面了，可以直接使用 <code>import sqlite3</code></li>
</ul>
<h2 id="创建数据库">创建数据库</h2>
<p><code>conn = sqlite3.connect("数据库名称.db")</code><br>
如果数据库不存在，那么它就会被创建，最后将返回一个数据库对象。</p>
<h2 id="创建游标对象">创建游标对象</h2>
<p><code>cur = conn.cursor()</code></p>
<h2 id="创建数据库表">创建数据库表</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	cursor.execute(<span class="string">'CREATE TABLE 表名称 (键1 键类型 PRIMARY KEY, 键2 键类型, 键3 键类型, ...)'</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"Table created successfully"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure>
<p>这里 ' 键 i' 为键的名称，其中键 1 为主键，键类型有 TEXT（文本字符串，使用数据库编码 UTF-8、UTF-16BE 或 UTF-16LE 存储），REAL（浮点值，存储为 8 字节的 IEEE 浮点数字），INT（带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中），NULL（空值）。</p>
<h2 id="insert操作">INSERT 操作</h2>
<p>单个插入<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	cursor.execute(<span class="string">'INSERT INTO 表名称 (键1, 键2, 键3, ...) VALUES (值1, 值2, 值3, ...)'</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">'data insert successfully'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure><br>
批量插入<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	data = [(<span class="string">"值11"</span>, <span class="string">"值12"</span>, <span class="string">"值13"</span>, ...), (<span class="string">"值21"</span>, <span class="string">"值22"</span>, <span class="string">"值23"</span>, ...), (<span class="string">"值31"</span>, <span class="string">"值32"</span>, <span class="string">"值33"</span>, ...)]</span><br><span class="line">	cursor.execute(<span class="string">'INSERT INTO 表名称 (?, ?, ?, ...)'</span>, data)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">'data insert successfully'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="update操作">UPDATE 操作</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	cursor.execute(<span class="string">'UPDATE 表名称 SET 键1 = 值1, 键2 = 值2, 键3 = 值3, ... WHERE 键1 = 值1, 键2 = 值2, 键3 = 值3, ...'</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">'data update successfully'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="select操作">SELECT 操作</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	cursor.execute(<span class="string">'SELECT 键1, 键2, 键3, ... FROM 表名称 WHERE 键1 = 值1, 键2 = 值2, 键3 = 值3, ...'</span>)</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">		<span class="built_in">print</span>(row)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="delete操作">DELETE 操作</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	c.execute(<span class="string">"DELETE FROM 表名称 WHERE 键1 = 值1, 键2 = 值2, 键3 = 值3, ..."</span>)</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">		<span class="built_in">print</span>(row)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">	<span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="关闭数据库">关闭数据库</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cursor.close() <span class="comment"># 关闭Cursor</span></span><br><span class="line">conn.commit() <span class="comment"># 提交事务</span></span><br><span class="line">conn.close() <span class="comment"># 关闭Connection</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="将数据库中的数据导出为csv文件">将数据库中的数据导出为 csv 文件：</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">'文件名.db'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">"SELECT name FROM sqlite_master WHERE type = 'table'"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">    tablename = i[<span class="number">0</span>]</span><br><span class="line">    cursor.execute(<span class="string">"SELECT * FROM '{}'"</span>.<span class="built_in">format</span>(tablename))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(tablename + <span class="string">'.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf_8_sig'</span>) <span class="keyword">as</span> csv_file: </span><br><span class="line">        csv_writer = csv.writer(csv_file)</span><br><span class="line">        csv_writer.writerow([j[<span class="number">0</span>] <span class="keyword">for</span> j <span class="keyword">in</span> cursor.description])</span><br><span class="line">        csv_writer.writerows(cursor)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
        <tag>Crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Web 框架 - CherryPy</title>
    <url>/contents/Python-Web%E6%A1%86%E6%9E%B6-CherryPy.html</url>
    <content><![CDATA[<p>CherryPy is a pythonic, object-oriented web framework.<br>
CherryPy allows developers to build web applications in much the same way they would build any other object-oriented Python program. This results in smaller source code developed in less time.<br>
Reference：<a href="http://cherrypy.org">官网</a>；<a href="https://github.com/cherrypy/cherrypy">GitHub</a><br>
<span id="more"></span></p>
<h1 id="安装">安装</h1>
<p>直接执行 <code>$ pip install cherrypy</code>。<br>
也可以从 GitHub 的 CherryPy 获取最新版的源代码并安装：<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ git clone https://github.com/cherrypy/cherrypy</span><br><span class="line">$ cd cherrypy</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></tbody></table></figure><br>
用测试用例检验是否安装成功，直接执行 <code>$ python -m cherrypy.tutorial.tut01_helloworld</code>。<br>
打开页面http://127.0.0.1:8080 或者http://localhost:8080 查看结果。<br>
一旦成功，控制台也会显示log：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ENGINE Listening for SIGHUP.</span><br><span class="line">ENGINE Listening for SIGTERM.</span><br><span class="line">ENGINE Listening for SIGUSR1.</span><br><span class="line">ENGINE Bus STARTING</span><br><span class="line">ENGINE Started monitor thread 'Autoreloader'.</span><br><span class="line">ENGINE Started monitor thread '_TimeoutMonitor'.</span><br><span class="line">ENGINE Serving on http://127.0.0.1:8080</span><br><span class="line">ENGINE Bus STARTED</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="hello-world页面部署">Hello World 页面部署</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(HelloWorld())</span><br></pre></td></tr></tbody></table></figure>
<p>运行此程序后，控制台则会显示：<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ENGINE Listening for SIGHUP.</span><br><span class="line">ENGINE Listening for SIGTERM.</span><br><span class="line">ENGINE Listening for SIGUSR1.</span><br><span class="line">ENGINE Bus STARTING</span><br><span class="line">CherryPy Checker:</span><br><span class="line">The Application mounted at '' has an empty config.</span><br><span class="line"></span><br><span class="line">ENGINE Started monitor thread 'Autoreloader'.</span><br><span class="line">ENGINE Started monitor thread '_TimeoutMonitor'.</span><br><span class="line">ENGINE Serving on http://127.0.0.1:8080</span><br><span class="line">ENGINE Bus STARTED</span><br></pre></td></tr></tbody></table></figure><br>
前三行表示服务器会处理signal；第四行表示服务器的状态，此刻在启动阶段；第五、六行表示你的应用没有特别的配置；第八、九行表示服务器开始了一些内部的功能，倒数第二行表示已经准备好通信并且监听地址127.0.0.1:8080，最后一行表示现在你的应用已经开始运行，可以使用。<br>
这里return为index页面的源码：<br>
- 可以是一般字符串，比如 <code>"Hello world!"</code>，页面直接显示字符串<br>
- 可以是<a href="http://www.w3school.com.cn/html/">HTML</a>格式的字符串，比如<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script type="text/javascript" src="/xxx/xxx/xxx.js"&gt;&lt;/script&gt;</span><br><span class="line">        &lt;title&gt;Write Your WebPage Title Here&lt;/title&gt;</span><br><span class="line">        &lt;link rel="stylesheet" type="text/css" href="/xxx/xxx/xxx.css" /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class="xxx"&gt;</span><br><span class="line">            Hello world!</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">"""</span><br></pre></td></tr></tbody></table></figure><br>
这里使用三对双引号，用来输入多行文本，之中的单号和双引号不用转义，其中的不可见字符比如。<br>
- 可以是HTML文件 <code>open('xxx/xxx/xxx.html')</code><br>
注打开文件的时候可以传递参数<br>
<code>open("xxx.html").read().format(a=a, b=b, c=c, ...)</code>，则HTML文件中 <code>{a:}</code>; <code>{b:}</code>; <code>{c:}</code>; ...来表示相应的字符串。<br>
或者 <code>open("xxx.html").read() % (a, b, c, ...)</code>，HTML文件中 <code>%s</code>;<code>%d</code>;<code>%f</code> 等来表示相应位置的字符串。<br>
原理：<code>open("xxx.html").read()</code> 返回一个string对象，传递参数同格式化输出。<p></p>
<p>用 <code>cherrypy.quickstart()</code> 启动单个应用，此函数至少需要一个参数，第一个必选一般为类名；第二个可选参数为应用访问的基础路径；第三个可选参数为应用配置。<br>
如果要启动多个应用，则用 <code>cherrypy.tree.mount()</code>，此函数的参数和 <code>cherrypy.quickstart()</code> 一样，均为一个应用的类名，一个主机路径，一个配置。举例如下<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cherrypy.tree.mount(A(), <span class="string">'/a'</span>, a_conf)</span><br><span class="line">cherrypy.tree.mount(B(), <span class="string">'/b'</span>, b_conf)</span><br><span class="line"></span><br><span class="line">cherrypy.engine.start()</span><br><span class="line">cherrypy.engine.block()</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="不同的urls对应不同的functions">不同的 URLs 对应不同的 functions</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(StringGenerator())</span><br></pre></td></tr></tbody></table></figure>
<p>运行此程序后，打开 http://localhost:8080 或者 http://localhost:8080/index 则会显示 Helloworld 界面（index 可以省略）。<br>
而打开 http://localhost:8080/generate 则会运行 generate 函数并返回且显示一个 8 位随机字符串。<br>
此外，开发者可以实现一个 default 方法，如果服务器找不到任何对应的方法时，将会调用 default 方法。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(StringGenerator())</span><br></pre></td></tr></tbody></table></figure><br>
运行此程序后，打开http://localhost:8080/xxx 则会运行default函数并返回且显示一个8位随机字符串，这里xxx为任意网址。<br>
注意，default函数必须有两个参数，url会传入用户所访问的网址，即 <code>url=xxx</code><p></p>
<h1 id="通过url传递参数">通过 URL 传递参数</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, length=<span class="number">8</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="built_in">int</span>(length)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(StringGenerator())</span><br></pre></td></tr></tbody></table></figure>
<p>运行此程序后，打开 http://localhost:8080/generate?length=16 ，<br>
则地址栏中的 16 会被从客户端传递到服务器端，作为 generate 的参数 length 的值，其结果是返回且显示一个长度为 16 的随机字符串。<br>
如果直接访问 http://localhost:8080/generate 则参数为缺省值 length=8。<br>
如果并未设置缺省值也没有通过 url 传递参数则会报错。</p>
<h1 id="提交表单">提交表单</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"""&lt;html&gt;</span></span><br><span class="line"><span class="string">          &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">          &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;form method="get" action="generate"&gt;</span></span><br><span class="line"><span class="string">              &lt;input type="text" value="8" name="length" /&gt;</span></span><br><span class="line"><span class="string">              &lt;button type="submit"&gt;Give it now!&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">          &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, length=<span class="number">8</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="built_in">int</span>(length)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(StringGenerator())</span><br></pre></td></tr></tbody></table></figure>
<p>运行此程序后，打开 http://localhost:8080/ ，填写表格并提交。<br>
触发 submit 时候，根据 form 中定义的 action 的名字寻找对应的 function，并将表单元素提交的内容作为 name 属性所对应的参数传递。</p>
<h1 id="session">Session</h1>
<p>一个应用经常需要追踪用户的行为，一个常用的做法是使用 session 暂存数据，并且在客户端服务器通信中保持。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"""&lt;html&gt;</span></span><br><span class="line"><span class="string">          &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">          &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;form method="get" action="generate"&gt;</span></span><br><span class="line"><span class="string">              &lt;input type="text" value="8" name="length" /&gt;</span></span><br><span class="line"><span class="string">              &lt;button type="submit"&gt;Give it now!&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">          &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, length=<span class="number">8</span></span>):</span></span><br><span class="line">        some_string = <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="built_in">int</span>(length)))</span><br><span class="line">        cherrypy.session[<span class="string">'mystring'</span>] = some_string</span><br><span class="line">        <span class="keyword">return</span> some_string</span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cherrypy.session[<span class="string">'mystring'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    conf = {</span><br><span class="line">        <span class="string">'/'</span>: {</span><br><span class="line">            <span class="string">'tools.sessions.on'</span>: <span class="literal">True</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cherrypy.quickstart(StringGenerator(), <span class="string">'/'</span>, conf)</span><br></pre></td></tr></tbody></table></figure><br>
运行此程序后，打开http://localhost:8080/generate 生成一个随机字符串并存入session的'mystring'字段之中。<br>
打开http://localhost:8080/display 展示session中存储的字符串。<br>
CherryPy会存储session的信息在进程的内存中。<br>
注意此时要修改.conf文件。<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[/]</span><br><span class="line">tools.sessions.on = True</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="cookies">Cookies</h1>
<p>CherryPy 使用 Python 模块 Cookie，Cookie.SimpleCookie 对象来处理 cookie<br>
要将 cookie 发送至浏览器，使用 <code>cherrypy.response.cookie[key] = value</code><br>
要提取浏览器的 cookie，使用 <code>cherrypy.request.cookie[key]</code><br>
要删除 cookie（在客户端），必须将 cookie 的过期时间设置为 0：<code>cherrypy.response.cookie[key]['expires'] = 0</code></p>
<h1 id="允许文件上传下载">允许文件上传、下载</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"><span class="keyword">from</span> cherrypy.lib <span class="keyword">import</span> static</span><br><span class="line"></span><br><span class="line">localDir = os.path.dirname(__file__)</span><br><span class="line">absDir = os.path.join(os.getcwd(), localDir)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileDemo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;html&gt;&lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Upload a file&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;form action="upload" method="post" enctype="multipart/form-data"&gt;</span></span><br><span class="line"><span class="string">            filename: &lt;input type="file" name="myFile" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="submit" /&gt;</span></span><br><span class="line"><span class="string">            &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;h2&gt;Download a file&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;a href='download'&gt;This one&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">self, myFile</span>):</span></span><br><span class="line">        out = <span class="string">"""&lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            myFile length: %s&lt;br /&gt;</span></span><br><span class="line"><span class="string">            myFile filename: %s&lt;br /&gt;</span></span><br><span class="line"><span class="string">            myFile mime-type: %s</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;"""</span></span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = myFile.file.read(<span class="number">8192</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            size += <span class="built_in">len</span>(data)</span><br><span class="line">        <span class="keyword">return</span> out % (size, myFile.filename, myFile.content_type)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self</span>):</span></span><br><span class="line">        path = os.path.join(absDir, <span class="string">'pdf_file.pdf'</span>)</span><br><span class="line">        <span class="keyword">return</span> static.serve_file(path, <span class="string">'application/x-download'</span>, <span class="string">'attachment'</span>, os.path.basename(path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(FileDemo())</span><br></pre></td></tr></tbody></table></figure>
<p><strong>上传</strong>：<br>
当客户端上传一个文件到 CherryPy 应用时，CherryPy 将会将文件作为一个参数传给方法（upload (self, myFile)）。<br>
此参数有一个 file 属性，可以用于操作临时传入的文件，如果想要永久的保留文件，则需要用 read () 函数读取 myFile.file 的数据并且写入到某个文件中。<br>
<strong>下载</strong>：<br>
使用响应类型 “application/x-download”，可以告诉浏览器，应该将资源下载到用户的机器上，而不是显示。<br>
<code>serve_file(path, content_type=None, disposition=None, name=None, debug=False)</code> 函数：第一个参数为文件路径；第二个参数为内容类型；第三个参数为 Content-Disposition 信息（Content-Disposition 就是当用户想把请求所得的内容存为一个文件的时候提供一个默认的文件名），如果不为空，则 Content-Disposition header 会被设置为 <code>"&lt;disposition&gt;; filename=&lt;name&gt;"</code>，如果 name 为空，则 name 被设置为文件的 basename。</p>
<h1 id="以流形式处理请求主体">以流形式处理请求主体</h1>
<p>CherryPy 收到 HTTP 请求后，对于底层信心进行处理后将请求传给页面处理部分，这里就会生成请求主体 (response body).<br>
ChereyPy 支持多种类型的请求主体，如字符串、字符串列表或者文件；同样，也可以通过 yield 内容的方式形成 stream。<br>
默认是关闭流输出的，因为这更加安全也更容易处理；如果要开启这个功能，需要对 session 会话有所了解。<br>
一般请求的处理过程中，HTTP 服务器是一次性将整个请求接受、一次性将整个结果返回。<br>
这对于简单的网页或者静态内容比较合适，因为请求、代码等都可以随时改变。<br>
而流输出中程序不是一次性的返回数据，而是返回生成器，再通过生成器不断的以流的形式获取数据。<br>
使用 <code>response.stream = true</code> 并结合 yield，示例如下：<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import os.path</span><br><span class="line">import cherrypy</span><br><span class="line"></span><br><span class="line">class HelloWorld(object):</span><br><span class="line">    @cherrypy.expose</span><br><span class="line">    def index(self):</span><br><span class="line">        yield "Hello "</span><br><span class="line">        yield "world!"</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    conf = {</span><br><span class="line">        '/': {</span><br><span class="line">            'response.stream': True</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cherrypy.quickstart(HelloWorld(), '/', conf)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="调用网站资源">调用网站资源</h1>
<p>网络应用经常会调用一些静态资源，比如 <a href="http://www.w3school.com.cn/js/index.asp">JavaScript</a>，<a href="http://www.w3school.com.cn/css/index.asp">CSS</a> 或 image 等资源。<br>
在网站的根目录下新建文件夹 public，在 public 中可以自己新建文件夹 js，css，image 等子文件夹，并在相应文件夹中存放相应的资源。<br>
在 HTML 调用资源的地方写入：<br>
<code>&lt;script type="text/javascript" src="/static/js/xxx.js"&gt;&lt;/script&gt;</code><br>
<code>&lt;link rel="stylesheet" type="text/css" href="/static/css/xxx.css" /&gt;</code><br>
<code>&lt;img src="/static/image/xxx.jpg" alt="xxx" style="width:123px;height:123px;"&gt;</code><br>
并且修改.conf 文件。<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[/]</span><br><span class="line">tools.staticdir.root = os.path.abspath(os.getcwd())</span><br><span class="line"></span><br><span class="line">[/static]</span><br><span class="line">tools.staticdir.on = True</span><br><span class="line">tools.staticdir.dir = "public"</span><br></pre></td></tr></tbody></table></figure><br>
对于独立文件资源：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[/style.css]</span><br><span class="line">tools.staticfile.on = True</span><br><span class="line">tools.staticfile.filename = filepath</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="rest">REST</h1>
<p>客户端除了浏览器之外，还有其他一些形式比如 python，iOS，Android 等。<br>
RESTful 可以通过一套统一的接口为他们提供服务。<br>
而且对于很多平台来说，不需要有显式的前端，只需要一套提供服务的接口。<br>
REST 用 URL 定位资源，用 HTTP 动词（GET，POST，PUT，DELETE 等）描述操作。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="meta">@cherrypy.expose</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGeneratorWebService</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.tools.accept(<span class="params">media=<span class="string">'text/plain'</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cherrypy.session[<span class="string">'mystring'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">POST</span>(<span class="params">self, length=<span class="number">8</span></span>):</span></span><br><span class="line">        some_string = <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="built_in">int</span>(length)))</span><br><span class="line">        cherrypy.session[<span class="string">'mystring'</span>] = some_string</span><br><span class="line">        <span class="keyword">return</span> some_string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PUT</span>(<span class="params">self, another_string</span>):</span></span><br><span class="line">        cherrypy.session[<span class="string">'mystring'</span>] = another_string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DELETE</span>(<span class="params">self</span>):</span></span><br><span class="line">        cherrypy.session.pop(<span class="string">'mystring'</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    conf = {</span><br><span class="line">        <span class="string">'/'</span>: {</span><br><span class="line">            <span class="string">'request.dispatch'</span>: cherrypy.dispatch.MethodDispatcher(),</span><br><span class="line">            <span class="string">'tools.sessions.on'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'tools.response_headers.on'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'tools.response_headers.headers'</span>: [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)],</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    cherrypy.quickstart(StringGeneratorWebService(), <span class="string">'/'</span>, conf)</span><br></pre></td></tr></tbody></table></figure><br>
运行此程序后，可以使用python的requests库来进行交互。<br>
这里通过@cherrypy.expose装饰器一次性暴露StringGeneratorWebService类的所有方法。<br>
该应用不再是以&lt;URL，函数&gt;匹配的方式进行工作，而是在配置里面创建了cherrypy.dispatch.MethodDispatcher实例，用于自动匹配。<br>
对于get函数强制response的contenttype为text/plain。<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = requests.Session()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.get(<span class="string">'http://127.0.0.1:8080/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">500</span> <span class="comment"># 因为session['mystring']为空，所以产生服务器错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.post(<span class="string">'http://127.0.0.1:8080/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code, r.text</span><br><span class="line">(<span class="number">200</span>, <span class="string">u'04A92138'</span>) <span class="comment"># post提交一个长度为8的随机字符串并存入session中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.get(<span class="string">'http://127.0.0.1:8080/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code, r.text</span><br><span class="line">(<span class="number">200</span>, <span class="string">u'04A92138'</span>) <span class="comment"># get获取session中所存的字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.get(<span class="string">'http://127.0.0.1:8080/'</span>, headers={<span class="string">'Accept'</span>: <span class="string">'application/json'</span>})</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">406</span> <span class="comment"># 因为提出请求，将获取所生成的字符串作为一个JSON格式返回，格式不符所以返回406错误</span></span><br><span class="line"><span class="comment"># 406 Not Acceptable 请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.put(<span class="string">'http://127.0.0.1:8080/'</span>, params={<span class="string">'another_string'</span>: <span class="string">'hello'</span>})</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.get(<span class="string">'http://127.0.0.1:8080/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code, r.text</span><br><span class="line">(<span class="number">200</span>, <span class="string">u'hello'</span>) <span class="comment"># put更新session中所存的字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.delete(<span class="string">'http://127.0.0.1:8080/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.get(<span class="string">'http://127.0.0.1:8080/'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">500</span> <span class="comment"># delete删除session中的字符串，所以产生服务器错误</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="ajax">AJAX</h1>
<p><a href="http://www.w3school.com.cn/ajax/index.asp">AJAX</a> = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。<br>
AJAX 是在不重新加载整个页面的情况下与服务器交换数据并<strong>更新部分</strong>网页的技术。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, os.path</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'''&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">                    &lt;html&gt;</span></span><br><span class="line"><span class="string">                      &lt;head&gt;</span></span><br><span class="line"><span class="string">                        &lt;style&gt;</span></span><br><span class="line"><span class="string">                          #the-string {</span></span><br><span class="line"><span class="string">                            display: none;</span></span><br><span class="line"><span class="string">                          }</span></span><br><span class="line"><span class="string">                        &lt;/style&gt;</span></span><br><span class="line"><span class="string">                        &lt;script src="http://code.jquery.com/jquery-2.0.3.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">                        &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">                          $(document).ready(function() {</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            $("#generate-string").click(function(e) {</span></span><br><span class="line"><span class="string">                              $.ajax({</span></span><br><span class="line"><span class="string">                                type: "POST",</span></span><br><span class="line"><span class="string">                                url: "/generator",</span></span><br><span class="line"><span class="string">                                data: {"length": $("input[name='length']").val()}</span></span><br><span class="line"><span class="string">                              })</span></span><br><span class="line"><span class="string">                              e.preventDefault();</span></span><br><span class="line"><span class="string">                            });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            $("#replace-string").click(function(e) {</span></span><br><span class="line"><span class="string">                              $.ajax({</span></span><br><span class="line"><span class="string">                                type: "PUT",</span></span><br><span class="line"><span class="string">                                url: "/generator",</span></span><br><span class="line"><span class="string">                                data: {"another_string": $("#the-string input").val()}</span></span><br><span class="line"><span class="string">                              })</span></span><br><span class="line"><span class="string">                              .done(function() {</span></span><br><span class="line"><span class="string">                                alert("Replaced!");</span></span><br><span class="line"><span class="string">                              });</span></span><br><span class="line"><span class="string">                              e.preventDefault();</span></span><br><span class="line"><span class="string">                            });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            $("#delete-string").click(function(e) {</span></span><br><span class="line"><span class="string">                              $.ajax({</span></span><br><span class="line"><span class="string">                                type: "DELETE",</span></span><br><span class="line"><span class="string">                                url: "/generator"</span></span><br><span class="line"><span class="string">                              })</span></span><br><span class="line"><span class="string">                              .done(function() {</span></span><br><span class="line"><span class="string">                                $("#the-string").hide();</span></span><br><span class="line"><span class="string">                              });</span></span><br><span class="line"><span class="string">                              e.preventDefault();</span></span><br><span class="line"><span class="string">                            });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                          });</span></span><br><span class="line"><span class="string">                        &lt;/script&gt;</span></span><br><span class="line"><span class="string">                      &lt;/head&gt;</span></span><br><span class="line"><span class="string">                      &lt;body&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type="text" value="8" name="length"/&gt;</span></span><br><span class="line"><span class="string">                        &lt;button id="generate-string"&gt;Give it now!&lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;div id="the-string"&gt;</span></span><br><span class="line"><span class="string">                          &lt;input type="text" /&gt;</span></span><br><span class="line"><span class="string">                          &lt;button id="replace-string"&gt;Replace&lt;/button&gt;</span></span><br><span class="line"><span class="string">                          &lt;button id="delete-string"&gt;Delete it&lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                      &lt;/body&gt;</span></span><br><span class="line"><span class="string">                    &lt;/html&gt;</span></span><br><span class="line"><span class="string">                    '''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@cherrypy.expose</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGeneratorWebService</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.tools.accept(<span class="params">media=<span class="string">'text/plain'</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cherrypy.session[<span class="string">'mystring'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">POST</span>(<span class="params">self, length=<span class="number">8</span></span>):</span></span><br><span class="line">        some_string = <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="built_in">int</span>(length)))</span><br><span class="line">        cherrypy.session[<span class="string">'mystring'</span>] = some_string</span><br><span class="line">        <span class="keyword">return</span> some_string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PUT</span>(<span class="params">self, another_string</span>):</span></span><br><span class="line">        cherrypy.session[<span class="string">'mystring'</span>] = another_string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DELETE</span>(<span class="params">self</span>):</span></span><br><span class="line">        cherrypy.session.pop(<span class="string">'mystring'</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    conf = {</span><br><span class="line">        <span class="string">'/'</span>: {</span><br><span class="line">            <span class="string">'tools.sessions.on'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'tools.staticdir.root'</span>: os.path.abspath(os.getcwd())</span><br><span class="line">        },</span><br><span class="line">        <span class="string">'/generator'</span>: {</span><br><span class="line">            <span class="string">'request.dispatch'</span>: cherrypy.dispatch.MethodDispatcher(),</span><br><span class="line">            <span class="string">'tools.response_headers.on'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'tools.response_headers.headers'</span>: [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)],</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line">    webapp = StringGenerator()</span><br><span class="line">    webapp.generator = StringGeneratorWebService()</span><br><span class="line">    cherrypy.quickstart(webapp, <span class="string">'/'</span>, conf)</span><br></pre></td></tr></tbody></table></figure><br>
运行此程序后，可以使用按钮触发ajax结合<a href="http://www.w3school.com.cn/jquery/index.asp">jQuery</a>来进行交互。<br>
其中：<br>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#generate-string"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">  $.ajax({</span><br><span class="line">    <span class="attr">type</span>: <span class="string">"POST"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/generator"</span>,</span><br><span class="line">    <span class="attr">data</span>: {<span class="string">"length"</span>: $(<span class="string">"input[name='length']"</span>).val()}</span><br><span class="line">  })</span><br><span class="line">   .done(<span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>{</span><br><span class="line">    $(<span class="string">"#the-string"</span>).show();</span><br><span class="line">    $(<span class="string">"#the-string input"</span>).val(string);</span><br><span class="line">  });</span><br><span class="line">  e.preventDefault();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br>
表示当id为generate-string的按钮被点击后，执行POST命令，目标url是generator，以<a href="http://www.w3school.com.cn/json/index.asp">JSON</a>方式传参数length，length的值为名字等于length的input组件的值。完成POST后服务器返回string，并且将id为the-string的组件显示出来，将其input组件的值赋值为string。<br>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#replace-string"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">  $.ajax({</span><br><span class="line">    <span class="attr">type</span>: <span class="string">"PUT"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/generator"</span>,</span><br><span class="line">    <span class="attr">data</span>: {<span class="string">"another_string"</span>: $(<span class="string">"#the-string input"</span>).val()}</span><br><span class="line">  })</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">"Replaced!"</span>);</span><br><span class="line">  });</span><br><span class="line">  e.preventDefault();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br>
表示当id为replace-string的按钮被点击后，执行PUT命令，目标url是generator，以JSON方式传参数another_string，another_string的值为id为the-string的组件中的input组件的值。完成PUT后弹出警告框"Replaced"。<br>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#delete-string"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{</span><br><span class="line">  $.ajax({</span><br><span class="line">    <span class="attr">type</span>: <span class="string">"DELETE"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"/generator"</span></span><br><span class="line">  })</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    $(<span class="string">"#the-string"</span>).hide();</span><br><span class="line">  });</span><br><span class="line">  e.preventDefault();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><br>
表示当id为delete-string的按钮被点击后，执行DELETE命令，目标url是generator，完成DELETE后将id为the-string的组件隐藏。<p></p>
<h1 id="数据库存储">数据库存储</h1>
<p>这里以 SQLite 数据库为例，演示如何将网页数据存入<a href="http://www.w3school.com.cn/sql/index.asp">数据库</a>。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, os.path</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line">DB_STRING = <span class="string">"my.db"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'''&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">                    &lt;html&gt;</span></span><br><span class="line"><span class="string">                      &lt;head&gt;</span></span><br><span class="line"><span class="string">                        &lt;style&gt;</span></span><br><span class="line"><span class="string">                          #the-string {</span></span><br><span class="line"><span class="string">                            display: none;</span></span><br><span class="line"><span class="string">                          }</span></span><br><span class="line"><span class="string">                        &lt;/style&gt;</span></span><br><span class="line"><span class="string">                        &lt;script src="http://code.jquery.com/jquery-2.0.3.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">                        &lt;script type="text/javascript"&gt;</span></span><br><span class="line"><span class="string">                          $(document).ready(function() {</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            $("#generate-string").click(function(e) {</span></span><br><span class="line"><span class="string">                              $.ajax({</span></span><br><span class="line"><span class="string">                                type: "POST",</span></span><br><span class="line"><span class="string">                                url: "/generator",</span></span><br><span class="line"><span class="string">                                data: {"length": $("input[name='length']").val()}</span></span><br><span class="line"><span class="string">                              })</span></span><br><span class="line"><span class="string">                              e.preventDefault();</span></span><br><span class="line"><span class="string">                            });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            $("#replace-string").click(function(e) {</span></span><br><span class="line"><span class="string">                              $.ajax({</span></span><br><span class="line"><span class="string">                                type: "PUT",</span></span><br><span class="line"><span class="string">                                url: "/generator",</span></span><br><span class="line"><span class="string">                                data: {"another_string": $("#the-string input").val()}</span></span><br><span class="line"><span class="string">                              })</span></span><br><span class="line"><span class="string">                              .done(function() {</span></span><br><span class="line"><span class="string">                                alert("Replaced!");</span></span><br><span class="line"><span class="string">                              });</span></span><br><span class="line"><span class="string">                              e.preventDefault();</span></span><br><span class="line"><span class="string">                            });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            $("#delete-string").click(function(e) {</span></span><br><span class="line"><span class="string">                              $.ajax({</span></span><br><span class="line"><span class="string">                                type: "DELETE",</span></span><br><span class="line"><span class="string">                                url: "/generator"</span></span><br><span class="line"><span class="string">                              })</span></span><br><span class="line"><span class="string">                              .done(function() {</span></span><br><span class="line"><span class="string">                                $("#the-string").hide();</span></span><br><span class="line"><span class="string">                              });</span></span><br><span class="line"><span class="string">                              e.preventDefault();</span></span><br><span class="line"><span class="string">                            });</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                          });</span></span><br><span class="line"><span class="string">                        &lt;/script&gt;</span></span><br><span class="line"><span class="string">                      &lt;/head&gt;</span></span><br><span class="line"><span class="string">                      &lt;body&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type="text" value="8" name="length"/&gt;</span></span><br><span class="line"><span class="string">                        &lt;button id="generate-string"&gt;Give it now!&lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;div id="the-string"&gt;</span></span><br><span class="line"><span class="string">                          &lt;input type="text" /&gt;</span></span><br><span class="line"><span class="string">                          &lt;button id="replace-string"&gt;Replace&lt;/button&gt;</span></span><br><span class="line"><span class="string">                          &lt;button id="delete-string"&gt;Delete it&lt;/button&gt;</span></span><br><span class="line"><span class="string">                        &lt;/div&gt;</span></span><br><span class="line"><span class="string">                      &lt;/body&gt;</span></span><br><span class="line"><span class="string">                    &lt;/html&gt;</span></span><br><span class="line"><span class="string">                    '''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@cherrypy.expose</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGeneratorWebService</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cherrypy.tools.accept(<span class="params">media=<span class="string">'text/plain'</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(DB_STRING) <span class="keyword">as</span> c:</span><br><span class="line">            cherrypy.session[<span class="string">'ts'</span>] = time.time()</span><br><span class="line">            r = c.execute(<span class="string">"SELECT value FROM user_string WHERE session_id=?"</span>,</span><br><span class="line">                          [cherrypy.session.<span class="built_in">id</span>])</span><br><span class="line">            <span class="keyword">return</span> r.fetchone()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">POST</span>(<span class="params">self, length=<span class="number">8</span></span>):</span></span><br><span class="line">        some_string = <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="built_in">int</span>(length)))</span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(DB_STRING) <span class="keyword">as</span> c:</span><br><span class="line">            cherrypy.session[<span class="string">'ts'</span>] = time.time()</span><br><span class="line">            c.execute(<span class="string">"INSERT INTO user_string VALUES (?, ?)"</span>,</span><br><span class="line">                      [cherrypy.session.<span class="built_in">id</span>, some_string])</span><br><span class="line">        <span class="keyword">return</span> some_string</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PUT</span>(<span class="params">self, another_string</span>):</span></span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(DB_STRING) <span class="keyword">as</span> c:</span><br><span class="line">            cherrypy.session[<span class="string">'ts'</span>] = time.time()</span><br><span class="line">            c.execute(<span class="string">"UPDATE user_string SET value=? WHERE session_id=?"</span>,</span><br><span class="line">                      [another_string, cherrypy.session.<span class="built_in">id</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DELETE</span>(<span class="params">self</span>):</span></span><br><span class="line">        cherrypy.session.pop(<span class="string">'ts'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">with</span> sqlite3.connect(DB_STRING) <span class="keyword">as</span> c:</span><br><span class="line">            c.execute(<span class="string">"DELETE FROM user_string WHERE session_id=?"</span>,</span><br><span class="line">                      [cherrypy.session.<span class="built_in">id</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_database</span>():</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create the `user_string` table in the database</span></span><br><span class="line"><span class="string">    on server startup</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(DB_STRING) <span class="keyword">as</span> con:</span><br><span class="line">        con.execute(<span class="string">"CREATE TABLE user_string (session_id, value)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanup_database</span>():</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Destroy the `user_string` table from the database</span></span><br><span class="line"><span class="string">    on server shutdown.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> sqlite3.connect(DB_STRING) <span class="keyword">as</span> con:</span><br><span class="line">        con.execute(<span class="string">"DROP TABLE user_string"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    conf = {</span><br><span class="line">        <span class="string">'/'</span>: {</span><br><span class="line">            <span class="string">'tools.sessions.on'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'tools.staticdir.root'</span>: os.path.abspath(os.getcwd())</span><br><span class="line">        },</span><br><span class="line">        <span class="string">'/generator'</span>: {</span><br><span class="line">            <span class="string">'request.dispatch'</span>: cherrypy.dispatch.MethodDispatcher(),</span><br><span class="line">            <span class="string">'tools.response_headers.on'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'tools.response_headers.headers'</span>: [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)],</span><br><span class="line">        },</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cherrypy.engine.subscribe(<span class="string">'start'</span>, setup_database)</span><br><span class="line">    cherrypy.engine.subscribe(<span class="string">'stop'</span>, cleanup_database)</span><br><span class="line"></span><br><span class="line">    webapp = StringGenerator()</span><br><span class="line">    webapp.generator = StringGeneratorWebService()</span><br><span class="line">    cherrypy.quickstart(webapp, <span class="string">'/'</span>, conf)</span><br></pre></td></tr></tbody></table></figure><br>
运行此程序后，可以使用按钮触发ajax来进行交互。<br>
大部分功能与上一个例子相同，这里增加了将session中的数据存入数据库的功能。<br>
其中 <code>cherrypy.engine.subscribe('start', setup_database)</code> 和 <code>cherrypy.engine.subscribe('stop', cleanup_database)</code> 表示setup_database函数和cleanup_database函数被注册到服务器，当服务器启动和停止时调用。<br>
setup_database函数新建一个名为user_string的表格，cleanup_database函数删除user_string表格。<p></p>
<h1 id="日志记录">日志记录</h1>
<p>CherryPy 会记录所有的 requests 和协议错误。<br>
应用也可以自己配置日志记录功能，调用 <code>cherrypy.log()</code>。<br>
如果在配置中配置以下内容，则所有的 log 会被记录到文件：<br>
- <code>log.access_file</code> 记录 requests 情况<br>
- <code>log.error_file</code> 记录其他的情况</p>
<p>修改.conf 文件。<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[/]</span><br><span class="line">log.screen = False, #用于取消console的logging</span><br><span class="line">log.access_file = "access.log",</span><br><span class="line">log.error_file = "error.log",</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="服务器配置">服务器配置</h1>
<h2 id="全局配置global">全局配置 (global)</h2>
<p>HTTP 配置<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">server.socket_host = "127.0.0.1"</span><br><span class="line">server.socket_port = 8080</span><br><span class="line">server.thread_pool = 10</span><br></pre></td></tr></tbody></table></figure><br>
HTTPS配置<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">server.socket_host = "0.0.0.0"</span><br><span class="line">server.socket_port = 443</span><br><span class="line">server.thread_pool = 10</span><br><span class="line">server.ssl_module = 'builtin'</span><br><span class="line">server.ssl_certificate = "cert.pem"</span><br><span class="line">server.ssl_private_key = "privkey.pem"</span><br></pre></td></tr></tbody></table></figure><br>
可以用OpenSSL工具生成自签名的证书，方法如下：<p></p>
<ol type="1">
<li><code>$ openssl genrsa -out privkey.pem 2048 #用于生成私钥</code></li>
<li>修改 OpenSSL.cnf 配置文件（最好不修改此目录下的文件，而是拷贝一份至你的生成证书的目录）</li>
<li>找到 [v3_ca] 在其下方加入并保存：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">subjectAltName = "IP:server的ip"</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = digitalSignature, keyEncipherment</span><br></pre></td></tr></tbody></table></figure></li>
<li><code>$ openssl req -new -x509 -days 365 -key privkey.pem -out cert.pem -config openssl.cnf #用于生成证书</code><br>
有效期为 365 天，按照提示写入个人信息（国、省、市、机构、组织、server 的 ip、邮箱）。</li>
<li>cert.pem 的后缀改为 cer 就可以作为证书使用了。</li>
</ol>
<h2 id="网站gzip">网站 Gzip</h2>
<p>Gzip 开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。<br>
修改.conf 文件开启压缩功能。<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[/]</span><br><span class="line">tools.gzip.on: True</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="其他配置">其他配置</h2>
<p>也可以将某些字符串存入配置文件，供各种函数访问。<br>
修改.conf 文件。<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[abc]</span><br><span class="line">def = "ghi"</span><br></pre></td></tr></tbody></table></figure><br>
在函数中通过 <code>jklmn = cherrypy.request.app.config['abc']['def']</code> 调用，此时jklmn变量被赋值"ghi"，str类型。<p></p>
<h1 id="处理json">处理 JSON</h1>
<p>CherryPy 内置支持了对 JSON 编码的请求或响应的解码支持。</p>
<h2 id="解码-request">解码 request</h2>
<p>自动解码 JSON 请求的内容：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@cherrypy.expose</span></span><br><span class="line"><span class="meta">@cherrypy.tools.json_in()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">    data = cherrypy.request.json</span><br></pre></td></tr></tbody></table></figure><br>
附加在请求的JSON属性包含解码内容。<p></p>
<h2 id="编码response">编码 response</h2>
<p>使用 JSON 自动编码 response 的内容：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@cherrypy.expose</span></span><br><span class="line"><span class="meta">@cherrypy.tools.json_out()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> {<span class="string">'key'</span>: <span class="string">'value'</span>}</span><br></pre></td></tr></tbody></table></figure><br>
CherryPy将使用JSON对你的页面处理程序返回的任何内容进行编码，并非所有类型的对象都可以被编码。<p></p>
<h1 id="认证">认证</h1>
<p>CherryPy 提供了两种非常简单的身份验证机制。他们最常见的触发方式是触发浏览器弹出窗口向用户询问他们的名字和密码。</p>
<h2 id="basic">Basic</h2>
<p>Basic 身份验证是最简单的验证方式，但它不是一个安全的身份验证，因为用户的凭证被嵌入到请求中。不建议使用它，除非你在 SSL 或封闭的网络中运行。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cherrypy.lib <span class="keyword">import</span> auth_basic</span><br><span class="line"></span><br><span class="line">USERS = {<span class="string">'id'</span>: <span class="string">'password'</span>}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_password</span>(<span class="params">realm, username, password</span>):</span></span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">in</span> USERS <span class="keyword">and</span> USERS[username] == password:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">conf = {</span><br><span class="line">   <span class="string">'/protected/area'</span>: {</span><br><span class="line">       <span class="string">'tools.auth_basic.on'</span>: <span class="literal">True</span>,</span><br><span class="line">       <span class="string">'tools.auth_basic.realm'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">       <span class="string">'tools.auth_basic.checkpassword'</span>: validate_password</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cherrypy.quickstart(myapp, <span class="string">'/'</span>, conf)</span><br></pre></td></tr></tbody></table></figure><br>
必须提供一个将有CherryPy调用的函数，解码从请求中传递的用户名和密码。<br>
该功能可以从任何来源读取数据：文件，数据库，内存等。<p></p>
<h2 id="digest">Digest</h2>
<p>Digest 认证的不同之处在于，凭证没有携带在请求中，因此比 Basic 更安全。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cherrypy.lib <span class="keyword">import</span> auth_digest</span><br><span class="line"></span><br><span class="line">USERS = {<span class="string">'id'</span>: <span class="string">'password'</span>}</span><br><span class="line"></span><br><span class="line">conf = {</span><br><span class="line">   <span class="string">'/protected/area'</span>: {</span><br><span class="line">        <span class="string">'tools.auth_digest.on'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'tools.auth_digest.realm'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'tools.auth_digest.get_ha1'</span>: auth_digest.get_ha1_dict_plain(USERS),</span><br><span class="line">        <span class="string">'tools.auth_digest.key'</span>: <span class="string">'a565c27146791cfb'</span></span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cherrypy.quickstart(myapp, <span class="string">'/'</span>, conf)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="网站图标">网站图标</h1>
<p>CherryPy 提供自己的红色 cherrypy 作为默认图标。可以用以下方式提供自己的图标：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">   @cherrypy.expose</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(HelloWorld(), <span class="string">'/'</span>,</span><br><span class="line">        {</span><br><span class="line">            <span class="string">'/favicon.ico'</span>:</span><br><span class="line">            {</span><br><span class="line">                <span class="string">'tools.staticfile.on'</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">'tools.staticfile.filename'</span>: <span class="string">'/path/to/myfavicon.ico'</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure><br>
也可以使用文件进行配置：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[/favicon.ico]</span><br><span class="line">tools.staticfile.on: True</span><br><span class="line">tools.staticfile.filename: "/path/to/myfavicon.ico"</span><br></pre></td></tr></tbody></table></figure><br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">   @cherrypy.expose</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(HelloWorld(), <span class="string">'/'</span>, app.conf)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="设置页面别名">设置页面别名</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringGenerator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @cherrypy.expose(<span class="params">[<span class="string">'generer'</span>, <span class="string">'generar'</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, length=<span class="number">8</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(random.sample(string.hexdigits, <span class="built_in">int</span>(length)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cherrypy.quickstart(StringGenerator())</span><br></pre></td></tr></tbody></table></figure>
<p>其中 <code>@cherrypy.expose(['generer', 'generar'])</code> 设置了别名，所以下面三个页面效果是一样：/generate；/generer (French)；/generar (Spanish)</p>
<h1 id="请求超时">请求超时</h1>
<p>CherryPy 包含 3 个时间相关的属性：<br>
- response.time：当请求开始的时候，记录 time.time ()<br>
- response.timeout：请求可以运行的时间，默认 300s<br>
- response.timed_out：是否激活超时机制 (默认 False)</p>
<p>可以通过 response.check_timeout 来检查是否超时，在激活超时机制的情况下，一旦超时则触发 TimeoutError 异常。<br>
默认会通过 cherrypy.engine.timeout_monitor 监控所有请求是否超时，如果要关闭：<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">engine.timeout_monitor.on: False</span><br></pre></td></tr></tbody></table></figure><br>
或者<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cherrypy.engine.timeout_monitor.unsubscribe()</span><br></pre></td></tr></tbody></table></figure><br>
默认超时监控是1分钟1次，改成1小时1次：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">engine.timeout_monitor.frequency: 60 * 60</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="信号处理">信号处理</h1>
<p>对于信号处理，有一个 cherrypy.engine.signal_handler 插件，它是被 cherrypy.quickstart () 自动调用的。<br>
如果要手动进行信号处理，则可以调用 <code>tree.mount()</code> 或 <code>engine.start()</code> 或 <code>engine.block()</code>。<br>
记得启动引擎前调用 <code>engine.signals.subscribe()</code>。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
        <tag>Web Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>主流视频网站弹幕下载</title>
    <url>/contents/%E4%B8%BB%E6%B5%81%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E5%BC%B9%E5%B9%95%E4%B8%8B%E8%BD%BD.html</url>
    <content><![CDATA[<p>如今主流的视频网站（如 bilibili，腾讯，爱奇艺，优酷，芒果 TV 等）都支持了弹幕，本文介绍了如何下载视频弹幕（.xml）文件并转化为字幕（.ass）文件，支持本地播放。<br>
<span id="more"></span></p>
<h1 id="xml格式弹幕">XML 格式弹幕</h1>
<p>B 站是最早的一批弹幕网站之一，且比较成熟，弹幕可以直接以 XML 格式下载，非常方便，所以本文下载的弹幕均以 B 站的 XML 弹幕格式的简化为标准格式。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">d</span> <span class="attr">p</span>=<span class="string">"5,1,20,16777215"</span>&gt;</span>这是一条弹幕<span class="tag">&lt;/<span class="name">d</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>每一条弹幕的属性 p 的格式为：</p>
<ol type="1">
<li>弹幕发送时间，相对于视频开始时间，以秒为单位</li>
<li>弹幕类型，1-3 为滚动弹幕、4 为底部、5 为顶端、6 为逆向、7 为精确、8 为高级</li>
<li>字体大小，25 为中，18 为小，Bilibili 只有这 2 个字号，本地 20 字号比较合适（电脑分辨率是 1920*1080）</li>
<li>弹幕颜色，RGB 颜色转为十进制后的值，16777215 为白色</li>
<li>弹幕发送时间，Unix 时间戳格式</li>
<li>弹幕池，0 为普通，1 为字幕，2 为特殊</li>
<li>发送人的 id</li>
<li> 弹幕 id</li>
</ol>
<p>一般只需要使用前 4 项即可。</p>
<p>Python 中利用 request 库来爬取网页结果：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span>(<span class="params">url</span>):</span></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>)</span><br><span class="line">    response = urllib.request.urlopen(req).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>生成 XML 弹幕文件时需要检查是否有非法 XML 字符，并可以设置弹幕黑名单：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">filename = <span class="string">'XML/'</span> + title + <span class="string">'.xml'</span></span><br><span class="line">contents = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">    fout.write(<span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'</span>)</span><br><span class="line">    fout.write(<span class="string">'&lt;i&gt;\n'</span>)</span><br><span class="line">    illegal = <span class="literal">False</span> <span class="comment">#标志是否有非法XML字符</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> [<span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&amp;'</span>, <span class="string">'\u0000'</span>, <span class="string">'\b'</span>]:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> j[<span class="string">'content'</span>]:</span><br><span class="line">            illegal = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> illegal:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    black_list = [<span class="string">''</span>] <span class="comment">#列出弹幕黑名单</span></span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> content <span class="keyword">for</span> word <span class="keyword">in</span> black_list):</span><br><span class="line">        contents.append(content)</span><br><span class="line">        fout.write(<span class="string">'&lt;d p="'</span> + <span class="built_in">str</span>(timepoint) + <span class="string">','</span> + <span class="built_in">str</span>(ct) +<span class="string">','</span> + <span class="built_in">str</span>(size) + <span class="string">','</span> + <span class="built_in">str</span>(color) + <span class="string">'"&gt;'</span> + content + <span class="string">'&lt;/d&gt;\n'</span>)</span><br><span class="line">    fout.write(<span class="string">'&lt;/i&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>网上很多相关工具（如<a href="https://tiansh.github.io/us-danmaku/bilibili/">弹幕 ASS 转换工具</a>等）可以将 XML 弹幕文件转换成 ASS 字幕文件。<br>
基于弹幕 ASS 转换工具个性化设置：<br>
</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置项，适合视频2倍速播放</span></span><br><span class="line"><span class="keyword">var</span> config = {</span><br><span class="line">  <span class="string">'playResX'</span>: <span class="number">1440</span>,          <span class="comment">// 屏幕分辨率宽（像素）</span></span><br><span class="line">  <span class="string">'playResY'</span>: <span class="number">810</span>,           <span class="comment">// 屏幕分辨率高（像素）</span></span><br><span class="line">  <span class="string">'fontlist'</span>: [              <span class="comment">// 字形（会自动选择最前面一个可用的）</span></span><br><span class="line">    <span class="string">'黑体'</span>,</span><br><span class="line">    <span class="string">'Microsoft YaHei UI'</span>,</span><br><span class="line">    <span class="string">'Microsoft YaHei'</span>,</span><br><span class="line">    <span class="string">'文泉驿正黑'</span>,</span><br><span class="line">    <span class="string">'STHeitiSC'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'font_size'</span>: <span class="number">1.2</span>,          <span class="comment">// 字号（比例）</span></span><br><span class="line">  <span class="string">'r2ltime'</span>: <span class="number">20</span>,             <span class="comment">// 右到左弹幕持续时间（秒）</span></span><br><span class="line">  <span class="string">'fixtime'</span>: <span class="number">5</span>,              <span class="comment">// 固定弹幕持续时间（秒）</span></span><br><span class="line">  <span class="string">'opacity'</span>: <span class="number">0.8</span>,            <span class="comment">// 不透明度（比例）</span></span><br><span class="line">  <span class="string">'space'</span>: <span class="number">0</span>,                <span class="comment">// 弹幕间隔的最小水平距离（像素）</span></span><br><span class="line">  <span class="string">'max_delay'</span>: <span class="number">6</span>,            <span class="comment">// 最多允许延迟几秒出现弹幕</span></span><br><span class="line">  <span class="string">'bottom'</span>: <span class="number">0</span>,               <span class="comment">// 底端给字幕保留的空间（像素）</span></span><br><span class="line">  <span class="string">'use_canvas'</span>: <span class="literal">true</span>,        <span class="comment">// 是否使用canvas计算文本宽度（布尔值，Linux下的火狐默认否，其他默认是，Firefox bug #561361）</span></span><br><span class="line">  <span class="string">'debug'</span>: <span class="literal">false</span>,            <span class="comment">// 打印调试信息</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="腾讯视频弹幕下载">腾讯视频弹幕下载</h1>
<p>打开一个腾讯视频 PC 网页端，其源码中的 VIDEO_INFO 字段：<br>
</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VIDEO_INFO = {</span><br><span class="line">    <span class="string">"publish_date"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"leading_actor_id"</span>: [<span class="string">""</span>],</span><br><span class="line">    <span class="string">"duration"</span>: ,</span><br><span class="line">    <span class="string">"guests"</span>: ,</span><br><span class="line">    <span class="string">"race_teams_id"</span>: ,</span><br><span class="line">    <span class="string">"type_name"</span>: ,</span><br><span class="line">    <span class="string">"tag"</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"singer_id"</span>: ,</span><br><span class="line">    <span class="string">"episode"</span>: ,</span><br><span class="line">    <span class="string">"race_stars_id"</span>: ,</span><br><span class="line">    <span class="string">"srcsite_name"</span>: ,</span><br><span class="line">    <span class="string">"type"</span>: ,</span><br><span class="line">    <span class="string">"title"</span>: ,</span><br><span class="line">    <span class="string">"leading_actor"</span>: [<span class="string">""</span>],</span><br><span class="line">    <span class="string">"show_type"</span>: ,</span><br><span class="line">    <span class="string">"singer_name"</span>: ,</span><br><span class="line">    <span class="string">"danmu_status"</span>: ,</span><br><span class="line">    <span class="string">"second_title"</span>: ,</span><br><span class="line">    <span class="string">"positive_trailer"</span>: ,</span><br><span class="line">    <span class="string">"athlete"</span>: ,</span><br><span class="line">    <span class="string">"mv_stars"</span>: ,</span><br><span class="line">    <span class="string">"trytime_second"</span>: ,</span><br><span class="line">    <span class="string">"c_full"</span>: ,</span><br><span class="line">    <span class="string">"update_flag"</span>: ,</span><br><span class="line">    <span class="string">"first_recommand"</span>: ,</span><br><span class="line">    <span class="string">"desc"</span>: ,</span><br><span class="line">    <span class="string">"pioneer_tag"</span>: ,</span><br><span class="line">    <span class="string">"begin_time"</span>: ,</span><br><span class="line">    <span class="string">"upload_qq"</span>: ,</span><br><span class="line">    <span class="string">"category_map"</span>: [, <span class="string">""</span>],</span><br><span class="line">    <span class="string">"is_trailer"</span>: ,</span><br><span class="line">    <span class="string">"stars_name"</span>: ,</span><br><span class="line">    <span class="string">"pic_640_360"</span>: ,</span><br><span class="line">    <span class="string">"c_title_segment"</span>: ,</span><br><span class="line">    <span class="string">"guests_id"</span>: ,</span><br><span class="line">    <span class="string">"presenter_id"</span>: ,</span><br><span class="line">    <span class="string">"upload_src"</span>: ,</span><br><span class="line">    <span class="string">"athlete_id"</span>: ,</span><br><span class="line">    <span class="string">"sec_recommand"</span>: ,</span><br><span class="line">    <span class="string">"costar_id"</span>: ,</span><br><span class="line">    <span class="string">"relative_stars_id"</span>: ,</span><br><span class="line">    <span class="string">"relative_stars"</span>: ,</span><br><span class="line">    <span class="string">"drm"</span>: ,</span><br><span class="line">    <span class="string">"modify_time"</span>: ,</span><br><span class="line">    <span class="string">"tail_time"</span>: ,</span><br><span class="line">    <span class="string">"valid_tag_id"</span>: ,</span><br><span class="line">    <span class="string">"vid"</span>: ,</span><br><span class="line">    <span class="string">"pic_url"</span>: ,</span><br><span class="line">    <span class="string">"costar"</span>: ,</span><br><span class="line">    <span class="string">"race_teams_name"</span>: ,</span><br><span class="line">    <span class="string">"c_title_output"</span>: ,</span><br><span class="line">    <span class="string">"director_id"</span>: [<span class="string">""</span>],</span><br><span class="line">    <span class="string">"title_en"</span>: ,</span><br><span class="line">    <span class="string">"stars"</span>: ,</span><br><span class="line">    <span class="string">"danmu"</span>: ,</span><br><span class="line">    <span class="string">"mv_stars_id"</span>: ,</span><br><span class="line">    <span class="string">"playright"</span>: [<span class="string">""</span>],</span><br><span class="line">    <span class="string">"presenter"</span>: ,</span><br><span class="line">    <span class="string">"race_stars"</span>: ,</span><br><span class="line">    <span class="string">"view_all_count"</span>: ,</span><br><span class="line">    <span class="string">"c_tags_flag"</span>: ,</span><br><span class="line">    <span class="string">"c_has_adv_danmu"</span>: ,</span><br><span class="line">    <span class="string">"head_time"</span>: ,</span><br><span class="line">    <span class="string">"state"</span>: ,</span><br><span class="line">    <span class="string">"copyright_id"</span>: ,</span><br><span class="line">    <span class="string">"pic160x90"</span>: ,</span><br><span class="line">    <span class="string">"director"</span>: [<span class="string">""</span>],</span><br><span class="line">    <span class="string">"famous_id"</span>: ,</span><br><span class="line">    <span class="string">"pioneer_tag_ids"</span>: ,</span><br><span class="line">    <span class="string">"trytime"</span>: ,</span><br><span class="line">    <span class="string">"famous_actor"</span>: ,</span><br><span class="line">    <span class="string">"video_checkup_time"</span>: ,</span><br><span class="line">    <span class="string">""</span>: ,</span><br><span class="line">    <span class="string">"isFull"</span>: </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><br>
其中所需的字段是duration、title、vid。<br>
接下来通过vid找到targetid：<code>http://bullet.video.qq.com/fcgi-bin/target/regist?otype=json&amp;vid=(%vid%)</code>，打开此链接得到：<br>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">QZOutputJson = {</span><br><span class="line">    <span class="string">"danmukey"</span>:<span class="string">"bubble_flag=&amp;targetid=&amp;vid=&amp;type="</span>,</span><br><span class="line">    <span class="string">"display"</span>:,</span><br><span class="line">    <span class="string">"is_has_adv"</span>:,</span><br><span class="line">    <span class="string">"is_has_bubble"</span>:,</span><br><span class="line">    <span class="string">"open"</span>:,</span><br><span class="line">    <span class="string">"returncode"</span>:,</span><br><span class="line">    <span class="string">"returnmsg"</span>:,</span><br><span class="line">    <span class="string">"targetid"</span>:,</span><br><span class="line">    <span class="string">"userstatus"</span>:</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
然后就可以通过targetid得到弹幕：<code>http://mfm.video.qq.com/danmu?timestamp=(%timestamp%)&amp;target_id=(%targetid%)</code>，其中timestamp从0开始并且以30为增量，打开此链接得到（只截取了第一条弹幕）：<br>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"err_code"</span>:,</span><br><span class="line">    <span class="attr">"err_msg"</span>:,</span><br><span class="line">    <span class="attr">"peroid"</span>:,</span><br><span class="line">    <span class="attr">"target_id"</span>:,</span><br><span class="line">    <span class="attr">"count"</span>:,</span><br><span class="line">    <span class="attr">"tol_up"</span>:,</span><br><span class="line">    <span class="attr">"single_max_count"</span>:,</span><br><span class="line">    <span class="attr">"session_key"</span>:,</span><br><span class="line">    <span class="attr">"comments"</span>:[</span><br><span class="line">        {</span><br><span class="line">            <span class="attr">"commentid"</span>:,</span><br><span class="line">            <span class="attr">"content"</span>:,</span><br><span class="line">            <span class="attr">"upcount"</span>:,</span><br><span class="line">            <span class="attr">"isfriend"</span>:,</span><br><span class="line">            <span class="attr">"isop"</span>:,</span><br><span class="line">            <span class="attr">"isself"</span>:,</span><br><span class="line">            <span class="attr">"timepoint"</span>:,</span><br><span class="line">            <span class="attr">"headurl"</span>:,</span><br><span class="line">            <span class="attr">"opername"</span>:,</span><br><span class="line">            <span class="attr">"bb_bcolor"</span>:,</span><br><span class="line">            <span class="attr">"bb_head"</span>:,</span><br><span class="line">            <span class="attr">"bb_level"</span>:,</span><br><span class="line">            <span class="attr">"bb_id"</span>:,</span><br><span class="line">            <span class="attr">"rich_type"</span>:,</span><br><span class="line">            <span class="attr">"uservip_degree"</span>:,</span><br><span class="line">            <span class="attr">"content_style"</span>: <span class="string">"{\"color\":\"\",\"position\":}"</span></span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
其中timepoint、content_style中的color、content字段可以组成xml弹幕格式。<br>
全部python代码为：<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding=<span class="string">'utf-8'</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tencent_danmu</span>(<span class="params">url</span>):</span></span><br><span class="line">    video_info = json.loads(<span class="built_in">str</span>([s <span class="keyword">for</span> s <span class="keyword">in</span> getHTMLText(url).split(<span class="string">'\n'</span>) <span class="keyword">if</span> <span class="string">'VIDEO_INFO'</span> <span class="keyword">in</span> <span class="built_in">str</span>(s)]).strip(<span class="string">'[\'var VIDEO_INFO = '</span>).strip(<span class="string">'\']'</span>))</span><br><span class="line">    duration = video_info[<span class="string">'duration'</span>]</span><br><span class="line">    title = video_info[<span class="string">'title'</span>]</span><br><span class="line">    vid = video_info[<span class="string">'vid'</span>]</span><br><span class="line">    targetid = json.loads(getHTMLText(<span class="string">'http://bullet.video.qq.com/fcgi-bin/target/regist?otype=json&amp;vid='</span> + vid).strip(<span class="string">'QZOutputJson='</span>).strip(<span class="string">';'</span>))[<span class="string">'targetid'</span>]</span><br><span class="line">    filename = <span class="string">'XML/'</span> + title + <span class="string">'.xml'</span></span><br><span class="line">    contents = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'\n'</span> + title + <span class="string">': '</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(<span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'</span>)</span><br><span class="line">        fout.write(<span class="string">'&lt;i&gt;\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(duration) // <span class="number">30</span> + <span class="number">1</span>):</span><br><span class="line">            timestamp = i*<span class="number">30</span></span><br><span class="line">            <span class="built_in">print</span>(i/<span class="number">2</span>, end=<span class="string">'min, '</span>)</span><br><span class="line">            response = getHTMLText(<span class="string">'http://mfm.video.qq.com/danmu?timestamp='</span> + <span class="built_in">str</span>(timestamp) + <span class="string">'&amp;target_id='</span> + targetid)</span><br><span class="line">            <span class="keyword">if</span> response == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                danmu = json.loads(response, strict=<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> danmu[<span class="string">'comments'</span>]:</span><br><span class="line">                    illegal = <span class="literal">False</span> <span class="comment">#标志是否有非法XML字符</span></span><br><span class="line">                    <span class="keyword">for</span> char <span class="keyword">in</span> [<span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&amp;'</span>, <span class="string">'\u0000'</span>, <span class="string">'\b'</span>]:</span><br><span class="line">                        <span class="keyword">if</span> char <span class="keyword">in</span> j[<span class="string">'content'</span>]:</span><br><span class="line">                            illegal = <span class="literal">True</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> illegal:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    timepoint = j[<span class="string">'timepoint'</span>]  <span class="comment">#弹幕发送时间</span></span><br><span class="line">                    ct = <span class="number">1</span>              <span class="comment">#弹幕样式</span></span><br><span class="line">                    size = <span class="number">20</span>           <span class="comment">#字体大小</span></span><br><span class="line">                    <span class="comment"># 获取颜色</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'color'</span> <span class="keyword">in</span> j[<span class="string">'content_style'</span>]:</span><br><span class="line">                        content_style = json.loads(j[<span class="string">'content_style'</span>])</span><br><span class="line">                        color = <span class="built_in">int</span>(content_style[<span class="string">'color'</span>], <span class="number">16</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        color = <span class="number">16777215</span></span><br><span class="line">                    content = j[<span class="string">'content'</span>] <span class="comment">#弹幕内容</span></span><br><span class="line">                    black_list = [<span class="string">'word'</span>]</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">':'</span> <span class="keyword">in</span> content:</span><br><span class="line">                        content = content.split(<span class="string">':'</span>)[<span class="number">1</span>].strip(<span class="string">'&nbsp;'</span>).strip(<span class="string">' '</span>)</span><br><span class="line">                    <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> content <span class="keyword">for</span> word <span class="keyword">in</span> black_list):</span><br><span class="line">                        contents.append(content.strip(<span class="string">' '</span>).strip(<span class="string">'&nbsp;'</span>))</span><br><span class="line">                        fout.write(<span class="string">'&lt;d p="'</span> + <span class="built_in">str</span>(timepoint) + <span class="string">','</span> + <span class="built_in">str</span>(ct) +<span class="string">','</span> + <span class="built_in">str</span>(size) + <span class="string">','</span> + <span class="built_in">str</span>(color) + <span class="string">'"&gt;'</span> + content + <span class="string">'&lt;/d&gt;\n'</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        fout.write(<span class="string">'&lt;/i&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="爱奇艺视频弹幕下载">爱奇艺视频弹幕下载</h1>
<p>打开一个爱奇艺视频 PC 网页端，其源码中的 page-info 字段：<br>
</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"albumId"</span>:,</span><br><span class="line">    <span class="attr">"albumName"</span>:,</span><br><span class="line">    <span class="attr">"imageUrl"</span>:,</span><br><span class="line">    <span class="attr">"tvId"</span>:,</span><br><span class="line">    <span class="attr">"vid"</span>:,</span><br><span class="line">    <span class="attr">"cid"</span>:,</span><br><span class="line">    <span class="attr">"isSource"</span>:,</span><br><span class="line">    <span class="attr">"contentType"</span>:,</span><br><span class="line">    <span class="attr">"vType"</span>:,</span><br><span class="line">    <span class="attr">"pType"</span>:,</span><br><span class="line">    <span class="attr">"pageNo"</span>:,</span><br><span class="line">    <span class="attr">"pageType"</span>:,</span><br><span class="line">    <span class="attr">"userId"</span>:,</span><br><span class="line">    <span class="attr">"pageUrl"</span>:,</span><br><span class="line">    <span class="attr">"tvName"</span>:,</span><br><span class="line">    <span class="attr">"isfeizhengpian"</span>:,</span><br><span class="line">    <span class="attr">"categoryName"</span>:,</span><br><span class="line">    <span class="attr">"categories"</span>:,</span><br><span class="line">    <span class="attr">"downloadAllowed"</span>:,</span><br><span class="line">    <span class="attr">"publicLevel"</span>:,</span><br><span class="line">    <span class="attr">"payMark"</span>:,</span><br><span class="line">    <span class="attr">"payMarkUrl"</span>:,</span><br><span class="line">    <span class="attr">"vipType"</span>:[</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"qiyiProduced"</span>:,</span><br><span class="line">    <span class="attr">"exclusive"</span>:,</span><br><span class="line">    <span class="attr">"tvYear"</span>:,</span><br><span class="line">    <span class="attr">"duration"</span>:<span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"wallId"</span>:,</span><br><span class="line">    <span class="attr">"rewardAllowed"</span>:,</span><br><span class="line">    <span class="attr">"commentAllowed"</span>:,</span><br><span class="line">    <span class="attr">"heatShowTypes"</span>:,</span><br><span class="line">    <span class="attr">"videoTemplate"</span>:,</span><br><span class="line">    <span class="attr">"issueTime"</span>:</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
其中所需的字段是duration、tvName、albumId、tvId、cid。<br>
duration由‘时：分：秒’格式转为秒：<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">duration_str = page_info[<span class="string">'duration'</span>].split(<span class="string">':'</span>)</span><br><span class="line">duration = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(duration_str)-<span class="number">1</span>):</span><br><span class="line">    duration = (duration + <span class="built_in">int</span>(duration_str[i])) * <span class="number">60</span></span><br><span class="line">duration = duration + <span class="built_in">int</span>(duration_str[-<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure><br>
然后就可以通过albumId、tvId、cid得到弹幕：<code>http://cmts.iqiyi.com/bullet/(%tvId[-4:-2]%)/(%tvId[-2:]%)/(%tvId%)_300_(%page%).z?rn=0.(%16位随机数%)&amp;business=danmu&amp;is_iqiyi=true&amp;is_video_page=true&amp;tvid=(%tvid%)&amp;albumid=(%albumid%)&amp;categoryid=(%cid%)&amp;qypid=01010021010000000000</code>，其中tvId需要分割出倒数4-3位和倒数2-1位，page从1开始并且以1为增量，打开此链接得到(%tvId%)_300_(%page%).z的文件，这个文件是压缩的字节流需要解压。<br>
Python中利用zlib库，<code>dec = zlib.decompressobj(32 + zlib.MAX_WBITS)</code> 和 <code>b = dec.decompress('z文件').decode("utf-8")</code> 得到XML格式的弹幕（只截取了第一条弹幕）：<br>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">danmu</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">data</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">int</span>&gt;</span><span class="tag">&lt;/<span class="name">int</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">bulletInfo</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">contentId</span>&gt;</span><span class="tag">&lt;/<span class="name">contentId</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">content</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">showTime</span>&gt;</span>1<span class="tag">&lt;/<span class="name">showTime</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">color</span>&gt;</span><span class="tag">&lt;/<span class="name">color</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">opacity</span>&gt;</span><span class="tag">&lt;/<span class="name">opacity</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">position</span>&gt;</span><span class="tag">&lt;/<span class="name">position</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">background</span>&gt;</span><span class="tag">&lt;/<span class="name">background</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">contentType</span>&gt;</span><span class="tag">&lt;/<span class="name">contentType</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">isReply</span>&gt;</span><span class="tag">&lt;/<span class="name">isReply</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">likeCount</span>&gt;</span><span class="tag">&lt;/<span class="name">likeCount</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">plusCount</span>&gt;</span><span class="tag">&lt;/<span class="name">plusCount</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">dissCount</span>&gt;</span><span class="tag">&lt;/<span class="name">dissCount</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">userInfo</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">senderAvatar</span>&gt;</span><span class="tag">&lt;/<span class="name">senderAvatar</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">uid</span>&gt;</span><span class="tag">&lt;/<span class="name">uid</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">udid</span>&gt;</span><span class="tag">&lt;/<span class="name">udid</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;/<span class="name">userInfo</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">bulletInfo</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">data</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">sum</span>&gt;</span><span class="tag">&lt;/<span class="name">sum</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">validSum</span>&gt;</span><span class="tag">&lt;/<span class="name">validSum</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">duration</span>&gt;</span><span class="tag">&lt;/<span class="name">duration</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">ts</span>&gt;</span><span class="tag">&lt;/<span class="name">ts</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">danmu</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br>
其中showTime、color、content字段可以组成xml弹幕格式（color需要从16进制转换成10进制）。<br>
全部python代码为：<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url, encode</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        <span class="keyword">if</span> encode == <span class="string">'utf-8'</span>:</span><br><span class="line">            r.encoding=<span class="string">'utf-8'</span></span><br><span class="line">            <span class="keyword">return</span> r.text</span><br><span class="line">        <span class="keyword">elif</span> encode == <span class="string">'byte'</span>:</span><br><span class="line">            <span class="keyword">return</span> r.content</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iqiyi_danmu</span>(<span class="params">url</span>):</span></span><br><span class="line">    page_info = json.loads(re.search(<span class="string">r'page-info=\'(.*)\'( *):video-info'</span>, getHTMLText(url, <span class="string">'utf-8'</span>)).group(<span class="number">1</span>))</span><br><span class="line">    duration_str = page_info[<span class="string">'duration'</span>].split(<span class="string">':'</span>)</span><br><span class="line">    duration = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(duration_str)-<span class="number">1</span>):</span><br><span class="line">        duration = (duration + <span class="built_in">int</span>(duration_str[i])) * <span class="number">60</span></span><br><span class="line">    duration = duration + <span class="built_in">int</span>(duration_str[-<span class="number">1</span>])</span><br><span class="line">    title = page_info[<span class="string">'tvName'</span>]</span><br><span class="line">    albumid = page_info[<span class="string">'albumId'</span>]</span><br><span class="line">    tvid = page_info[<span class="string">'tvId'</span>]</span><br><span class="line">    categoryid = page_info[<span class="string">'cid'</span>]</span><br><span class="line">    page = duration // (<span class="number">60</span> * <span class="number">5</span>) + <span class="number">1</span></span><br><span class="line">    filename = <span class="string">'XML/'</span> + title + <span class="string">'.xml'</span></span><br><span class="line">    contents = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(<span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'</span>)</span><br><span class="line">        fout.write(<span class="string">'&lt;i&gt;\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(duration // (<span class="number">60</span> * <span class="number">5</span>) + <span class="number">1</span>):</span><br><span class="line">            dec = zlib.decompressobj(<span class="number">32</span> + zlib.MAX_WBITS)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                b = dec.decompress(getHTMLText(<span class="string">'http://cmts.iqiyi.com/bullet/'</span> + <span class="built_in">str</span>(tvid)[-<span class="number">4</span>:-<span class="number">2</span>] + <span class="string">'/'</span> + <span class="built_in">str</span>(tvid)[-<span class="number">2</span>:] + <span class="string">'/'</span> + <span class="built_in">str</span>(tvid) + <span class="string">'_300_'</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">'.z?rn=0.'</span> + <span class="string">''</span>.join([<span class="string">'%s'</span> % randint(<span class="number">0</span>, <span class="number">9</span>) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>)]) + <span class="string">'&amp;business=danmu&amp;is_iqiyi=true&amp;is_video_page=true&amp;tvid='</span> + <span class="built_in">str</span>(tvid) + <span class="string">'&amp;albumid='</span> + <span class="built_in">str</span>(albumid) + <span class="string">'&amp;categoryid='</span> + <span class="built_in">str</span>(categoryid) + <span class="string">'&amp;qypid=01010021010000000000'</span>, <span class="string">'byte'</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'page: '</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">print</span>(<span class="string">'page not found: '</span> + <span class="built_in">str</span>(i)))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                root = ET.fromstring(b.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> bulletInfo <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">'bulletInfo'</span>):</span><br><span class="line">                timepoint = bulletInfo[<span class="number">3</span>].text      <span class="comment">#弹幕发送时间</span></span><br><span class="line">                ct = <span class="number">1</span>                              <span class="comment">#弹幕样式</span></span><br><span class="line">                size = <span class="number">20</span>                           <span class="comment">#字体大小</span></span><br><span class="line">                color = <span class="built_in">int</span>(bulletInfo[<span class="number">5</span>].text, <span class="number">16</span>) <span class="comment">#颜色</span></span><br><span class="line">                content = bulletInfo[<span class="number">1</span>].text        <span class="comment">#弹幕内容</span></span><br><span class="line">                black_list = [<span class="string">'word'</span>]</span><br><span class="line">                <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> content <span class="keyword">for</span> word <span class="keyword">in</span> black_list):</span><br><span class="line">                    contents.append(content)</span><br><span class="line">                    fout.write(<span class="string">'&lt;d p="'</span> + <span class="built_in">str</span>(timepoint) + <span class="string">','</span> + <span class="built_in">str</span>(ct) +<span class="string">','</span> + <span class="built_in">str</span>(size) + <span class="string">','</span> + <span class="built_in">str</span>(color) + <span class="string">'"&gt;'</span> + content + <span class="string">'&lt;/d&gt;\n'</span>)</span><br><span class="line">        fout.write(<span class="string">'&lt;/i&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="优酷视频弹幕下载">优酷视频弹幕下载</h1>
<p>打开一个优酷视频 PC 网页端，其源码中的 window.PageConfig 字段：<br>
</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.PageConfig = {</span><br><span class="line">    <span class="attr">transfer_mode</span>: ,</span><br><span class="line">    isDRM: ,</span><br><span class="line">    videoCategoryId: ,</span><br><span class="line">    isSimple: ,</span><br><span class="line">    videoId: ,</span><br><span class="line">    newVersion: ,</span><br><span class="line">    isDebug: ,</span><br><span class="line">    pid: ,</span><br><span class="line">    homeHost: ,</span><br><span class="line">    youku_homeurl: ,</span><br><span class="line">    catId: ,</span><br><span class="line">    playmode: ,</span><br><span class="line">    videoOwner: ,</span><br><span class="line">    videoOwner_en: ,</span><br><span class="line">    videoId2: ,</span><br><span class="line">    currentEncodeVid: ,</span><br><span class="line">    catName: ,</span><br><span class="line">    seconds: ,</span><br><span class="line">    bullet: ,</span><br><span class="line">    transfer: ,</span><br><span class="line">    panorama: ,</span><br><span class="line">    folderId: ,</span><br><span class="line">    fpos: ,</span><br><span class="line">    forder: ,</span><br><span class="line">    ftotalpos: ,</span><br><span class="line">    showid_en: ,</span><br><span class="line">    showid: ,</span><br><span class="line">    cp: ,</span><br><span class="line">    paid: ,</span><br><span class="line">    showtype: ,</span><br><span class="line">    tabs: ,</span><br><span class="line">    singerId: ,</span><br><span class="line">    loadinglogo: ,</span><br><span class="line">    lottery_open_sidetool: ,</span><br><span class="line">    lottery_id_sidetool: ,</span><br><span class="line">    lottery_sidetool: ,</span><br><span class="line">    page: {</span><br><span class="line">        <span class="attr">type</span>: ,</span><br><span class="line">        isdatetype: ,</span><br><span class="line">        year: ,</span><br><span class="line">        firstMon: ,</span><br><span class="line">        lastMon: ,</span><br><span class="line">        currMon: ,</span><br><span class="line">        episodeLast: ,</span><br><span class="line">        parentvideoid: ,</span><br><span class="line">        compeleted:</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">copytoclip</span>: ,</span><br><span class="line">    playerUrl: </span><br><span class="line">};</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"&amp;ct=c&amp;cs=&amp;td=&amp;s=&amp;v=&amp;u=&amp;paid=&amp;tt="</span>;</span><br></pre></td></tr></tbody></table></figure><br>
其中所需的字段是seconds、tt、videoId。<br>
然后就可以通过videoId得到弹幕：<code>https://service.danmu.youku.com/list?mat=(%mat%)&amp;ct=1001&amp;iid=(%videoId%)</code>，其中mat从0开始并且以1为增量，打开此链接得到（只截取了第一条弹幕）：<br>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"count"</span>: ,</span><br><span class="line">    <span class="attr">"filtered"</span>: ,</span><br><span class="line">    <span class="attr">"result"</span>: [{</span><br><span class="line">        <span class="attr">"aid"</span>: ,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"createtime"</span>: ,</span><br><span class="line">        <span class="attr">"ct"</span>: ,</span><br><span class="line">        <span class="attr">"extFields"</span>: {</span><br><span class="line">            <span class="attr">"voteUp"</span>: </span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"id"</span>: ,</span><br><span class="line">        <span class="attr">"iid"</span>: ,</span><br><span class="line">        <span class="attr">"ipaddr"</span>: ,</span><br><span class="line">        <span class="attr">"level"</span>: ,</span><br><span class="line">        <span class="attr">"lid"</span>: ,</span><br><span class="line">        <span class="attr">"mat"</span>: ,</span><br><span class="line">        <span class="attr">"ouid"</span>: ,</span><br><span class="line">        <span class="attr">"playat"</span>: ,</span><br><span class="line">        <span class="attr">"propertis"</span>: <span class="string">"{\"pos\":,\"size\":,\"effect\":,\"color\":,\"dmfid\":}"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: ,</span><br><span class="line">        <span class="attr">"type"</span>: ,</span><br><span class="line">        <span class="attr">"uid"</span>: ,</span><br><span class="line">        <span class="attr">"ver"</span>: </span><br><span class="line">    }],</span><br><span class="line">    <span class="attr">"scm"</span>: <span class="string">"0"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
其中playat、propertis中的color、content字段可以组成xml弹幕格式。<br>
全部python代码为：<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span>(<span class="params">url</span>):</span></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>)</span><br><span class="line">    response = urllib.request.urlopen(req).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_youku_danmu</span>(<span class="params">url</span>):</span></span><br><span class="line">    res = get_response(url)</span><br><span class="line">    title = re.search(<span class="string">r'&lt;title&gt;(.*)&lt;/title&gt;'</span>, res).group(<span class="number">1</span>).split(<span class="string">'—'</span>)[<span class="number">0</span>]</span><br><span class="line">    iid = re.search(<span class="string">r'videoId: \'(\d*)\''</span>, res).group(<span class="number">1</span>)</span><br><span class="line">    duration = <span class="built_in">float</span>(re.search(<span class="string">r'seconds: \'(.*)\','</span>, res).group(<span class="number">1</span>))</span><br><span class="line">    filename = <span class="string">'XML/'</span> + title.split(<span class="string">'集 '</span>)[<span class="number">0</span>] + <span class="string">'.xml'</span></span><br><span class="line">    contents = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(<span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'</span>)</span><br><span class="line">        fout.write(<span class="string">'&lt;i&gt;\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> mat <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(duration) // <span class="number">60</span> + <span class="number">1</span>):</span><br><span class="line">            response = get_response(<span class="string">'https://service.danmu.youku.com/list?mat='</span> + <span class="built_in">str</span>(mat) + <span class="string">'&amp;ct=1001&amp;iid='</span> + iid)</span><br><span class="line">            danmu = json.loads(response)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(mat) + <span class="string">'\tresult:'</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(danmu[<span class="string">'result'</span>])))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(danmu[<span class="string">'result'</span>])):</span><br><span class="line">                illegal = <span class="literal">False</span> <span class="comment">#标志是否有非法XML字符</span></span><br><span class="line">                <span class="keyword">for</span> char <span class="keyword">in</span> [<span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&amp;'</span>, <span class="string">'\u0000'</span>, <span class="string">'\b'</span>]:</span><br><span class="line">                    <span class="keyword">if</span> char <span class="keyword">in</span> danmu[<span class="string">'result'</span>][i][<span class="string">'content'</span>]:</span><br><span class="line">                        illegal = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> illegal:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                playat = danmu[<span class="string">'result'</span>][i][<span class="string">'playat'</span>]/<span class="number">1000</span>  <span class="comment">#弹幕发送时间</span></span><br><span class="line">                ct = <span class="number">1</span>      <span class="comment">#弹幕样式</span></span><br><span class="line">                size = <span class="number">20</span>   <span class="comment">#字体大小</span></span><br><span class="line">                <span class="comment"># 获取颜色</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'color'</span> <span class="keyword">in</span> danmu[<span class="string">'result'</span>][i][<span class="string">'propertis'</span>]:</span><br><span class="line">                    propertis = json.loads(danmu[<span class="string">'result'</span>][i][<span class="string">'propertis'</span>])</span><br><span class="line">                    color = propertis[<span class="string">'color'</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    color = <span class="number">16777215</span></span><br><span class="line">                content = danmu[<span class="string">'result'</span>][i][<span class="string">'content'</span>] <span class="comment">#弹幕内容</span></span><br><span class="line">                black_list = [<span class="string">'word'</span>]</span><br><span class="line">                <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> content <span class="keyword">for</span> word <span class="keyword">in</span> black_list):</span><br><span class="line">                	contents.append(content)</span><br><span class="line">                	fout.write(<span class="string">'&lt;d p="'</span> + <span class="built_in">str</span>(playat) + <span class="string">','</span> + <span class="built_in">str</span>(ct) +<span class="string">','</span> + <span class="built_in">str</span>(size) + <span class="string">','</span> + <span class="built_in">str</span>(color) + <span class="string">'"&gt;'</span> + content + <span class="string">'&lt;/d&gt;\n'</span>)</span><br><span class="line">        fout.write(<span class="string">'&lt;/i&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="芒果视频弹幕下载">芒果视频弹幕下载</h1>
<p>打开一个芒果视频 PC 网页端，其网址（以 <code>https://www.mgtv.com/b/9015/4828668.html</code> 为例）中以 <code>/</code> 分割，倒数第二位是 cid，倒数第一位是 vid。<br>
从源码中 <code>&lt;title&gt;霸王别姬 - 视频在线观看 - 霸王别姬 - 芒果TV&lt;/title&gt;</code> 可获得 title。<br>
然后就可以通过 cid 和 vid 得到弹幕：<code>https://galaxy.bz.mgtv.com/rdbarrage?vid=(%vid%)&amp;cid=(%cid%)&amp;time=(%time%)</code>，其中 time 从 0 开始并且下一个 time 的值可从弹幕中得到，打开此链接得到（只截取了第一条弹幕）：<br>
</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"status"</span>:,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"操作成功"</span>,</span><br><span class="line">    <span class="attr">"seq"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="attr">"data"</span>:{</span><br><span class="line">        <span class="attr">"next"</span>:,</span><br><span class="line">        <span class="attr">"interval"</span>:,</span><br><span class="line">        <span class="attr">"items"</span>:[</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"id"</span>:,</span><br><span class="line">                <span class="attr">"type"</span>:,</span><br><span class="line">                <span class="attr">"uid"</span>:,</span><br><span class="line">                <span class="attr">"content"</span>:,</span><br><span class="line">                <span class="attr">"time"</span>:</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
其中time、content字段可以组成xml弹幕格式。<br>
全部python代码为：<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span>(<span class="params">url</span>):</span></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>)</span><br><span class="line">    response = urllib.request.urlopen(req).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mangguo_danmu</span>(<span class="params">url</span>):</span></span><br><span class="line">    cid = url.split(<span class="string">'/'</span>)[<span class="number">4</span>]</span><br><span class="line">    vid = url.split(<span class="string">'/'</span>)[<span class="number">5</span>].strip(<span class="string">'.html'</span>)</span><br><span class="line">    video_info = json.loads(get_response(<span class="string">'https://pcweb.api.mgtv.com/video/info?vid=8244411&amp;cid=335811'</span>))</span><br><span class="line">    title = video_info[<span class="string">'data'</span>][<span class="string">'info'</span>][<span class="string">'videoName'</span>]</span><br><span class="line">    filename = <span class="string">'XML/'</span> + title + <span class="string">'.xml'</span></span><br><span class="line">    contents = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(<span class="string">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n'</span>)</span><br><span class="line">        fout.write(<span class="string">'&lt;i&gt;\n'</span>)</span><br><span class="line">        time = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'https://galaxy.bz.mgtv.com/rdbarrage?version=2.0.0&amp;vid='</span> + vid + <span class="string">'&amp;cid='</span> + cid + <span class="string">'&amp;time='</span> + <span class="built_in">str</span>(time))</span><br><span class="line">            danmu = json.loads(get_response(<span class="string">'https://galaxy.bz.mgtv.com/rdbarrage?version=2.0.0&amp;vid='</span> + vid + <span class="string">'&amp;cid='</span> + cid + <span class="string">'&amp;time='</span> + <span class="built_in">str</span>(time)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">str</span>(time))</span><br><span class="line">            <span class="keyword">if</span> danmu[<span class="string">'data'</span>][<span class="string">'items'</span>] == <span class="literal">None</span>:</span><br><span class="line">            	<span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> danmu[<span class="string">'data'</span>][<span class="string">'items'</span>]:</span><br><span class="line">                illegal = <span class="literal">False</span> <span class="comment">#标志是否有非法XML字符</span></span><br><span class="line">                <span class="keyword">for</span> char <span class="keyword">in</span> [<span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&amp;'</span>, <span class="string">'\u0000'</span>, <span class="string">'\b'</span>]:</span><br><span class="line">                    <span class="keyword">if</span> char <span class="keyword">in</span> j[<span class="string">'content'</span>]:</span><br><span class="line">                        illegal = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> illegal:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                timepoint = j[<span class="string">'time'</span>]/<span class="number">1000</span>  <span class="comment">#弹幕发送时间</span></span><br><span class="line">                ct = <span class="number">1</span>                      <span class="comment">#弹幕样式</span></span><br><span class="line">                size = <span class="number">20</span>                   <span class="comment">#字体大小</span></span><br><span class="line">                color = <span class="number">16777215</span>            <span class="comment">#弹幕颜色</span></span><br><span class="line">                content = j[<span class="string">'content'</span>]         <span class="comment">#弹幕内容</span></span><br><span class="line">                black_list = [<span class="string">'word'</span>]</span><br><span class="line">                <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="built_in">all</span>(word <span class="keyword">not</span> <span class="keyword">in</span> content <span class="keyword">for</span> word <span class="keyword">in</span> black_list):</span><br><span class="line">                    contents.append(content)</span><br><span class="line">                    fout.write(<span class="string">'&lt;d p="'</span> + <span class="built_in">str</span>(timepoint) + <span class="string">','</span> + <span class="built_in">str</span>(ct) +<span class="string">','</span> + <span class="built_in">str</span>(size) + <span class="string">','</span> + <span class="built_in">str</span>(color) + <span class="string">'"&gt;'</span> + content + <span class="string">'&lt;/d&gt;\n'</span>)</span><br><span class="line">            time = danmu[<span class="string">'data'</span>][<span class="string">'next'</span>]</span><br><span class="line">        fout.write(<span class="string">'&lt;/i&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="视频下载">视频下载</h1>
<p><a href="https://github.com/soimort/you-get">You-Get</a> 是一个命令行程序，提供便利的方式来下载网络上的媒体信息。<br>
you-get 的功用:<br>
1. 下载流行网站的音频、视频 (<a href="https://github.com/soimort/you-get/wiki/中文说明#支持网站">查看完整支持列表</a>)<br>
2. 在媒体播放器中观看在线视频，脱离浏览器与广告<br>
3. 下载喜欢的网页上的图片<br>
4. 下载任何非 HTML 内容，例如二进制文件</p>
<p>you-get 主要在 linux 等开源平台上运行，由于家用电脑大多为 windows 系统，安装方法如下：</p>
<h2 id="下载相关安装包">下载相关安装包</h2>
<p>以下是必要依赖，需要单独安装，除非于 Windows 下使用预包装包:<br>
<a href="https://www.python.org/downloads/">Python 3</a><br>
<a href="https://www.ffmpeg.org/">FFmpeg</a> 或者 [Libav] https://libav.org/</p>
<ol type="1">
<li><p>通过 pip 安装<br>
you-get 的官方版本通过 <a href="https://pypi.python.org/pypi/you-get">PyPI</a> 分发，可从 PyPI 镜像中通过 <a href="https://en.wikipedia.org/wiki/Pip_(package_manager)">pip</a> 包管理器安装。务必使用版本 3 的 pip:<br>
<code>$ pip3 install you-get</code></p></li>
<li><p>Git clone<br>
<code>$ git clone git://github.com/soimort/you-get.git</code><br>
将源码解压到任意目录即可</p></li>
</ol>
<p>升级<br>
考虑到 you-get 安装方法的差异，请使用:<br>
<code>$ pip3 install --upgrade you-get</code><br>
或下载最新更新:<br>
<code>$ you-get https://github.com/soimort/you-get/archive/master.zip</code></p>
<h2 id="使用you-get">使用 you-get</h2>
<p>进入解压文件夹 you-get-develop 下，在该目录下打开 Windows Powershell。<br>
<img src="/images/%E4%B8%BB%E6%B5%81%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E5%BC%B9%E5%B9%95%E4%B8%8B%E8%BD%BD/Windows" class="" title="Powershell.png 710 330"><br>
输入 <code>python you-get 视频网址</code>即可使用下载功能（视频保存在 you-get-develop 目录下）。</p>
<h1 id="腾讯视频下载">腾讯视频下载</h1>
<p>打开腾讯视频播放页，打开控制台（F12），Network 选项下搜索 "ts.m3u8" 字段，找到类似下面的网址：<br>
<code>https://apd-(32位字符串).v.smtcdns.com/moviets.tc.qq.com/(44位字符串)/uwMROfz0r5xgoaQXGdGnC2df64hwtZlCglRDKOjEZ_qQW-eC/(160位字符串)/(vid).(数字).ts.m3u8?ver=4</code></p>
<p>此 m3u8 文件存有 ts 索引相对地址：<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-VERSION:</span><br><span class="line">#EXT-X-MEDIA-SEQUENCE:</span><br><span class="line">#EXT-X-TARGETDURATION:</span><br><span class="line">#EXT-X-PLAYLIST-TYPE:</span><br><span class="line">#EXTINF:(时长),</span><br><span class="line">0(#)_(vid).(数字).(#).ts?index=(数字)&amp;start=(数字)&amp;end=(数字)&amp;brs=(数字)&amp;bre=(数字)&amp;ver=4</span><br></pre></td></tr></tbody></table></figure><br>
可以利用如下代码下载并且合并ts文件：<br>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span>(<span class="params">url</span>):</span></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>)</span><br><span class="line">    response = urllib.request.urlopen(req).read()</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">url_m3u8 = <span class="string">'(m3u8地址)'</span></span><br><span class="line">EXTM3U = get_response(url_m3u8).decode(<span class="string">'utf-8'</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">ts = [i <span class="keyword">for</span> i <span class="keyword">in</span> EXTM3U <span class="keyword">if</span> <span class="string">'ts'</span> <span class="keyword">in</span> i]</span><br><span class="line">url_header = url_m3u8[::-<span class="number">1</span>].split(<span class="string">'/'</span>, <span class="number">1</span>)[<span class="number">1</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ts:</span><br><span class="line">    url_ts = url_header + <span class="string">'/'</span> + i</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'(文件名).ts'</span>, <span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(get_response(url_ts))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="批量进行弹幕ass转换">批量进行弹幕 ASS 转换</h1>
<p>安装 selenium<br>
pip install selenium</p>
<p>如果用 chrome<br>
查看 chrome 的版本号 (Chromium 72.0.3626.121)<br>
https://chromedriver.storage.googleapis.com/LATEST_RELEASE_72.0.3626<br>
https://chromedriver.storage.googleapis.com/index.html?path=72.0.3626.69/<br>
下载相应 win32 版本<br>
解压放入 python 根目录<br>
修改 common.js<br>
<code>startDownload('\ufeff' + ass, name.replace(/\.[^.]*$/, '') + '.ass');</code><br>
改为 <code>return ass;</code></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Python</tag>
        <tag>Crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客教程</title>
    <url>/contents/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>本文参考知乎专栏<a href="https://zhuanlan.zhihu.com/p/25471760">《教你免费搭建个人博客，Hexo&amp;Github》</a>，感谢作者。<br>
但在实践搭建博客过程中稍有不同。<br>
系统：Windows 7/10 64 位，MacOS；编辑器：sublime text3, Typora；控制台：CMD, Git Bash, Terminal；搭建博客：Hexo+GitHub<br>
用户名：lxmymjr<br>
<span id="more"></span></p>
<h1 id="安装">安装</h1>
<ol type="1">
<li>进入个人 GitHub 主页，右上角 + 号，选择 new repository，Repository name 填用户名。</li>
<li>安装 <a href="https://nodejs.org/en/">Node.js</a>。<br>
Windows 系统直接官网下载安装。<br>
MacOS 系统推荐使用 <a href="https://github.com/Homebrew/install">Homebrew</a> 安装：在 Terminal 中输入 <code>brew install node</code>。<br>
安装 <a href="https://github.com/Homebrew/install">Homebrew</a>：在 Terminal 中输入 <code>/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</code>。</li>
<li>安装 <a href="https://git-scm.com">Git</a>。<br>
Windows 系统直接官网下载安装。<br>
MacOS 系统在 Terminal 中输入 <code>brew install git</code>（一般系统自带，可省略此步）。</li>
<li>安装完成后，在开始菜单里找到 "Git"-&gt;"Git Bash"，输入：<br>
<code>$ git config --global user.name "用户名"</code> （不要引号）<br>
<code>$ git config --global user.email "注册邮箱"</code> （不要引号）<br>
名称和注册邮箱是 GitHub 上的（MacOS 无需此步）。</li>
<li>安装 <a href="https://hexo.io/zh-cn/">Hexo</a>：输入 <code>$(sudo) npm install -g hexo-cli</code>。</li>
<li>安装 <a href="https://github.com/jgm/pandoc/blob/master/INSTALL.md">pandoc</a>（MacOS 需要安装）：输入 <code>$ brew install pandoc</code>。</li>
</ol>
<h1 id="更新">更新</h1>
<ol type="1">
<li>更新 Node.js 版本：在<a href="https://nodejs.org/en/download/current/">官网</a>上下载安装包覆盖安装。</li>
<li>更新 npm 版本：在命令行或终端中输入 <code>(sudo) npm install npm@latest -g</code> 进行更新，输入 <code>npm -v</code> 查看版本号，在<a href="https://github.com/npm/cli">官网</a>中查看最新版本号。</li>
<li>更新 npm package 版本：<br>
命令行或终端中输入 <code>npm outdated</code> 和 <code>npm -g outdated</code> 列出需要更新的版本。<br>
命令行或终端中输入 <code>npm update</code> 和 <code>npm -g update</code> 更新到 outdated 列出 wanted 的版本。<br>
命令行或终端中输入 <code>npm install package-name@latest</code> 强制更新到最新版本。</li>
<li>更新 Hexo 版本：在 Hexo 博客的根目录右键运行 Git Bash 并输入 <code>npm outdated</code> 检查最新版本的模块，确认根目录下有 package.json 文件。根据最新版本的模块检查结果修改 package.json 文件中对应的版本号。删除根目录下的 node_modules 文件夹，然后输入 <code>npm install --save</code> 更新模块。输入 <code>hexo version</code> 检查版本信息。输入 <code>npm outdated -g</code> 检查 Hexo CLI 是否有新版本，如有则输入 <code>npm install -g hexo-cli</code> 进行升级。</li>
</ol>
<h1 id="配置">配置</h1>
<ol type="1">
<li>新建文件夹 "Blog" 作为 Hexo 博客的根目录。</li>
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo i "文件夹名"</code>，此处起名为 "Blog"。</li>
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo g</code>，生成文章；输入 <code>$ hexo s</code>，启动本地服务器。访问 http://localhost:4000/ 即可查看博客效果。</li>
<li>打开 Git Bash（Windows）/Terminal（MacOS），输入 <code>$(sudo) ssh-keygen -t rsa -C "GitHub的注册邮箱地址"</code>，一直回车直到出现信息 <code>Your public key has been saved in /path/to/id_rsa.pub</code><br>
MacOS：先检查 SSH Key 是否已经生成，在 Terminal 上输入 <code>ls -al ~/.ssh</code></li>
<li>根据路径找到 id_rsa.pub，用 sublime 打开，复制全部内容，然后打开<a href="https://github.com/settings/keys">网址</a>（GitHub -&gt;Setting -&gt; SSH and GPG keys），点击 New SSH key 按钮，Title 填写 "Blog"，Key 填写刚刚复制的内容，完成后点击 Add SSH key 按钮。</li>
<li>在 Blog 目录下，用 sublime 打开站点配置文件（_config.yml 文件），修改网站相关信息：<br>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#网页描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#作者名</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/"用户名"/"用户名".github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#配置部署</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="发表文章">发表文章</h1>
<ol type="1">
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo n "文章标题"</code>。</li>
<li>在 "Blog\_posts" 目录下找到文章 "文章标题.md"，用 sublime 打开，使用 Markdown 语法写文章。</li>
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo g</code>，生成文章。</li>
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo d</code>，会弹出 GitHub Login 窗口，输入你的 GitHub 账号和密码。</li>
<li>然后打开<a href="https://lxmymjr.github.io/">网址</a>："用户名".github.io 就可以看到已经发布的文章了。</li>
</ol>
<h1 id="删除文章">删除文章</h1>
<ol type="1">
<li>在 "Blog\_posts" 目录下找到要删除的文章，直接删除。</li>
<li>如果需要删除文章中的本地资源（图片，视频，音频等），需删除 "Blog" 目录下的资源，<strong>并且</strong>删除 "Blog" 目录下的资源。</li>
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo g</code>，重新生成文章。</li>
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo d</code>，重新发表文章。</li>
</ol>
<h1 id="加密访问">加密访问</h1>
<ol type="1">
<li>使用插件 <a href="https://github.com/MikeCoder/hexo-blog-encrypt">hexo-blog-encrypt</a></li>
<li> 在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ npm install hexo-blog-encrypt --save</code>。</li>
<li>在 Hexo 博客的根目录下的站点配置文件中启用该插件:<br>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>在每篇需要加密的文章配置<br>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">password:</span> <span class="comment">#设置密码</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">Enter</span> <span class="string">the</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read.</span> <span class="comment">#设置预览内容</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">Enter</span> <span class="string">the</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read.</span> <span class="comment">#设置提示框内容</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="定制主题">定制主题</h1>
<p>本博客使用 NexT 主题：详见 <a href="https://github.com/next-theme/hexo-theme-next">GitHub</a>，<a href="https://theme-next.js.org/">官网</a>。</p>
<ol type="1">
<li>安装 NexT: 在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ git clone https://github.com/next-theme/hexo-theme-next themes/next</code>。<br>
如果 hexo 是 5.0.0 以上，则可以直接输入 <code>npm install hexo-theme-next</code></li>
<li>启用主题：与所有 Hexo 主题启用的模式一样。当安装完成后，打开 Hexo 博客的根目录下的站点配置文件，找到 theme 字段，并将其值更改为 next。在切换主题之后或者更改样式后，最好使用 <code>$ hexo clean</code> 来清除 Hexo 的缓存。</li>
<li>选择 Scheme：Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以在 Scheme 之间共用。<br>
Scheme 的切换通过更改主题配置文件，搜索 scheme 关键字。你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 #去除即可。</li>
<li>设置菜单：NexT 默认的菜单项有（标注<i class="fa fa-exclamation-circle"></i>的项表示需要手动创建这个页面）：</li>
</ol>
<table>
<thead>
<tr class="header">
<th>键值</th>
<th>设定值</th>
<th>显示文本</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td> home</td>
<td><code>home: /</code></td>
<td>主页</td>
</tr>
<tr class="even">
<td> archives</td>
<td><code>archives: /archives</code></td>
<td>归档页</td>
</tr>
<tr class="odd">
<td> categories</td>
<td><code>categories: /categories</code></td>
<td>分类页 <i class="fa fa-exclamation-circle"></i></td>
</tr>
<tr class="even">
<td>tags</td>
<td><code>tags: /tags</code></td>
<td>标签页 <i class="fa fa-exclamation-circle"></i></td>
</tr>
<tr class="odd">
<td>about</td>
<td><code>about: /about</code></td>
<td>关于页面 <i class="fa fa-exclamation-circle"></i></td>
</tr>
<tr class="even">
<td>commonweal</td>
<td><code>commonweal: /404.html</code></td>
<td>公益 404 <i class="fa fa-exclamation-circle"></i></td>
</tr>
</tbody>
</table>
<p>　添加「标签 / 分类」页面：在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ hexo new page tags或者categories</code>。<br>
　编辑刚新建的页面，将页面的 type 设置为 tags，主题将自动为这个页面显示分类。页面内容如下：<br>
</p><figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">title: 标签/分类</span></span><br><span class="line"><span class="section">date: yyyy-mm-dd hh:mm:ss</span></span><br><span class="line"><span class="section">type: "tags"或者type: "categories"</span></span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><br>
　将post_meta的updated_at字段的值改为true以启动文章修改时间显示。<p></p>
<ol start="5" type="1">
<li>设置头像：编辑主题配置文件，修改字段 avatar，值设置成头像的链接地址（完整的互联网 URI 或者站点内的地址）。</li>
<li>字数统计：在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ npm install hexo-word-counter --save</code>。编辑 Hexo 博客的根目录下的站点配置文件，新增以下内容到任意位置，然后在主题配置文件中配置 symbols_count_time 项目：<br>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># in _config.yml</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">"mins."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in _config.next.yml</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>本地搜索功能：在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ npm install hexo-generator-searchdb --save</code>。编辑 Hexo 博客的根目录下的站点配置文件，新增以下内容到任意位置，然后在主题配置文件中配置 local_search 项目：<br>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>新建 Blog/source/_data/styles.styl 文件：<br>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">//修改右上角xmliu's blog颜色及高度</span><br><span class="line"><span class="selector-class">.site-brand-container</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#0080FF</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-meta</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0080FF</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//扩大左侧栏</span><br><span class="line"><span class="selector-class">.sidebar</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//去掉目录中Home和Search上下的空白</span><br><span class="line"><span class="selector-class">.menu</span> {</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0em</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//减少主界面文章标题和预览之间距离</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-header</span> {</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//减少主界面文章预览和Read more按钮之间距离</span><br><span class="line"><span class="selector-class">.post-button</span> {</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//将<span class="attribute">background</span><span class="selector-class">.jpg</span>放在node_modules\hexo-theme-next\source\images目录下</span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/images/background.jpg</span>);</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//页面底部文字变白色</span><br><span class="line"><span class="selector-class">.footer</span> {</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//Archive界面</span><br><span class="line">//去掉title</span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.collection-title</span> {</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//去掉年份上下空白</span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-content</span> <span class="selector-class">.collection-year</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//去掉标题上下空白</span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-content</span> <span class="selector-class">.post-header</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//减少左边距</span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-content</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//取消整栏上下空白</span><br><span class="line"><span class="selector-class">.post-block</span> {</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">20px</span></span><br><span class="line">    padding-bottom: <span class="number">20px</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) {</span><br><span class="line">  //缩小两边距离</span><br><span class="line">  <span class="selector-class">.main</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1360px</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  //扩大主内容栏</span><br><span class="line">  <span class="selector-class">.main-inner</span> {</span><br><span class="line">      <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">312px</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  //扩大左侧栏</span><br><span class="line">  <span class="selector-class">.header-inner</span> {</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="seo优化指南">SEO 优化指南</h1>
<p>方便搜索引擎收录本博客，参考文章<a href="http://blog.mobing.net/content/hexo/hexo-next-seo.html">基于 Hexo 中 Next 主题的 SEO 优化指南</a>，<a href="http://hui-wang.info/2016/10/23/Hexo插件之百度主动提交链接/">Hexo 插件之百度主动提交链接</a></p>
<h2 id="生成站点地图提交到google">生成站点地图提交到 Google</h2>
<p>需要先安装 hexo-generator-sitemap 插件，在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ npm install hexo-generator-sitemap --save</code>。<br>
然后编辑 Hexo 博客的根目录下的站点配置文件，新增以下内容到任意位置：<br>
</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></tbody></table></figure><br>
安装完这个插件，再重启hexo（<code>hexo g</code>），就能生成sitemap.xml文件了。<br>
进入<a href="https://search.google.com/search-console/welcome">Google Search Console</a>的网址前缀，输入本博客的网址，选择“其他验证方法”中的“HTML标记”，复制其中的元标记到your-hexo-site\themes\next\layout\_partials\head\head.swig中的line5或者将验证码复制到主题配置文件中的google_site_verification字段中。<br>
然后进行验证，然后在控制台中提交站点地图文件。<p></p>
<h2 id="生成网址提交到百度">生成网址提交到百度</h2>
<p>因为 GitHub 禁止百度爬虫访问博客，导致博客无法被百度收录。<br>
注册<a href="http://zhanzhang.baidu.com">百度站长工具</a>，提交你的站点网址，即网站的根地址。然后在工具 -&gt; 网页抓取 -&gt; 链接提交里找到密钥。<br>
格式：<code>http://data.zz.baidu.com/urls?site=&lt;your website&gt;&amp;token=&lt;your token&gt;</code><br>
接下来需要安装 hexo-baidu-url-submit 插件：在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>$ npm install hexo-baidu-url-submit --save</code>。<br>
然后编辑 Hexo 博客的根目录下的站点配置文件，新增以下内容到任意位置：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="string">n</span> <span class="comment"># 提交最新的n个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="comment"># &lt;你的网站根地址&gt;</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">your_token</span> <span class="comment"># 上述获得的密钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 所需提交的网址的存放文件</span></span><br></pre></td></tr></tbody></table></figure>
<p>注意，此插件的配置文件中包含密钥，请妥善管理好博客源码。<br>
可以把源码<strong>保存在本地</strong>，如果要托管在 git 仓库里，请选择<strong>私有仓库</strong>。<br>
最后，加入新的 deployer:<br>
</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></tbody></table></figure><br>
注意type前面一定有一个短横线。<br>
<code>hexo generate</code> 会产生一个文本文件，里面包含所需百度检索的链接。<br>
<code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎。<p></p>
<h2 id="添加蜘蛛协议">添加蜘蛛协议</h2>
<p>在站点 source 文件夹下新建 robots.txt 文件，文件内容如下：<br>
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: * </span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line">Sitemap: https://lxmymjr.github.io/sitemap.xml #改成你自己的网址</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="网站结构优化">网站结构优化</h2>
<h3 id="keywords和description">keywords 和 description</h3>
<p>在.md 中添加如下代码，用于生成的文章中添加关键字和描述。<br>
<code>keywords:</code><br>
<code>description:</code></p>
<h3 id="修改文章链接">修改文章链接</h3>
<p>Hexo 默认的文章链接形式为 domain/year/month/day/postname，即一个四级 url，可能造成 url 过长，对搜索引擎十分不友好。<br>
所以需要改成 domain/postname 的形式。编辑站点配置文件，修改其中的 permalink 字段，改为 permalink: :title.html 即可。</p>
<h1 id="不同电脑维护博客">不同电脑维护博客</h1>
<p>使用第三方 git 服务进行博客的备份。可以用 GitHub 的私有仓库。<br>
在 GitHub 网站创建一个新的 repository，我们在这里给新创建的 repository 命名为 Blog。</p>
<h2 id="在原电脑中从本地上传hexo到github仓库">在原电脑中从本地上传 Hexo 到 GitHub 仓库</h2>
<ol type="1">
<li>初始化仓库。<br>
在 Hexo 博客的根目录右键运行 Git Bash 并输入以下命令：<br>
<code>$ git init</code><br>
<code>$ git remote add origin &lt;server address&gt; #server address为备份仓库的地址（https://github.com/"用户名"/Blog)</code></li>
<li>把主题配置文件 Blog/node_modules/hexo-theme-next/_config.yml 复制到 Blog/source/_data/ 文件夹里面。</li>
<li>把本地文件同步到 GitHub 上面。<br>
分别输入执行以下命令：<br>
<code>$ git add .  #添加所有目录，注意add后面有个点</code><br>
<code>$ git commit -m "add to GitHub" #引号内为提交说明，每次提交都需要</code><br>
<code>$ git push origin master   #把更新推送到云端</code><br>
可以登录 GitHub 账户查看刚创建的 blog 仓库中是否上传成功。<br>
windows 平台 push 过程中会提示输入 GitHub 的用户名和的密码。</li>
</ol>
<h2 id="在新电脑中从github仓库取回hexo到本地">在新电脑中从 GitHub 仓库取回 Hexo 到本地。</h2>
<ol type="1">
<li><p>安装 Git 和 Node.js（见上）。</p></li>
<li><p>把文件取回本地。<br>
安装环境完成后，在新 Blog 文件夹下运行 Git Bash 并分别执行以下几条命令：<br>
<code>$ git init</code><br>
<code>$ git remote add origin &lt;server address&gt; #server address为备份仓库的地址（https://github.com/"用户名"/Blog)</code><br>
<code>$ git pull origin master</code><br>
运行完 pull 命令后你会发现文件夹中就会出现刚刚上传的内容。</p></li>
<li><p>配置新的 Hexo。<br>
3.1. 在刚才的目录下执行以下命令以在新电脑中安装 Hexo。<br>
<code>$ (sudo) npm install -g hexo-cli</code><br>
3.2. 初始化 Hexo 并安装相应依赖包。<br>
<code>$ (sudo) npm install #会根据package.json文件中的依赖列表安装相应依赖包</code><br>
3.3. 将 Blog/source/_data/background.jpg 复制到 Blog/node_modules-theme-next。<br>
3.4. 输入命令 <code>$ hexo g</code> 和命令 <code>$ hexo s</code>，然后在浏览器输入 <code>localhost:4000</code> 中进行预览。如果没有问题那么新电脑上就配置成功了。<br>
3.5. 发表文章的操作同原电脑（见上）。</p></li>
<li><p>把新电脑上的 Hexo 从本地同步到 GitHub 仓库。<br>
当发表完文章，我们还需要把 Hexo 程序同步到我们 GitHub 的 blog 仓库。执行下面指令：<br>
<code>$ git add .</code><br>
这时候可以输入命令 $ git status 查看状态，回显示刚才编辑过的文件的信息。<br>
之后分别输入下面指令完成上传：<br>
<code>$ git commit -m "add to GitHub"</code><br>
<code>$ git push origin master</code><br>
成功后，我们再次把程序同步更新到了我们的 GitHub 仓库 Blog。</p></li>
</ol>
<h2 id="新旧电脑继续维护博客">新旧电脑继续维护博客</h2>
<ol type="1">
<li>如果再想用旧电脑更新博客，只需要在执行添加文章之前先把程序从 Blog 仓库拉取下来便可。输入命令：<br>
<code>$ git pull</code></li>
<li>现在无论用哪台电脑进行修改等操作，都需先输入命令 <code>$ git pull</code>，然后再进行修改等操作，修改等操作完成后，输入执行以下命令：<code>$ git add .</code> 和 <code>$ git commit -m "add to GitHub"</code> 和 <code>$ git push origin master</code> 来更新远程仓库。</li>
</ol>
<h1 id="markdown基本语法">Markdown 基本语法</h1>
<ol type="1">
<li>一个井号<code>#</code>一级标题，n 个井号 n 级标题，注意：<strong>井号和标题名之间一定要有一个空格</strong>。</li>
<li>代码，一对 `表示行内代码，一对``` 表示行间代码，第一个 ``` 后可加上语言名。</li>
<li><em>一对星号表示斜体</em>，<strong>两对星号表示加粗</strong>，<strong><em>三对星号表示斜体加粗</em></strong>，<em>一对下划线表示斜体</em>，<strong>两对下划线表示加粗</strong>，<strong><em>三对下划线表示斜体加粗</em></strong>。</li>
<li>[链接名称](链接地址) 插入链接。</li>
<li><blockquote>
<p>&gt; 表示引用。</p>
</blockquote></li>
<li>用全角空格表示缩进，搜狗输入法中 <code>shift+空格</code>切换全角半角。</li>
<li><font color="red">字体颜色：</font><code>&lt;font color=颜色&gt;内容&lt;/font&gt;</code>。</li>
<li>一行中用三个以上的星号、减号、下划线来建立一个分隔线，行内不能有其他东西。也可以在星号、减号、下划线中间插入空格。</li>
</ol>
<hr>
<h1 id="插入图片">插入图片</h1>
<ol type="1">
<li>在 Hexo 博客的根目录下的 source 文件夹中新建文件夹 image。</li>
<li>在 Markdown 中写：<code>!["图片描述"](\image\图片名字.图片格式)</code> 或者 <code>!["图片描述"](外链网址)</code>。</li>
<li>或者在 Markdown 中写：<br>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% img /image/图片名字.图片格式 图片宽度 图片高度 %}</span><br></pre></td></tr></tbody></table></figure><br>
或者<br>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% img 外链网址 图片宽度 图片高度 %}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="插入视频">插入视频</h1>
<ol type="1">
<li>在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>npm install hexo-tag-dplayer --save</code>。</li>
<li>在 Markdown 中写：<br>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">{% dplayer "url="视频网址" "theme=#FADFA3" "autoplay=false" %}</span><br></pre></td></tr></tbody></table></figure><br>
如果插入本地视频，则先在 Hexo 博客的根目录下的 source 文件夹中新建文件夹 video，然后在 Markdown 中视频地址为。视频格式。</li>
</ol>
<h1 id="插入公式">插入公式</h1>
<ol type="1">
<li>在 Markdown 中写：<code>&lt;img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=\Large "LaTeX格式的公式代码"" style="border:none;"&gt;</code>。</li>
<li>NexT 主题自带 MathJax 功能，在主题配置文件中配置 math 项目。<br>
如果启用了 per_page 功能，则需要在每篇需要 MathJax 的文章配置 mathjax : true。<br>
如果插入行内公式，在 Markdown 中写：<code>$LaTeX格式的公式代码$</code>。如果插入行间公式，在 Markdown 中写：<code>$$LaTeX格式的公式代码$$</code>。</li>
<li>打开 hexo 渲染器。<br>
在 Hexo 博客的根目录右键运行 Git Bash 并输入：<code>npm un hexo-renderer-marked --save</code> 和 <code>npm i hexo-renderer-pandoc --save # 或者 hexo-renderer-kramed</code><br>
如果用 hexo-renderer-pandoc 则需要在系统里提前安装好 <a href="https://pandoc.org/installing.html">pandoc</a><br>
如果需要回车换行功能的话，则需要编辑 Hexo 博客的根目录下的站点配置文件，新增以下内容到任意位置：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pandoc:</span><br><span class="line">  extensions:</span><br><span class="line">    - "+hard_line_breaks"</span><br></pre></td></tr></tbody></table></figure><br>
注意：如果 Windows 电脑安装了 Anaconda3 的话，因为 Anaconda3 自带了 pandoc（C:\ProgramData\Anaconda3\pkgs\pandoc-1.19.2.1-hb2460c7_1\Scripts\pandoc.exe）且版本落后，需要在系统 - 高级系统设置 - 环境变量 - 系统变量的 Path 变量中将新安装的 Pandoc 路径移到 Anaconda 路径上方，并通过 <code>pandoc --version</code> 进行验证。</li>
<li>让 Hexo 在使用 Mathjax 时支持多行公式：\\ 符号表示换行，&amp; 表示对齐，<code>\begin{split}</code> 表示等号对齐，<code>\begin{align}</code> 表示向左对齐，<code>\begin{gather}</code> 表示居中对齐。<br>
例：<br>
<code>$\begin{split}a&amp;=b+c-d\\&amp;\quad+e-f\\&amp;=g+h\\&amp;=i\end{split}$</code><br>
<span class="math inline">\(\begin{split}a&amp;=b+c-d\\&amp;\quad+e-f\\&amp;=g+h\\&amp;=i\end{split}\)</span><br>
<code>$\begin{align}a_{11}&amp;=b_{11}&amp;a_{12}&amp;=b_{12}\\a_{21}&amp;=b_{21}+c_{21}&amp;a_{22}&amp;=b_{22}\end{align}$</code><br>
<span class="math inline">\(\begin{align}a_{11}&amp;=b_{11}&amp;a_{12}&amp;=b_{12}\\a_{21}&amp;=b_{21}+c_{21}&amp;a_{22}&amp;=b_{22}\end{align}\)</span><br>
<code>$\begin{gather}a_{11}=b_{11}&amp;a_{12}=b_{12}\\a_{21}=b_{21}+c_{21}&amp;a_{22}=b_{22}\end{gather}$</code><br>
<span class="math inline">\(\begin{gather}a_{11}=b_{11}&amp;a_{12}=b_{12}\\a_{21}=b_{21}+c_{21}&amp;a_{22}=b_{22}\end{gather}\)</span></li>
<li> 看到别的网站上有 MathJax 解析的公式时，可以通过右键菜单 “Show Math As&gt; TeX Commands” 查看 LaTex 格式。</li>
<li>希腊字母表示方法：<br>
部分字母变体 <code>\epsilon \varepsilon \phi \varphi</code>：<span class="math inline">\(\epsilon \varepsilon \phi \varphi\)</span>。</li>
<li>上标和下标：<br>
使用符号 ^（上标）和_（下标），如 <code>x_i^j</code>：<span class="math inline">\(x_i^j\)</span>。<br>
如果上标或者下标包含不止一个字符，则需要用括号 {} 括起来。<br>
在 markdown 中书写，因为 <code>\, $, {, }, _</code>都是有特殊含义的，所以需要加 <code>\</code> 转义。</li>
<li>括号：<br>
小括号与中括号：使用原始的<span class="math inline"> \(()\)</span>，<span class="math inline">\([]\)</span> 即可。<br>
大括号：由于大括号<span class="math inline"> \(\{\}\)</span> 被用来分组，因此需要使用 <code>\{</code>和 <code>\}</code> 表示大括号，还可以使用 <code>\lbrace</code> 和 <code>\rbrace</code> 来表示。<br>
尖括号：使用 <code>\langle</code> 和 <code>\rangle</code> 表示<span class="math inline"> \(\langle\)</span> 左尖括号和<span class="math inline"> \(\rangle\)</span> 右尖括号。<br>
上取整：使用<span class="math inline"> \(\lceil \rceil\)</span>。<br>
下取整：使用<span class="math inline"> \(\lfloor \rfloor\)</span>。<br>
需要注意的是，原始符号并不会随着公式大小缩放，可以使用 <code>\left(…\right)</code> 来自适应的调整括号大小。</li>
<li>分式与根式 (分号与开方)：<br>
<code>\frac ab</code> 显示为<span class="math inline"> \(\frac ab\)</span>，而 <code>\frac{a+b}{c+d}</code> 显示为<span class="math inline"> \(\frac{a+b}{c+d}\)</span>。<br>
或者用 <code>{a+b\over c+d}</code> 为<span class="math inline"> \({a+b\over c+d}\)</span>。<br>
<code>\sqrt[y]{x}</code> 表示开方<span class="math inline"> \(\sqrt[y]{x}\)</span>。</li>
<li>字体：<br>
mathbb 和 Bbb：<span class="math inline">\(\mathbb {ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}\)</span> 黑板体<br>
mathbf：<span class="math inline">\(\mathbf {ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}\)</span> 粗体<br>
mathtt：<span class="math inline">\(\mathtt {ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}\)</span> 打印体<br>
mathrm：<span class="math inline">\(\mathrm {ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}\)</span> 罗马体<br>
mathcal：<span class="math inline">\(\mathcal {ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}\)</span> 花体<br>
mathscr：<span class="math inline">\(\mathscr {ABCDEFGHIJKLMNOPQRSTUVWXYZ}\)</span> 手写体<br>
mathfrak：<span class="math inline">\(\mathfrak {ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}\)</span> 德国体</li>
<li>数学符号：<br>
求和：<code>\sum</code> <span class="math inline">\(\sum\)</span>，可使用上下标。<br>
积分：<code>\int</code><span class="math inline">\(\int\)</span>，可使用上下限。<br>
连乘：<code>\prod</code><span class="math inline">\(\prod\)</span><br>
二重积分：<code>\iint</code><span class="math inline">\(\iint\)</span><br>
极限：<code>\lim</code><span class="math inline">\(\lim\)</span>，可以使用下标。<br>
比较：<code>\lt \gt \le \ge \neq</code><span class="math inline">\(\lt \gt \le \ge \neq\)</span>。可以前面加 <code>\not</code> 否定<span class="math inline"> \(\not\lt \not\gt \not\le \not\ge \not\neq\)</span>。<br>
运算：<code>\times \div \pm \mp</code><span class="math inline">\(\times \div \pm \mp\)</span>，<code>\cdot</code><span class="math inline">\(\cdot\)</span> 点乘。<br>
集合：<code>\cup \cap \bigcup \bigcap \setminus \subset \subseteq \subsetneq \supset \in \notin \emptyset \varnothing</code><span class="math inline">\(\cup \cap \bigcup \bigcap \setminus \subset \subseteq \subsetneq \supset \in \notin \emptyset \varnothing\)</span><br>
排列：<code>\choose</code> 或 <code>\binom</code>,<code>{x \choose y}</code><span class="math inline">\({x \choose y}\)</span> 或者 <code>\binom{x}{y}</code><span class="math inline">\(\binom{x}{y}\)</span><br>
箭头：<code>\to \rightarrow \leftarrow \Rightarrow \Leftarrow \mapsto \implies \iff \longrightarrow</code><span class="math inline">\(\to \rightarrow \leftarrow \Rightarrow \Leftarrow \mapsto \implies \iff \longrightarrow\)</span><br>
逻辑：<code>\land \lor \lnot \forall \exists \top \bot \vdash \vDash</code><span class="math inline">\(\land \lor \lnot \forall \exists \top \bot \vdash \vDash\)</span><br>
空格：<code>\quad</code> 和 <code>\qquad</code>，MathJax 自己决定是否增加空格，所以一般的空格是没用的。<br>
特殊点号：<code>\star \ast \oplus \circ \bullet</code><span class="math inline">\(\star \ast \oplus \circ \bullet\)</span><br>
等号：<code>\approx \sim \cong \equiv \prec</code><span class="math inline">\(\approx \sim \cong \equiv \prec\)</span><br>
特殊算符：<code>\infty \aleph_0 \nabla \partial \Im \Re</code><span class="math inline">\(\infty \aleph_0 \nabla \partial \Im \Re\)</span><br>
模运算：<code>a\equiv b\pmod n</code><span class="math inline">\(a\equiv b\pmod n\)</span><br>
加多个数：<code>\cdots</code><span class="math inline">\(a_1+a_2+\cdots+a_n\)</span><br>
分隔多个数：<code>\ldots</code><span class="math inline">\(a_1, a_2, \ldots ,a_n\)</span><br>
头部标：<code>\hat \widehat \bar \overline \vec \overrightarrow \dot \ddot</code><span class="math inline">\(\hat x \widehat x \bar x \overline{xyz} \vec x \overrightarrow{xyz} \dot x \ddot x\)</span></li>
<li> 表格：<br>
使用 <code>\begin{array}{列样式}…\end{array}</code> 的形式来创建表格，列样式可以是 <code>c,l,r</code> 表示居中，左，右对齐，还可以使用 | 表示一条竖线。表格中各行使用 <code>\</code> 分隔 (hexo markdown 中，需要使用 <code>\\</code>)，各列使用 &amp; 分隔。使用。<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\begin{array}{c|lcr}</span><br><span class="line">n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\\hline</span><br><span class="line">1 &amp; 1 &amp; 2 &amp; 3 \\</span><br><span class="line">2 &amp; 4 &amp; 5 &amp; 6 \\</span><br><span class="line">3 &amp; 7 &amp; 8 &amp; 9 \\</span><br><span class="line">\end{array}</span><br></pre></td></tr></tbody></table></figure><br>
<span class="math display">\[\begin{array}{c|lcr} n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\ \hline 1 &amp; 1 &amp; 2 &amp; 3 \\ 2 &amp; 4 &amp; 5 &amp; 6 \\ 3 &amp; 7 &amp; 8 &amp; 9 \\ \end{array}\]</span></li>
<li> 矩阵：<br>
使用 <code>\begin{matrix}…\end{matrix}</code> 的形式来表示矩阵，在 <code>\begin</code> 与 <code>\end</code> 之间加入矩阵中的元素即可。矩阵的行之间使用 <code>\</code> 分隔 (hexo markdown 中，需要使用 <code>\\</code>)，列之间使用 &amp; 分隔。<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\begin{matrix}</span><br><span class="line">1 &amp; 2 &amp; 3 \\</span><br><span class="line">4 &amp; 5 &amp; 6 \\</span><br><span class="line">7 &amp; 8 &amp; 9 \\</span><br><span class="line">\end{matrix}</span><br></pre></td></tr></tbody></table></figure><br>
<span class="math display">\[\begin{matrix} 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \\ 7 &amp; 8 &amp; 9 \\ \end{matrix}\]</span><br>
如果要对矩阵加括号，可以像上文中提到的一样，使用 <code>\left</code> 与 <code>\right</code> 配合表示括号符号。也可以使用特殊的 matrix。即替换 <code>begin{matrix}…end{matrix}</code> 中的 matrix 为 pmatrix，bmatrix，Bmatrix，vmatrix,Vmatrix。<br>
内联矩阵：<code>\bigl(\begin{smallmatrix} ... \end{smallmatrix}\bigr)</code><span class="math inline">\(\bigl( \begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix} \bigr)\)</span><br>
可以使用<span class="math inline"> \(\cdots\)</span><span class="math inline">\(\ddots\)</span><span class="math inline">\(\vdots\)</span> 来省略矩阵中的元素，如：<br>
<span class="math display">\[\begin{pmatrix}      1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\      1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\      \vdots  &amp; \vdots&amp; \vdots &amp; \ddots &amp; \vdots \\      1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \end{pmatrix}\]</span></li>
<li> 分类表达式：<br>
定义函数的时候经常需要分情况给出表达式，可使用 <code>\begin{cases}…\end{cases}</code>。其中，使用 <code>\</code> 来分类，使用 &amp; 指示需要对齐的位置。如：<br>
<span class="math display">\[f(n) = \begin{cases} a, &amp; \text{if $n$ is even} \\ b, &amp; \text{if $n$ is odd} \\ \end{cases}\]</span></li>
<li> 空间问题：<br>
不要在指数或者积分中使用 <code>\frac</code>：<br>
在指数或者积分表达式中使用 <code>\frac</code> 会使表达式看起来不清晰，因此在专业的数学排版中很少被使用。应该使用一个水平的 <code>/</code> 来代替，效果如下：<br>
<span class="math display">\[\begin{array}{cc} \mathrm{Bad} &amp; \mathrm{Better} \\ \hline \\ e^{i\frac{\pi}2} \quad e^{\frac{i\pi}2}&amp; e^{i\pi/2} \\ \int_{-\frac\pi2}^\frac\pi2 \sin x\,dx &amp; \int_{-\pi/2}^{\pi/2}\sin x\,dx \\ \end{array}\]</span><br>
使用 <code>\mid</code> 代替 <code>|</code> 作为分隔符：<br>
符号 | 作为分隔符时有排版空间大小的问题，应该使用 <code>\mid</code> 代替。效果如下：<br>
<span class="math display">\[\begin{array}{cc} \mathrm{Bad} &amp; \mathrm{Better} \\ \hline \\ {x|x^2\in\Bbb Z} &amp; {x\mid x^2\in\Bbb Z} \\ \end{array}\]</span><br>
此外，在微分前应该使用 <code>\,</code> 来增加些许空间，否则 LaTex 会将微分紧凑地排列在一起。如下：<br>
<span class="math display">\[\begin{array}{cc} \mathrm{Bad} &amp; \mathrm{Better} \\ \hline \\ \iiint_V f(x)dz dy dx &amp; \iiint_V f(x)\,dz\,dy\,dx \end{array}\]</span></li>
<li> 连分数：<br>
书写连分数表达式时，请使用 <code>\cfrac</code> 代替 <code>\frac</code> 或者 <code>\over</code> 两者效果对比如下：<br>
<span class="math display">\[x = a_0 + \frac{1^2}{a_1 + \frac{2^2}{a_2 + \frac{3^2}{a_3 + \frac{4^4}{a_4 + \cdots}}}} \tag{\frac}\]</span><br>
<span class="math display">\[x = a_0 + \cfrac{1^2}{a_1 + \cfrac{2^2}{a_2 + \cfrac{3^2}{a_3 + \cfrac{4^4}{a_4 + \cdots}}}} \tag{\cfrac}\]</span></li>
<li> 方程组：<br>
使用 <code>\begin{array} … \end{array}</code> 与 <code>\left{…\right.</code> 配合，表示方程组，如：<br>
<span class="math display">\[\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d_3 \end{array}\]</span><br>
同时，还可以使用 <code>\begin{cases}…\end{cases}</code> 表达同样的方程组，如：<br>
<span class="math display">\[\begin{cases} a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d_3 \end{cases}\]</span><br>
对齐方程组中的 = 号，可以使用 <code>\being{aligned} .. \end{aligned}</code>，如：<br>
<span class="math display">\[\begin{aligned} a_1x+b_1y+c_1z &amp;=d_1+e_1 \\ a_2x+b_2y&amp;=d_2 \\ a_3x+b_3y+c_3z &amp;=d_3 \end{aligned}\]</span><br>
如果要对齐 = 号和项，可以使用 <code>\being{array}{列样式} .. \end{array}</code>，如：<br>
<span class="math display">\[\begin{array}{ll} a_1x+b_1y+c_1z &amp;=d_1+e_1 \\ a_2x+b_2y &amp;=d_2 \\ a_3x+b_3y+c_3z &amp;=d_3 \end{array}\]</span></li>
<li> 颜色：<br>
命名颜色是浏览器相关的，如果浏览器没有定义相关的颜色名称，则相关文本将被渲染为黑色。以下颜色是 HTML4 与 CSS2 标准中定义的一些颜色，其应该被大多数浏览器定义了。<br>
<span class="math display">\[\begin{array}{|rc|} \hline \verb+\color{black}{text}+ &amp; \color{black}{text} \\ \verb+\color{gray}{text}+ &amp; \color{gray}{text} \\ \verb+\color{silver}{text}+ &amp; \color{silver}{text} \\ \verb+\color{white}{text}+ &amp; \color{white}{text} \\ \hline \verb+\color{maroon}{text}+ &amp; \color{maroon}{text} \\ \verb+\color{red}{text}+ &amp; \color{red}{text} \\ \verb+\color{yellow}{text}+ &amp; \color{yellow}{text} \\ \verb+\color{lime}{text}+ &amp; \color{lime}{text} \\ \verb+\color{olive}{text}+ &amp; \color{olive}{text} \\ \verb+\color{green}{text}+ &amp; \color{green}{text} \\ \verb+\color{teal}{text}+ &amp; \color{teal}{text} \\ \verb+\color{aqua}{text}+ &amp; \color{aqua}{text} \\ \verb+\color{blue}{text}+ &amp; \color{blue}{text} \\ \verb+\color{navy}{text}+ &amp; \color{navy}{text} \\ \verb+\color{purple}{text}+ &amp; \color{purple}{text} \\ \verb+\color{fuchsia}{text}+ &amp; \color{magenta}{text} \\ \hline \end{array}\]</span><br>
此外，HTML5 与 CSS3 也定义了一些颜色名称。同时，颜色也可以使用 #rgb 的形式来表示，r、g、b 分别表示代表颜色值得 16 进制数，如：<code>\color{\#0F0}{text}</code>。更多点击 <a href="https://www.w3schools.com/html/html_colors.asp">HTML 色彩快速参考手册</a>或 <a href="https://www.w3.org/TR/css3-color/#">CSS 色彩快速参考手册</a>。</li>
<li>删除线：<br>
<span class="math display">\[\require{cancel}\begin{array}{rl} \verb|y+\cancel{x}| &amp; y+\cancel{x}\\ \verb|\cancel{y+x}| &amp; \cancel{y+x}\\ \verb|y+\bcancel{x}| &amp; y+\bcancel{x}\\ \verb|y+\xcancel{x}| &amp; y+\xcancel{x}\\ \verb|y+\cancelto{0}{x}| &amp; y+\cancelto{0}{x}\\ \verb+\frac{1\cancel9}{\cancel95} = \frac15+&amp; \frac{1\cancel9}{\cancel95} = \frac15 \\ \end{array}\]</span><br>
<span class="math display">\[\require{enclose}\begin{array}{rl} \verb|\enclose{horizontalstrike}{x+y}| &amp; \enclose{horizontalstrike}{x+y}\\ \verb|\enclose{verticalstrike}{\frac xy}| &amp; \enclose{verticalstrike}{\frac xy}\\ \verb|\enclose{updiagonalstrike}{x+y}| &amp; \enclose{updiagonalstrike}{x+y}\\ \verb|\enclose{downdiagonalstrike}{x+y}| &amp; \enclose{downdiagonalstrike}{x+y}\\ \verb|\enclose{horizontalstrike,updiagonalstrike}{x+y}| &amp; \enclose{horizontalstrike,updiagonalstrike}{x+y}\\ \end{array}\]</span></li>
<li> 参考资料：<br>
<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md">在 Hexo 中使用 MathJax 插入数学公式</a><br>
<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax basic tutorial and quick reference - StackExchange</a><br>
<a href="http://docs.mathjax.org/en/latest/start.html">MathJax Docs</a><br>
<a href="http://easy-copy-mathjax.xxxx7.com/">Easy Copy MathJax</a><br>
<a href="http://mohu.org/info/symbols/symbols.htm">常用数学符号的 LaTeX 表示方法</a></li>
</ol>
<h1 id="some-tips">Some Tips</h1>
<ol type="1">
<li><code>$ hexo g</code> 和 <code>$ hexo d</code> 可以合写为 <code>$ hexo g -d</code>。</li>
<li><code>$ git add .</code> 和 <code>$ git commit -m "add to GitHub"</code> 可以合写为 <code>$ git commit -a -m "add to GitHub"</code>（简写后不会提交新建的文件，只会更新旧文件的修改）。</li>
<li>如果不改变本地和远程仓库的结构且 push 的源仓库、分支与目的仓库、分支相同，push 后面的变量均可省略，<code>$ git push</code> 即可。</li>
</ol>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>极光推送 JPush 教程</title>
    <url>/contents/%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81JPush%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<p>现在很多 Android 或者 iOS 应用都需要服务器推送，有很多第三方应用可以实现此功能，如 Firebase Cloud Messaging (原 Google Cloud Messaging) 和 Apple Push Notifications。由于 Google 官方的推送服务 Firebase Cloud Messaging 不能再中国使用，所以在此介绍极光推送的使用。<br>
<span id="more"></span></p>
<h1 id="准备工作">准备工作</h1>
<ol type="1">
<li>注册成为 JPush 开发者<br>
在 <a href="https://www.jiguang.cn/accounts/login/form">JPush 开发者服务</a>注册账号并登陆。</li>
<li>创建应用<br>
点击 “应用管理” 页面的 “创建应用” 按钮。填写应用名称，应用图标，Android 应用包名（不可更改），iOS 开发证书及密码，iOS 生产证书及密码。</li>
<li>记录 APPKey 和 Master Secret<br>
点击刚创建的应用详情页面，记录 APPKey 和 Master Secret</li>
</ol>
<h1 id="服务器端">服务器端</h1>
<p>本文使用 Python 作为服务器脚本语言。<br>
官方文档：<a href="https://docs.jiguang.cn/jpush/server/3rd/python_sdk/">Python SDK</a><br>
SDK 下载：<a href="https://sdkfiledl.jiguang.cn/jpush-api-python-client-3.2.4.zip">Python SDK v3.2.4</a><br>
官方源码：<a href="https://github.com/jpush/jpush-api-python-client">jpush-api-python-client</a><br>
官方 API：<a href="https://github.com/jpush/jpush-api-python-client/blob/master/docs/push/push.md">jpush python api</a><br>
官方 API：<a href="https://docs.jiguang.cn/jpush/server/push/rest_api_v3_push/">REST Push API</a></p>
<h2 id="环境配置">环境配置</h2>
<p>pip 方式：<code>pip install jpush</code><br>
easy_install 方式：<code>easy_install jpush</code><br>
使用源码方式：<code>python setup.py install</code></p>
<h2 id="服务器设置">服务器设置</h2>
<p>新建 conf.py 文件：<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># please put your app_key and master_secret here</span></span><br><span class="line">app_key = <span class="string">u'your app_key'</span></span><br><span class="line">master_secret = <span class="string">u'your master_secret'</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="服务端主函数">服务端主函数</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> conf <span class="keyword">import</span> app_key, master_secret</span><br><span class="line">_jpush = jpush.JPush(app_key, master_secret) <span class="comment">#初始化jpush</span></span><br><span class="line">_jpush.set_logging(<span class="string">"DEBUG"</span>) <span class="comment">#设置日志</span></span><br><span class="line">push = _jpush.create_push() <span class="comment">#初始化push</span></span><br><span class="line">push.platform = jpush.all_ <span class="comment">#设置推送所有平台</span></span><br><span class="line">push.platform = jpush.platform(*types) <span class="comment">#设置推送指定平台，关键字为"android", "ios","winphone"</span></span><br><span class="line">push.audience = jpush.registration_id(*reg_ids) <span class="comment">#根据注册id指定推送设备</span></span><br><span class="line">push.audience = jpush.alias(*alias) <span class="comment">#根据别名指定推送设备，别名在开发者服务平台中设置</span></span><br><span class="line">push.audience = jpush.tag(*tag) <span class="comment">#根据标签指定推送设备，标签在开发者服务平台中设置，多个标签之间是 OR 的关系，即取并集。</span></span><br><span class="line">push.audience = jpush.tag_and(*tag_ands) <span class="comment">#根据标签指定推送设备，标签在开发者服务平台中设置，多个标签之间是 AND 关系，即取交集。</span></span><br><span class="line">push.notification = jpush.notification(alert=<span class="literal">None</span>, ios=<span class="literal">None</span>, android=<span class="literal">None</span>, winphone=<span class="literal">None</span>) <span class="comment">#指定通知内容，如果下方各平台定义了alert，则覆盖这里的定义</span></span><br><span class="line">ios = jpush.ios(alert=<span class="literal">None</span>, badge=<span class="literal">None</span>, sound=<span class="literal">None</span>, content_available=<span class="literal">False</span>, extras=<span class="literal">None</span>, sound_disable=<span class="literal">False</span>) <span class="comment">#指定通知内容，声音，角标，唤醒，扩展字段</span></span><br><span class="line">android = jpush.android(alert, title=<span class="literal">None</span>, builder_id=<span class="literal">None</span>, extras=<span class="literal">None</span>) <span class="comment">#指定通知内容，标题，样式，扩展字段</span></span><br><span class="line">push.message = jpush.message(msg_content, title=<span class="literal">None</span>, content_type=<span class="literal">None</span>, extras=<span class="literal">None</span>) <span class="comment">#指定消息内容</span></span><br><span class="line">push.smsmessage = jpush.smsmessage(content,delay_time) <span class="comment">#指定短信内容和延迟时间（单位为秒，不能超过24小时。设置为0，表示立即发送短信。该参数仅对android平台有效，iOS 和 Winphone平台则会立即发送短信）</span></span><br><span class="line">result = push.send() <span class="comment">#执行推送</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="android客户端">Android 客户端</h1>
<p>官方集成文档：<a href="https://docs.jiguang.cn/jpush/client/Android/android_guide/">Android SDK 集成指南</a><br>
官方 API：<a href="https://docs.jiguang.cn/jpush/client/Android/android_api/">Android SDK API</a><br>
SDK 下载：<a href="https://www.jiguang.cn/downloads/sdk/android/">Android SDK</a><br>
目前 SDK 只支持 Android 2.3 或以上版本的手机系统。富媒体信息流功能则需 Android3.0 或以上版本的系统。</p>
<h2 id="jcenter自动集成步骤">jcenter 自动集成步骤</h2>
<p>说明：使用 jcenter 自动集成的开发者，不需要在项目中添加 jar 和 so，jcenter 会自动完成依赖；在 AndroidManifest.xml 中不需要添加任何 JPush SDK 相关的配置，jcenter 会自动导入。</p>
<ol type="1">
<li>确认 android studio 的 Project 根目录的主 gradle 中配置了 jcenter 支持。（新建 project 默认配置就支持）<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">buildscript {</span><br><span class="line">    repositories {</span><br><span class="line">        jcenter()</span><br><span class="line">    }</span><br><span class="line">    ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">allprojects {</span><br><span class="line">    repositories {</span><br><span class="line">        jcenter()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>在 module 的 gradle 中添加依赖和 AndroidManifest 的替换变量。<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">android {</span><br><span class="line">    ......</span><br><span class="line">    defaultConfig {</span><br><span class="line">        applicationId "com.xxx.xxx" //JPush上注册的包名.</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        ndk {</span><br><span class="line">            //选择要添加的对应cpu类型的.so库。</span><br><span class="line">            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'</span><br><span class="line">            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        manifestPlaceholders = [</span><br><span class="line">            JPUSH_PKGNAME : applicationId,</span><br><span class="line">            JPUSH_APPKEY : "你的appkey", //JPush上注册的包名对应的appkey.</span><br><span class="line">            JPUSH_CHANNEL : "自定义渠道名称", //用户渠道统计的渠道名称</span><br><span class="line">        ]</span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line">    ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    compile 'cn.jiguang.sdk:jpush:x.x.x'  // 此处为JPush的版本号</span><br><span class="line">    compile 'cn.jiguang.sdk:jcore:x.x.x'  // 此处为JCore的版本号</span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br>
注：如果在添加以上 abiFilter 配置之后 android Studio 出现以下提示：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">NDK integration is deprecated in the current plugin. Consider trying the new experimental plugin.</span><br></pre></td></tr></tbody></table></figure><br>
则在 Project 根目录的 gradle.properties 文件中添加：<br>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">android.useDeprecatedNdk=true</span><br></pre></td></tr></tbody></table></figure><br>
说明：若没有 res/drawable-xxxx/jpush_notification_icon 这个资源默认使用应用图标作为通知 icon，在 5.0 以上系统将应用图标作为 statusbar icon 可能显示不正常，用户可定义没有阴影和渐变色的 icon 替换这个文件，文件名不要变。</li>
</ol>
<h2 id="初始化sdk">初始化 SDK</h2>
<p>在主 activity 中：</p>
<ol type="1">
<li>import cn.jpush.android.api.JPushInterface;</li>
<li> 在 onCreate 函数中<br>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">JPushInterface.setDebugMode(<span class="keyword">true</span>); <span class="comment">//开启调试</span></span><br><span class="line">JPushInterface.init(<span class="keyword">this</span>); <span class="comment">//初始化</span></span><br><span class="line">rid = JPushInterface.getRegistrationID(getApplicationContext()); <span class="comment">//获取Registration ID</span></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="接收推送消息receiver">接收推送消息 Receiver</h2>
<p>JPush SDK 收到推送，通过广播的方式，转发给开发者 App，这样开发者就可以灵活地进行处理。<br>
这个动作不是必须的。用户有需要才定义 Receiver 类来处理 SDK 过来的广播。<br>
如果不做这个动作，即不写自定义 Receiver，也不在 AndroidManifest.xml 里配置这个 Receiver，则默认的行为是：</p>
<ol type="1">
<li>接收到推送的自定义消息，则没有被处理</li>
<li>可以正常收到通知，用户点击打开应用主界面<br>
### 接受广播<br>
如果全部类型的广播都接收，则需要在 AndroidManifest.xml 里添加如下的配置信息：<br>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"Your Receiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.REGISTRATION"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.MESSAGE_RECEIVED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.NOTIFICATION_RECEIVED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.NOTIFICATION_OPENED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.NOTIFICATION_CLICK_ACTION"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.CONNECTION"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"You package Name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>
### 开发者自定义 Receiver 代码示例<br>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jpush.android.api.JPushInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"JPush"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line">        Bundle bundle = intent.getExtras();</span><br><span class="line">        Log.d(TAG, <span class="string">"[MyReceiver] onReceive - "</span> + intent.getAction());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (JPushInterface.ACTION_REGISTRATION_ID.equals(intent.getAction())) {</span><br><span class="line">            String regId = bundle.getString(JPushInterface.EXTRA_REGISTRATION_ID);</span><br><span class="line">            Log.d(TAG, <span class="string">"[MyReceiver] 接收Registration Id : "</span> + regId);</span><br><span class="line">            <span class="comment">//send the Registration Id to your server...</span></span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (JPushInterface.ACTION_MESSAGE_RECEIVED.equals(intent.getAction())) {</span><br><span class="line">            Log.d(TAG, <span class="string">"[MyReceiver] 接收到推送下来的自定义消息: "</span> + bundle.getString(JPushInterface.EXTRA_MESSAGE));</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (JPushInterface.ACTION_NOTIFICATION_RECEIVED.equals(intent.getAction())) {</span><br><span class="line">            Log.d(TAG, <span class="string">"[MyReceiver] 接收到推送下来的通知: "</span> + bundle.getString(JPushInterface.EXTRA_ALERT) +</span><br><span class="line">                    <span class="string">", extras: "</span> + bundle.getString(JPushInterface.EXTRA_EXTRA));</span><br><span class="line">            <span class="keyword">int</span> notifactionId = bundle.getInt(JPushInterface.EXTRA_NOTIFICATION_ID);</span><br><span class="line">            Log.d(TAG, <span class="string">"[MyReceiver] 接收到推送下来的通知的ID: "</span> + notifactionId);</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (JPushInterface.ACTION_NOTIFICATION_OPENED.equals(intent.getAction())) {</span><br><span class="line">            Log.d(TAG, <span class="string">"[MyReceiver] 用户点击打开了通知"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打开自定义的Activity</span></span><br><span class="line">            Intent i = <span class="keyword">new</span> Intent(context, 需要跳转的activity名称.class);</span><br><span class="line">            i.putExtras(bundle);</span><br><span class="line">            <span class="comment">//i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span></span><br><span class="line">            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP );</span><br><span class="line">            context.startActivity(i);</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (JPushInterface.ACTION_RICHPUSH_CALLBACK.equals(intent.getAction())) {</span><br><span class="line">            Log.d(TAG, <span class="string">"[MyReceiver] 用户收到到RICH PUSH CALLBACK: "</span> + bundle.getString(JPushInterface.EXTRA_EXTRA));</span><br><span class="line">            <span class="comment">//在这里根据 JPushInterface.EXTRA_EXTRA 的内容处理代码，比如打开新的Activity， 打开一个网页等..</span></span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(JPushInterface.ACTION_CONNECTION_CHANGE.equals(intent.getAction())) {</span><br><span class="line">            <span class="keyword">boolean</span> connected = intent.getBooleanExtra(JPushInterface.EXTRA_CONNECTION_CHANGE, <span class="keyword">false</span>);</span><br><span class="line">            Log.w(TAG, <span class="string">"[MyReceiver]"</span> + intent.getAction() +<span class="string">" connected state change to "</span>+connected);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            Log.d(TAG, <span class="string">"[MyReceiver] Unhandled intent - "</span> + intent.getAction());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>解锁网易云音乐客户端变灰歌曲</title>
    <url>/contents/%E8%A7%A3%E9%94%81%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%98%E7%81%B0%E6%AD%8C%E6%9B%B2.html</url>
    <content><![CDATA[<p>网易云音乐现如今很多音乐涉及到版权的问题无法播放，即使开了 VIP 也不行。<br>
下面介绍一个开源项目，来解决这个问题！亲测有效！推荐大家本机部署！<br>
<span id="more"></span></p>
<h1 id="项目地址">项目地址</h1>
<p>解锁网易云音乐客户端变灰歌曲 <a href="https://github.com/nondanee/UnblockNeteaseMusic">github</a> <pangu> </pangu><a href="https://soga.ee/285.html">参考教程</a></p>
<h1 id="功能特点">功能特点</h1>
<p>使用网易云旧链 / QQ / 虾米 / 百度 / 酷狗 / 酷我 / 咕咪 / JOOX 音源替换变灰歌曲链接 (默认仅启用前四)。<br>
为请求增加 X-Real-IP 参数解锁海外限制，支持指定网易云服务器 IP，支持设置上游 HTTP / HTTPS 代理。<br>
完整的流量代理功能 (HTTP / HTTPS)，可直接作为系统代理 (同时支持 PAC)。</p>
<h1 id="windows安装">Windows 安装</h1>
<ol type="1">
<li>下载安装 <a href="https://nodejs.org/en/">Node.js</a>。</li>
<li>下载<a href="https://github.com/nondanee/UnblockNeteaseMusic/archive/master.zip">项目源码</a>到本地，并解压到 / UnblockNeteaseMusic 目录。</li>
<li>以<strong>管理员</strong>身份运行 CMD，切换到 / UnblockNeteaseMusic 目录，然后安装依赖库 <code>npm install</code></li>
<li>打开网易客户端，点击右上角【设置】 – 【工具】 – 【Http 代理】 – 点击【自定义代理】 – 下拉框选择【HTTP 代理】，输入服务器地址 <code>127.0.0.1</code> 和端口 <code>18080</code>，重启客户端。</li>
</ol>
<h1 id="使用">使用</h1>
<p>打开命令行，切换到 / UnblockNeteaseMusic 目录，输入 <code>node app.js –p 18080</code>，然后再打开网易云音乐客户端即可。</p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>豆瓣爬虫实例</title>
    <url>/contents/%E8%B1%86%E7%93%A3%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B.html</url>
    <content><![CDATA[<p>本文提供 3 个例子来说明如何利用 Python 爬取豆瓣的数据。<br>
<span id="more"></span></p>
<h1 id="用requests获取页面">用 requests 获取页面</h1>
<p>三个实例都要用到 request 库来获取页面资源。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span> <span class="comment"># 获取网页的HTML源码</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 设置响应等待时间为30秒</span></span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        <span class="comment"># 检查状态码是否为200，否则抛出异常。</span></span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        <span class="comment"># 返回请求的相应内容。</span></span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 抛出异常则重试</span></span><br><span class="line">        <span class="keyword">return</span> getHTMLText(url)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="实例一豆瓣国产电视剧爬虫">实例一：豆瓣国产电视剧爬虫</h1>
<h2 id="观察所需爬取的页面">观察所需爬取的页面</h2>
<p>所需爬取的页面为<a href="https://movie.douban.com/tv/#!type=tv&amp;tag=%E5%9B%BD%E4%BA%A7%E5%89%A7&amp;sort=time&amp;page_limit=20&amp;page_start=0">按时间排序的国产电视剧评分等信息</a>。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E8%B1%86%E7%93%A3%E7%94%B5%E8%A7%86%E5%89%A7.png" class=""><br>
查看其源代码发现电视剧列表内容是由 js 加载的。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%BA%90%E7%A0%811.png" class=""></p>
<h2 id="获取电视剧豆瓣地址列表">获取电视剧豆瓣地址列表</h2>
<p>打开控制台，观察一下 network 中往返的数据。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%8E%A7%E5%88%B6%E5%8F%B01.png" class=""><br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%8E%A7%E5%88%B6%E5%8F%B02.png" class=""><br>
观察到网页通过查询 <code>https://movie.douban.com/j/search_subjects?type=tv&amp;tag=国产剧&amp;sort=time&amp;page_limit=20&amp;page_start=0</code><br>
其中 type 是分类（movie，tv）；tag 是小分类（热门，美剧，英剧，韩剧，日剧，国产剧，港剧，日本动画，综艺）；sort 是排序（recommend，time，rank）；page_limit 是每页展示的电视剧数量（不可修改）；page_start 是起始页面，为 20 的倍数（例如，第一页是 0，第二页是 20 等等）。<br>
返回的是 json 数据，直接读取其 url 字段即可。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTVdramalist</span>(<span class="params">url, Numofpage</span>):</span></span><br><span class="line">    <span class="comment"># 电视剧豆瓣地址列表</span></span><br><span class="line">    TVdramalist = []</span><br><span class="line">    <span class="comment"># Numofpage为爬取页面数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(Numofpage)):</span><br><span class="line">        <span class="comment"># 获取第i页网页的资源，20为每页的电视剧记录数</span></span><br><span class="line">        text = getHTMLText(url+<span class="built_in">str</span>(i*<span class="number">20</span>))</span><br><span class="line">        <span class="comment"># 由于此url返回json对象，所以将获取到的资源转换为json格式</span></span><br><span class="line">        json_text = json.loads(text)</span><br><span class="line">        <span class="comment"># 获取json中的url字段，存入TVdramalist列表</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            dic = json_text[<span class="string">'subjects'</span>][j]</span><br><span class="line">            TVdramalist.append(dic[<span class="string">'url'</span>])</span><br><span class="line">    <span class="keyword">return</span> TVdramalist</span><br><span class="line"></span><br><span class="line">moivelist_url = <span class="string">'https://movie.douban.com/j/search_subjects?type=tv&amp;tag=国产剧&amp;sort=time&amp;page_limit=20&amp;page_start='</span></span><br><span class="line">Numofpage = <span class="number">5</span></span><br><span class="line"><span class="comment"># 获取最新5*20条电视剧的详情页链接</span></span><br><span class="line">moivelist = getTVdramalist(moivelist_url, Numofpage)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="分析电视剧详情页">分析电视剧详情页</h2>
<p>对于上面获取的每一个 url 对应一个电视剧详情页。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E8%AF%A6%E6%83%85%E9%A1%B5.png" class=""><br>
查看其源代码发现电视剧详情内容是由 HTML 加载的。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%BA%90%E7%A0%812.png" class=""><br>
则用 beautifulsoup 库结合正则表达式 re 库分析并获取所需字段。<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTVdramainfo</span>(<span class="params">url, writer</span>):</span></span><br><span class="line">    text = getHTMLText(url)</span><br><span class="line">    <span class="comment"># 将获取到的资源转换为soup对象</span></span><br><span class="line">    soup = BeautifulSoup(text)</span><br><span class="line">    <span class="comment"># 找到所需字段</span></span><br><span class="line">    name = soup.find(<span class="built_in">property</span>=<span class="string">"v:itemreviewed"</span>).string</span><br><span class="line">    rating = <span class="built_in">float</span>(soup.find(<span class="built_in">property</span>=<span class="string">"v:average"</span>).string)</span><br><span class="line">    votes = <span class="built_in">int</span>(soup.find(<span class="built_in">property</span>=<span class="string">"v:votes"</span>).string)</span><br><span class="line">    episode = <span class="built_in">int</span>(re.search(<span class="string">u'集数:&lt;/span&gt; (\d+)&lt;br/&gt;'</span>, text).group(<span class="number">1</span>))</span><br><span class="line">    duration = <span class="built_in">int</span>(re.search(<span class="string">u'单集片长:&lt;/span&gt; (\d+)分钟&lt;br/&gt;'</span>, text).group(<span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><br>
从property为v:itemreviewed的标签可以得到电视剧名。<br>
从property为v:average的标签可以得到评分。<br>
从property为v:votes的标签可以得到评分人数。<br>
<code>&lt;span class="pl"&gt;集数:&lt;/span&gt; 12&lt;br/&gt;</code> 和 <code>&lt;span class="pl"&gt;单集片长:&lt;/span&gt; 55分钟&lt;br/&gt;</code> 的标签属性和其他标签的属性都一样，这里直接用正则表达式进行查找反而更方便。<p></p>
<h2 id="存储所爬信息到数据库">存储所爬信息到数据库</h2>
<p>这里使用 sqlite3 库实现<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbtablecreate</span>():</span></span><br><span class="line">    <span class="comment"># 执行一条SQL语句，创建ChineseTVdrama表</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'CREATE TABLE ChineseTVdrama (name TEXT PRIMARY KEY, rating REAL, votes INT, episode INT, duration INT)'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Table created successfully'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbinsertorupdate</span>(<span class="params">name, rating, votes, episode, duration</span>):</span></span><br><span class="line">    <span class="comment"># 执行一条SQL语句，插入一条记录</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'INSERT INTO ChineseTVdrama (name, rating, votes, episode, duration) VALUES (?, ?, ?, ?, ?)'</span>, (name, rating, votes, episode, duration))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'data insert successfully'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果该数据已经存在，则插入异常，改用更新数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.execute(<span class="string">'UPDATE ChineseTVdrama SET rating = ?, votes = ?, episode = ?, duration = ? WHERE name = ?'</span>, (rating, votes, episode, duration, name))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'data update successfully'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'update: '</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbquery</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 以电视剧名称为关键词查询数据库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'SELECT name, rating, votes, episode, duration FROM ChineseTVdrama WHERE name = ?'</span>, (name))</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">            <span class="keyword">return</span> row</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'query: '</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">moivelist_url = <span class="string">'https://movie.douban.com/j/search_subjects?type=tv&amp;tag=国产剧&amp;sort=time&amp;page_limit=20&amp;page_start='</span></span><br><span class="line">Numofpage = <span class="number">5</span></span><br><span class="line"><span class="comment"># 获取最新5*20条电视剧的详情页链接</span></span><br><span class="line">moivelist = getTVdramalist(moivelist_url, Numofpage)</span><br><span class="line"><span class="comment"># 连接到SQLite数据库</span></span><br><span class="line"><span class="comment"># 如果文件不存在，会自动在当前目录创建</span></span><br><span class="line">doubandatabase = sqlite3.connect(<span class="string">'豆瓣.db'</span>)</span><br><span class="line"><span class="comment"># 创建一个Cursor</span></span><br><span class="line">cursor = doubandatabase.cursor()</span><br><span class="line"><span class="comment"># 创建一个数据库表</span></span><br><span class="line">dbtablecreate()</span><br><span class="line"><span class="comment"># 从每个电视剧的详情页中获取所需字段存入数据库</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> moivelist:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        getTVdramainfo(i, cursor)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="comment"># 关闭Cursor</span></span><br><span class="line">cursor.close()</span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">doubandatabase.commit()</span><br><span class="line"><span class="comment"># 关闭Connection</span></span><br><span class="line">doubandatabase.close()</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'豆瓣.db'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">"SELECT name FROM sqlite_master WHERE type = 'table'"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">    tablename = i[<span class="number">0</span>]</span><br><span class="line">    cursor.execute(<span class="string">"SELECT * FROM '{}'"</span>.<span class="built_in">format</span>(tablename))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(tablename + <span class="string">'.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf_8_sig'</span>) <span class="keyword">as</span> csv_file: </span><br><span class="line">        csv_writer = csv.writer(csv_file)</span><br><span class="line">        csv_writer.writerow([j[<span class="number">0</span>] <span class="keyword">for</span> j <span class="keyword">in</span> cursor.description])</span><br><span class="line">        csv_writer.writerows(cursor)</span><br></pre></td></tr></tbody></table></figure><br>
可以用SQLiteSpy.exe查看数据库。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%95%B0%E6%8D%AE%E5%BA%931.png" class=""><p></p>
<h1 id="实例二豆瓣正在上映电影爬虫">实例二：豆瓣正在上映电影爬虫</h1>
<h2 id="观察所需爬取的页面-1">观察所需爬取的页面</h2>
<p>所需爬取的页面为<a href="https://movie.douban.com/cinema/nowplaying/wuhan/">正在上映电影</a>。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E8%B1%86%E7%93%A3%E6%AD%A3%E5%9C%A8%E4%B8%8A%E6%98%A0%E7%94%B5%E5%BD%B1.png" class=""><br>
查看其源代码。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%BA%90%E7%A0%813.png" class=""></p>
<h2 id="获取电影信息">获取电影信息</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getnowshowing</span>(<span class="params">url, city</span>):</span></span><br><span class="line">    text = getHTMLText(url + city)</span><br><span class="line">    <span class="comment"># 将获取到的资源转换为soup对象</span></span><br><span class="line">    soup = BeautifulSoup(text)</span><br><span class="line">    <span class="comment"># 找到所有样式为lists的标签</span></span><br><span class="line">    lists = soup.find(class_=<span class="string">"lists"</span>)</span><br><span class="line">    <span class="comment"># 遍历其儿子节点</span></span><br><span class="line">    <span class="keyword">for</span> eachmoive <span class="keyword">in</span> lists.children:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(eachmoive) == bs4.element.Tag:</span><br><span class="line">            <span class="comment"># 找到所需字段</span></span><br><span class="line">            name = eachmoive[<span class="string">'data-title'</span>]</span><br><span class="line">            rating = <span class="built_in">float</span>(eachmoive[<span class="string">'data-score'</span>])</span><br><span class="line">            votes = <span class="built_in">int</span>(eachmoive[<span class="string">'data-votecount'</span>])</span><br><span class="line">            <span class="keyword">if</span> eachmoive[<span class="string">'data-duration'</span>].encode(<span class="string">'utf-8'</span>) == <span class="string">''</span>:</span><br><span class="line">                duration = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                duration = <span class="built_in">int</span>(<span class="built_in">str</span>(eachmoive[<span class="string">'data-duration'</span>].encode(<span class="string">'utf-8'</span>)).split(<span class="string">'\\'</span>)[<span class="number">0</span>].split(<span class="string">'\''</span>)[<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure>
<p>从源码发现电影列表内容分为正在上映和即将上映两块，<code>soup.find(class_="lists")</code> 只返回第一个符合条件的标签。<br>
其每一个孩子节点包含每一个电影信息。所有信息都存在孩子节点的 <code>&lt;li&gt;</code> 标签内，所以只取 Tag 对象，Tag 对象的属性访问与字典一样。<br>
注意 data-duration 的值有可能为空，所以要单独判断。<br>
eachmoive ['data-duration'] 返回 'xxx 分钟 ' 的 Unicode 对象，<code>.encode('utf-8')</code> 将 Unicode 对象转换成 string 对象。<code>filter(str.isdigit, str)</code> 提取 str 中数字。</p>
<h2 id="存储所爬信息到数据库-1">存储所爬信息到数据库</h2>
<p>这里使用 sqlite3 库实现<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbtablecreate</span>():</span></span><br><span class="line">    <span class="comment"># 执行一条SQL语句，创建NowShowingMoive表</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'CREATE TABLE NowShowingMoive (name TEXT PRIMARY KEY, rating REAL, votes INT, duration INT)'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Table created successfully'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbinsert</span>(<span class="params">name, rating, votes, duration</span>):</span></span><br><span class="line">    <span class="comment"># 执行一条SQL语句，插入一条记录</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'INSERT INTO NowShowingMoive (name, rating, votes, duration) VALUES (?, ?, ?, ?)'</span>, (name, rating, votes, duration))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'data insert successfully'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'insert: '</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbquery</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 以电影名称为关键词查询数据库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'SELECT name, rating, votes, duration FROM NowShowingMoive WHERE name = ?'</span>, (name))</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">            <span class="keyword">return</span> row</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'query: '</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到SQLite数据库</span></span><br><span class="line"><span class="comment"># 如果文件不存在，会自动在当前目录创建</span></span><br><span class="line">doubandatabase = sqlite3.connect(<span class="string">'豆瓣.db'</span>)</span><br><span class="line"><span class="comment"># 创建一个Cursor</span></span><br><span class="line">cursor = doubandatabase.cursor()</span><br><span class="line"><span class="comment"># 如果数据库表已经存在，则删除</span></span><br><span class="line">cursor.execute(<span class="string">'DROP TABLE IF EXISTS NowShowingMoive'</span>)</span><br><span class="line"><span class="comment"># 创建一个数据库表</span></span><br><span class="line">dbtablecreate()</span><br><span class="line">nowshowing_url = <span class="string">'https://movie.douban.com/cinema/nowplaying/'</span></span><br><span class="line">city = <span class="string">'wuhan'</span></span><br><span class="line">nowshowing = getnowshowing(nowshowing_url, city)</span><br><span class="line"><span class="comment"># 关闭Cursor</span></span><br><span class="line">cursor.close()</span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">doubandatabase.commit()</span><br><span class="line"><span class="comment"># 关闭Connection</span></span><br><span class="line">doubandatabase.close()</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'豆瓣.db'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">"SELECT name FROM sqlite_master WHERE type = 'table'"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">    tablename = i[<span class="number">0</span>]</span><br><span class="line">    cursor.execute(<span class="string">"SELECT * FROM '{}'"</span>.<span class="built_in">format</span>(tablename))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(tablename + <span class="string">'.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf_8_sig'</span>) <span class="keyword">as</span> csv_file: </span><br><span class="line">        csv_writer = csv.writer(csv_file)</span><br><span class="line">        csv_writer.writerow([j[<span class="number">0</span>] <span class="keyword">for</span> j <span class="keyword">in</span> cursor.description])</span><br><span class="line">        csv_writer.writerows(cursor)</span><br></pre></td></tr></tbody></table></figure><br>
可以用SQLiteSpy.exe查看数据库。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%95%B0%E6%8D%AE%E5%BA%932.png" class=""><p></p>
<h1 id="实例三豆瓣电影top250爬虫">实例三：豆瓣电影 TOP250 爬虫</h1>
<h2 id="观察所需爬取的页面-2">观察所需爬取的页面</h2>
<p>所需爬取的页面为<a href="https://movie.douban.com/top250?start=0">豆瓣电影 Top250</a>。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1Top250.png" class=""><br>
查看其源代码。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%BA%90%E7%A0%814.png" class=""></p>
<h2 id="获取电影信息-1">获取电影信息</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTop250moive</span>(<span class="params">url, Numofpage</span>):</span></span><br><span class="line">    <span class="comment"># Numofpage为爬取页面数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Numofpage):</span><br><span class="line">        <span class="comment"># 获取第i页网页的资源，25为每页的电影记录数</span></span><br><span class="line">        text = getHTMLText(url+<span class="built_in">str</span>(i*<span class="number">25</span>))</span><br><span class="line">        <span class="comment"># 将获取到的资源转换为soup对象</span></span><br><span class="line">        soup = BeautifulSoup(text)</span><br><span class="line">        <span class="comment"># 找到所有样式为info的标签</span></span><br><span class="line">        lists = soup.find_all(class_=<span class="string">"info"</span>)</span><br><span class="line">        <span class="comment"># 找到所需字段</span></span><br><span class="line">        <span class="keyword">for</span> eachmoive <span class="keyword">in</span> lists:</span><br><span class="line">            name = eachmoive.find(class_=<span class="string">"title"</span>).string</span><br><span class="line">            year = <span class="built_in">int</span>(eachmoive.find(<span class="string">'p'</span>).get_text().split(<span class="string">'\n'</span>)[<span class="number">2</span>].strip()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">            country = eachmoive.find(<span class="string">'p'</span>).get_text().split(<span class="string">'\n'</span>)[<span class="number">2</span>].split(<span class="string">'/'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">            rating = <span class="built_in">float</span>(eachmoive.find(<span class="built_in">property</span>=<span class="string">"v:average"</span>).string)</span><br><span class="line">            <span class="comment"># 两种方法都可以</span></span><br><span class="line">            votes = <span class="built_in">int</span>(<span class="built_in">str</span>(eachmoive.find(<span class="built_in">property</span>=<span class="string">"v:best"</span>).next_sibling.next_sibling.string.encode(<span class="string">'utf-8'</span>)).split(<span class="string">'\\'</span>)[<span class="number">0</span>].split(<span class="string">'\''</span>)[<span class="number">1</span>])</span><br><span class="line">            votes = <span class="built_in">int</span>(<span class="built_in">str</span>(eachmoive.find(text=re.<span class="built_in">compile</span>(<span class="string">u"人评价"</span>)).encode(<span class="string">'utf-8'</span>)).split(<span class="string">'\\'</span>)[<span class="number">0</span>].split(<span class="string">'\''</span>)[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> eachmoive.find(class_=<span class="string">"inq"</span>) == <span class="literal">None</span>:</span><br><span class="line">                comment = <span class="string">''</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                comment = eachmoive.find(class_=<span class="string">"inq"</span>).string</span><br></pre></td></tr></tbody></table></figure>
<p>从网址发现，Top250 的电影分别展示在 10 个页面，每个页面展示 25 条电影信息，所以 url 的 start 参数为 25 的倍数，值为 0-9。<br>
从源码发现 <code>soup.find(class_="info")</code> 返回每一个电影的信息所在的标签如图。<br>
从样式为 title 的标签可以得到电影名。<br>
从第一个 p 标签可以返回导演、主演、上映年份、国家、类型等信息，并且是分列 2 行，<br>
用<code>.split('\n')[2]</code> 得到第 2 行的字符串，<code>.strip()[0:4])</code> 去掉空格并取前 4 个字符作为年份。<br>
<code>.split('/')[1].strip()</code> 以斜线分隔符分割字符串并取出第二段字符串并去掉前后空格，即国家信息。<br>
从 property 为 v:average 的标签可以得到评分。<br>
由于评分人数从 <code>&lt;span&gt;878960人评价&lt;/span&gt;</code> 标签中获取，但是 span 标签没有任何属性。<br>
所以有两种方法：<br>
1. 通过 <code>find(property="v:best")</code> 找到上一个平行节点，然后通过<code>.next_sibling.next_sibling.string</code> 访问。<br>
2. 通过 <code>eachmoive.find(text=re.compile(u"人评价"))</code> 直接用正则表达式查找相应的字符串。<br>
最后通过 <code>filter(str.isdigit, str)</code> 提取 str 中数字。<br>
从样式为 inq 的标签可以得到电影评论，注意电影可能没有评论，所以要单独判断。</p>
<h2 id="存储所爬信息到数据库-2">存储所爬信息到数据库</h2>
<p>这里使用 sqlite3 库实现<br>
</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbtablecreate</span>():</span></span><br><span class="line">    <span class="comment"># 执行一条SQL语句，创建Top250movie表</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'CREATE TABLE Top250movie (name TEXT PRIMARY KEY, year INT, country TEXT, rating REAL, votes INT, comment TEXT)'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Table created successfully'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbinsert</span>(<span class="params">name, year, country, rating, votes, comment</span>):</span></span><br><span class="line">    <span class="comment"># 执行一条SQL语句，插入一条记录</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'INSERT INTO Top250movie (name, year, country, rating, votes, comment) VALUES (?, ?, ?, ?, ?, ?)'</span>, (name, year, country, rating, votes, comment))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'data insert successfully'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'insert: '</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbquery</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 以电影名称为关键词查询数据库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(<span class="string">'SELECT name, year, country, rating, votes, comment FROM Top250movie WHERE name = ?'</span>, (name))</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">            <span class="keyword">return</span> row</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'query: '</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到SQLite数据库</span></span><br><span class="line"><span class="comment"># 如果文件不存在，会自动在当前目录创建</span></span><br><span class="line">doubandatabase = sqlite3.connect(<span class="string">'豆瓣.db'</span>)</span><br><span class="line"><span class="comment"># 创建一个Cursor</span></span><br><span class="line">cursor = doubandatabase.cursor()</span><br><span class="line"><span class="comment"># 如果数据库表已经存在，则删除</span></span><br><span class="line">cursor.execute(<span class="string">'DROP TABLE IF EXISTS Top250movie'</span>)</span><br><span class="line"><span class="comment"># 创建一个数据库表</span></span><br><span class="line">dbtablecreate()</span><br><span class="line">moivelist_url = <span class="string">'https://movie.douban.com/top250?start='</span></span><br><span class="line">Numofpage = <span class="number">10</span></span><br><span class="line"><span class="comment"># 获取最新10*25条电影信息</span></span><br><span class="line">getTop250moive(moivelist_url, Numofpage)</span><br><span class="line"><span class="comment"># 关闭Cursor</span></span><br><span class="line">cursor.close()</span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">doubandatabase.commit()</span><br><span class="line"><span class="comment"># 关闭Connection</span></span><br><span class="line">doubandatabase.close()</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'豆瓣.db'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">"SELECT name FROM sqlite_master WHERE type = 'table'"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">    tablename = i[<span class="number">0</span>]</span><br><span class="line">    cursor.execute(<span class="string">"SELECT * FROM '{}'"</span>.<span class="built_in">format</span>(tablename))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(tablename + <span class="string">'.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf_8_sig'</span>) <span class="keyword">as</span> csv_file: </span><br><span class="line">        csv_writer = csv.writer(csv_file)</span><br><span class="line">        csv_writer.writerow([j[<span class="number">0</span>] <span class="keyword">for</span> j <span class="keyword">in</span> cursor.description])</span><br><span class="line">        csv_writer.writerows(cursor)</span><br></pre></td></tr></tbody></table></figure><br>
可以用SQLiteSpy.exe查看数据库。<br>
<img src="/images/Python%E7%88%AC%E8%99%AB/%E6%95%B0%E6%8D%AE%E5%BA%933.png" class=""><p></p>
<h1 id="其他">其他</h1>
<p><a href="/assets/codes/豆瓣/douban_TV_drama.py">实例一源码</a><br>
<a href="/assets/codes/豆瓣/douban_nowshowing_movie.py">实例二源码</a><br>
<a href="/assets/codes/豆瓣/douban_top250_movie.py">实例三源码</a><br>
<a href="/assets/codes/豆瓣/SQLiteSpy.zip">SQLiteSpy 数据库查看器下载</a><br>
<a href="/assets/codes/豆瓣/豆瓣.db">豆瓣爬虫结果下载</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Crawler</tag>
        <tag>Examples</tag>
      </tags>
  </entry>
</search>
